{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json",
        "dbt_version": "0.20.0b1",
        "generated_at": "2021-06-17T11:53:33.265444Z",
        "invocation_id": "6eda6789-ea50-4d1c-82fe-460fa10a678e",
        "env": {},
        "project_id": "91d1c6c233217751d17fc76e71ba54b5",
        "user_id": "be2d8f9a-ca3d-4ee9-8a31-16c35ed62ec1",
        "send_anonymous_usage_stats": true,
        "adapter_type": "postgres"
    },
    "nodes": {
        "model.hube.stg_care_site": {
            "raw_sql": "-- stg_care_site\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=true\r\n )\r\n}}\r\n\r\nwith base_d_servei as (\r\n\r\n    select * from {{ ref('base_d_servei') }}\r\n\r\n),\r\n\r\nselect\r\n    {{ bigint_id_from_str(\"codi::text\") }}::bigint as care_site_id,\r\n    descripcio::varchar(255) as care_site_name, -- mapping needed\r\n    0::int as place_of_service_concept_id, -- mapping needed\r\n    null::bigint as location_id,\r\n    codi::text as care_site_source_value,\r\n    null::text as place_of_service_source_value,\r\n    {{ var('shard_id') }} as shard_id\r\nfrom base_f_servei",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_d_servei"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_care_site"
            ],
            "unique_id": "model.hube.stg_care_site",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_care_site.sql",
            "original_file_path": "models\\derived\\stg_care_site.sql",
            "name": "stg_care_site",
            "alias": "stg_care_site",
            "checksum": {
                "name": "sha256",
                "checksum": "05e7070bc04bb8c83e2e290490fd87297173614b054b51d143978bc32be53789"
            },
            "tags": [],
            "refs": [
                [
                    "base_d_servei"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_care_site.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_care_site\n\n\n\nwith base_d_servei as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_d_servei\"\n\n),\n\nselect\n    \n    abs(('x' || substr(md5(codi::text), 1, 16))::bit(64)::bigint)\n::bigint as care_site_id,\n    descripcio::varchar(255) as care_site_name, -- mapping needed\n    0::int as place_of_service_concept_id, -- mapping needed\n    null::bigint as location_id,\n    codi::text as care_site_source_value,\n    null::text as place_of_service_source_value,\n    9 as shard_id\nfrom base_f_servei",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_care_site\""
        },
        "model.hube.stg_condition_occurrence": {
            "raw_sql": "-- stg_condition_occurrence\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=true\r\n)\r\n}}\r\n\r\nwith base_f_diagnostic as (\r\n\r\n    select * from {{ ref('base_f_diagnostic') }}\r\n\r\n),\r\nvisit_occurrence as (\r\n\r\n    select * from {{ ref('visit_occurrence') }}\r\n\r\n),\r\nsource_to_standard_vocab_map AS (\r\n\r\n    select * from {{ ref('source_to_standard_vocab_map') }}\r\n    where source_vocabulary_id in ('ICD9CM', 'ICD10CM')\r\n        and target_domain_id = 'Condition'\r\n        and target_standard_concept = 'S'\r\n        and target_invalid_reason is null\r\n),\r\ncondition_occurrence as (\r\n    select\r\n        {{ bigint_id_from_str(\"d.codi\") }}::bigint AS condition_occurrence_id,\r\n        v.person_id::bigint AS person_id,\r\n        (case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end)::int AS condition_concept_id,\r\n        d.data::date AS condition_start_date,\r\n        d.data::timestamp AS condition_start_datetime,\r\n        null::date AS condition_end_date,\r\n        null::timestamp AS condition_end_datetime,\r\n        32020::int AS condition_type_concept_id, -- EHR encounter diagnosis\r\n        0::int AS condition_status_concept_id,\r\n        null::varchar(20) AS stop_reason,\r\n        null::bigint AS provider_id,\r\n        v.visit_occurrence_id::bigint AS visit_occurrence_id,\r\n        null::bigint AS visit_detail_id,\r\n        d.cod_data_clinica::text AS condition_source_value,\r\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as condition_source_concept_id,\r\n        null::text AS condition_status_source_value,\r\n        {{ var('shard_id') }}::int AS shard_id,\r\n        d.iomed_row_insert_datetime::timestamp\r\n    from base_f_diagnostic d\r\n    inner join visit_occurrence v\r\n        on d.cod_episodi = v.visit_source_value\r\n    inner join source_to_standard_vocab_map srctostdvm\r\n        on srctostdvm.source_code = d.cod_data_clinica\r\n    \r\n)\r\n\r\nselect *\r\nfrom condition_occurrence",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_f_diagnostic",
                    "model.hube.visit_occurrence",
                    "model.hube.source_to_standard_vocab_map"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_condition_occurrence"
            ],
            "unique_id": "model.hube.stg_condition_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_condition_occurrence.sql",
            "original_file_path": "models\\derived\\stg_condition_occurrence.sql",
            "name": "stg_condition_occurrence",
            "alias": "stg_condition_occurrence",
            "checksum": {
                "name": "sha256",
                "checksum": "01de3b6c51b61e46d9794b5e1f719005fe41d62dd7e77f9d0348a0e8f3f1ae50"
            },
            "tags": [],
            "refs": [
                [
                    "base_f_diagnostic"
                ],
                [
                    "visit_occurrence"
                ],
                [
                    "source_to_standard_vocab_map"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_condition_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_condition_occurrence\n\n\n\nwith base_f_diagnostic as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_f_diagnostic\"\n\n),\nvisit_occurrence as (\n\n    select * from \"hube\".\"cdm\".\"visit_occurrence\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    select * from \"hube\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    where source_vocabulary_id in ('ICD9CM', 'ICD10CM')\n        and target_domain_id = 'Condition'\n        and target_standard_concept = 'S'\n        and target_invalid_reason is null\n),\ncondition_occurrence as (\n    select\n        \n    abs(('x' || substr(md5(d.codi), 1, 16))::bit(64)::bigint)\n::bigint AS condition_occurrence_id,\n        v.person_id::bigint AS person_id,\n        (case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end)::int AS condition_concept_id,\n        d.data::date AS condition_start_date,\n        d.data::timestamp AS condition_start_datetime,\n        null::date AS condition_end_date,\n        null::timestamp AS condition_end_datetime,\n        32020::int AS condition_type_concept_id, -- EHR encounter diagnosis\n        0::int AS condition_status_concept_id,\n        null::varchar(20) AS stop_reason,\n        null::bigint AS provider_id,\n        v.visit_occurrence_id::bigint AS visit_occurrence_id,\n        null::bigint AS visit_detail_id,\n        d.cod_data_clinica::text AS condition_source_value,\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as condition_source_concept_id,\n        null::text AS condition_status_source_value,\n        9::int AS shard_id,\n        d.iomed_row_insert_datetime::timestamp\n    from base_f_diagnostic d\n    inner join visit_occurrence v\n        on d.cod_episodi = v.visit_source_value\n    inner join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = d.cod_data_clinica\n    \n)\n\nselect *\nfrom condition_occurrence",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_condition_occurrence\""
        },
        "model.hube.stg_death": {
            "raw_sql": "-- stg_death\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=true\r\n )\r\n}}\r\n\r\nwith person as (\r\n\r\n    select * from {{ ref('stg_person') }}\r\n\r\n),\r\ndeath as (\r\n    select\r\n        person_id::bigint as person_id, -- NOT NULL\r\n        death_datetime::date as death_date, -- NOT NULL\r\n        death_datetime::timestamp as death_datetime,\r\n        0::integer as death_type_concept_id, -- NOT NULL\r\n        null::integer as cause_concept_id,\r\n        null::text as cause_source_value,\r\n        null::integer as cause_source_concept_id,\r\n        {{ var('shard_id') }} as shard_id,\r\n        iomed_row_insert_datetime\r\n    from person\r\n    where death_datetime is not null\r\n)\r\n\r\nselect * from death",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.stg_person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_death"
            ],
            "unique_id": "model.hube.stg_death",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_death.sql",
            "original_file_path": "models\\derived\\stg_death.sql",
            "name": "stg_death",
            "alias": "stg_death",
            "checksum": {
                "name": "sha256",
                "checksum": "5ebdcb2ec7ca3946ee97822709762b1044aacfd22ca1a075abc93858b2fba944"
            },
            "tags": [],
            "refs": [
                [
                    "stg_person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_death.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_death\n\n\n\nwith person as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_person\"\n\n),\ndeath as (\n    select\n        person_id::bigint as person_id, -- NOT NULL\n        death_datetime::date as death_date, -- NOT NULL\n        death_datetime::timestamp as death_datetime,\n        0::integer as death_type_concept_id, -- NOT NULL\n        null::integer as cause_concept_id,\n        null::text as cause_source_value,\n        null::integer as cause_source_concept_id,\n        9 as shard_id,\n        iomed_row_insert_datetime\n    from person\n    where death_datetime is not null\n)\n\nselect * from death",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_death\""
        },
        "model.hube.stg_drug_exposure": {
            "raw_sql": "-- stg_drug_exposure\r\n\r\n{{ config(\r\n    materialized='table_unlogged',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith base_f_farmacia as (\r\n\r\n    select * from {{ ref('base_f_farmacia')}}\r\n\r\n),\r\nbase_f_farmacia_especialitat as (\r\n\r\n    select * from {{ ref('base_d_far_especialitat')}}\r\n\r\n),\r\nbase_f_prestacio_episodi as (\r\n\r\n    select * from {{ ref('base_f_prestacio_episodi') }}\r\n\r\n),\r\nsource_to_standard_vocab_map AS (\r\n\r\n    select * from {{ ref('source_to_standard_vocab_map') }}\r\n    where source_vocabulary_id = 'ATC'\r\n        and target_domain_id = 'Drug'\r\n        and target_standard_concept = 'S'\r\n        and target_invalid_reason is null\r\n\r\n),\r\nvisit_occurrence as (\r\n\r\n    select * from {{ ref('visit_occurrence') }}\r\n\r\n),\r\ndrug_exposure as (\r\n    select\r\n          {{ bigint_id_from_str(\"f.codi\") }}::bigint AS drug_exposure_id,\r\n          v.person_id::bigint as person_id,\r\n          (case when srctostdvm.target_concept_id is null then 0 else srctostdvm.target_concept_id end)::int as drug_concept_id,\r\n          f.data_inici_presc::date as drug_exposure_start_date,\r\n          f.data_inici_presc::timestamp as drug_exposure_start_datetime,\r\n          f.data_fi_presc::date as drug_exposure_end_date,\r\n          f.data_fi_presc::timestamp as drug_exposure_end_datetime,\r\n          f.data_fi_presc::date as verbatim_end_date,\r\n          0::int as drug_type_concept_id,\r\n          null::varchar(20) as stop_reason,\r\n          null::int as refills,\r\n          null::decimal as quantity,\r\n          date_part('day', f.data_fi_presc - f.data_inici_presc)::int as days_supply,\r\n          null::text as sig,\r\n          0::int as route_concept_id,\r\n          null::varchar(50) as lot_number,\r\n          null::bigint as provider_id,\r\n          v.visit_occurrence_id::bigint as visit_occurrence_id,\r\n          null::int as visit_detail_id,\r\n          fe.cod_farmacia_atc::text as drug_source_value,\r\n          (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as drug_source_concept_id,\r\n          f.des_far_via::text as route_source_value,\r\n          f.num_unitat::text as dose_unit_source_value,\r\n          {{ var('shard_id') }} as shard_id,\r\n          f.iomed_row_insert_datetime\r\n   from base_f_farmacia f\r\n   inner join base_f_farmacia_especialitat fe on fe.codi = f.cod_especialitat\r\n   inner join base_f_prestacio_episodi pe on pe.cod_prestacio = f.cod_prestacio\r\n   inner join visit_occurrence v\r\n        on pe.cod_episodi = v.visit_source_value\r\n   inner join source_to_standard_vocab_map srctostdvm\r\n        on srctostdvm.source_code = fe.cod_farmacia_atc\r\n)\r\nselect * from drug_exposure",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_f_farmacia",
                    "model.hube.base_d_far_especialitat",
                    "model.hube.base_f_prestacio_episodi",
                    "model.hube.source_to_standard_vocab_map",
                    "model.hube.visit_occurrence"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_drug_exposure"
            ],
            "unique_id": "model.hube.stg_drug_exposure",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_drug_exposure.sql",
            "original_file_path": "models\\derived\\stg_drug_exposure.sql",
            "name": "stg_drug_exposure",
            "alias": "stg_drug_exposure",
            "checksum": {
                "name": "sha256",
                "checksum": "b055a2883c750467fc74c215625941e191db46e018687564659cd074b5366ea6"
            },
            "tags": [],
            "refs": [
                [
                    "base_f_farmacia"
                ],
                [
                    "base_d_far_especialitat"
                ],
                [
                    "base_f_prestacio_episodi"
                ],
                [
                    "source_to_standard_vocab_map"
                ],
                [
                    "visit_occurrence"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_drug_exposure.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_drug_exposure\n\n\n\nwith base_f_farmacia as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_f_farmacia\"\n\n),\nbase_f_farmacia_especialitat as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_d_far_especialitat\"\n\n),\nbase_f_prestacio_episodi as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_f_prestacio_episodi\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    select * from \"hube\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    where source_vocabulary_id = 'ATC'\n        and target_domain_id = 'Drug'\n        and target_standard_concept = 'S'\n        and target_invalid_reason is null\n\n),\nvisit_occurrence as (\n\n    select * from \"hube\".\"cdm\".\"visit_occurrence\"\n\n),\ndrug_exposure as (\n    select\n          \n    abs(('x' || substr(md5(f.codi), 1, 16))::bit(64)::bigint)\n::bigint AS drug_exposure_id,\n          v.person_id::bigint as person_id,\n          (case when srctostdvm.target_concept_id is null then 0 else srctostdvm.target_concept_id end)::int as drug_concept_id,\n          f.data_inici_presc::date as drug_exposure_start_date,\n          f.data_inici_presc::timestamp as drug_exposure_start_datetime,\n          f.data_fi_presc::date as drug_exposure_end_date,\n          f.data_fi_presc::timestamp as drug_exposure_end_datetime,\n          f.data_fi_presc::date as verbatim_end_date,\n          0::int as drug_type_concept_id,\n          null::varchar(20) as stop_reason,\n          null::int as refills,\n          null::decimal as quantity,\n          date_part('day', f.data_fi_presc - f.data_inici_presc)::int as days_supply,\n          null::text as sig,\n          0::int as route_concept_id,\n          null::varchar(50) as lot_number,\n          null::bigint as provider_id,\n          v.visit_occurrence_id::bigint as visit_occurrence_id,\n          null::int as visit_detail_id,\n          fe.cod_farmacia_atc::text as drug_source_value,\n          (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as drug_source_concept_id,\n          f.des_far_via::text as route_source_value,\n          f.num_unitat::text as dose_unit_source_value,\n          9 as shard_id,\n          f.iomed_row_insert_datetime\n   from base_f_farmacia f\n   inner join base_f_farmacia_especialitat fe on fe.codi = f.cod_especialitat\n   inner join base_f_prestacio_episodi pe on pe.cod_prestacio = f.cod_prestacio\n   inner join visit_occurrence v\n        on pe.cod_episodi = v.visit_source_value\n   inner join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = fe.cod_farmacia_atc\n)\nselect * from drug_exposure",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_drug_exposure\""
        },
        "model.hube.stg_measurement": {
            "raw_sql": "-- stg_measurement\r\n\r\n{{ config (\r\n    materialized='table_unlogged',\r\n    enabled=true\r\n)\r\n}}\r\n\r\n\r\nwith base_f_laboratori as (\r\n\r\n    select * from {{ ref('base_f_laboratori')}}\r\n\r\n),\r\nbase_d_lab_prova as (\r\n\r\n    select * from {{ ref('base_d_lab_prova')}}\r\n\r\n),\r\nbase_f_prestacio_episodi as (\r\n\r\n    select * from {{ ref('base_f_prestacio_episodi') }}\r\n\r\n),\r\nsource_to_standard_vocab_map AS (\r\n\r\n    select * from {{ ref('source_to_standard_vocab_map') }}\r\n    where source_vocabulary_id in = 'SNOMED' -- Change vocabulary ID if necessary\r\n        and target_domain_id = 'Measurement'\r\n        and target_standard_concept = 'S'\r\n        and target_invalid_reason is null\r\n\r\n),\r\nvisit_occurrence as (\r\n\r\n    select * from {{ ref('visit_occurrence') }}\r\n\r\n),\r\nmeasurement as (\r\n\r\n    select\r\n        {{ bigint_id_from_str(\"l.codi\") }}::bigint AS measurement_id,\r\n        v.person_id AS person_id,\r\n        (case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end) AS measurement_concept_id, -- NOT NULL\r\n        l.data::date AS measurement_date,\r\n        l.data::timestamp AS measurement_datetime,\r\n        null::time AS measurement_time,\r\n        44818702::int AS measurement_type_concept_id, -- Lab result\r\n        4172703::int AS operator_concept_id, -- = operator\r\n        {{ handle_measument(\"l.resultat\",1) }}::float AS value_as_number,\r\n        null::int AS value_as_concept_id,\r\n        null::int AS unit_concept_id,\r\n        null::float AS range_low,\r\n        null::float AS range_high,\r\n        null::bigint AS provider_id,\r\n        v.visit_occurrence_id::bigint AS visit_occurrence_id,\r\n        null::bigint AS visit_detail_id,\r\n        lb.cod_lab_prova_sap::text AS measurement_source_value,\r\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int AS measurement_source_concept_id,-- NOT NULL\r\n        {{ handle_measument(\"l.resultat\",2) }}::text AS unit_source_value,\r\n        l.resultat::text AS value_source_value,\r\n        {{ var('shard_id') }} AS shard_id\r\n    from base_f_laboratori l\r\n    inner join base_f_prestacio_episodi pe on pe.cod_prestacio = l.cod_prestacio\r\n    inner join visit_occurrence v\r\n        on pe.cod_episodi = v.visit_source_value\r\n    inner join base_d_lab_prova lb\r\n        on l.cod_lab_prova = lb.codi\r\n    where l.data is not null -- Don't load measurement that do not have date (change variable name if necessary)\r\n\r\n)\r\n\r\nselect * from measurement",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.hube.handle_measument",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_f_laboratori",
                    "model.hube.base_d_lab_prova",
                    "model.hube.base_f_prestacio_episodi",
                    "model.hube.source_to_standard_vocab_map",
                    "model.hube.visit_occurrence"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_measurement"
            ],
            "unique_id": "model.hube.stg_measurement",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_measurement.sql",
            "original_file_path": "models\\derived\\stg_measurement.sql",
            "name": "stg_measurement",
            "alias": "stg_measurement",
            "checksum": {
                "name": "sha256",
                "checksum": "465be220568cd494ae9739f4a1019201a561602b747de8848c0181885f5b1c83"
            },
            "tags": [],
            "refs": [
                [
                    "base_f_laboratori"
                ],
                [
                    "base_d_lab_prova"
                ],
                [
                    "base_f_prestacio_episodi"
                ],
                [
                    "source_to_standard_vocab_map"
                ],
                [
                    "visit_occurrence"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_measurement.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_measurement\n\n\n\n\nwith base_f_laboratori as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_f_laboratori\"\n\n),\nbase_d_lab_prova as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_d_lab_prova\"\n\n),\nbase_f_prestacio_episodi as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_f_prestacio_episodi\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    select * from \"hube\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    where source_vocabulary_id in = 'SNOMED' -- Change vocabulary ID if necessary\n        and target_domain_id = 'Measurement'\n        and target_standard_concept = 'S'\n        and target_invalid_reason is null\n\n),\nvisit_occurrence as (\n\n    select * from \"hube\".\"cdm\".\"visit_occurrence\"\n\n),\nmeasurement as (\n\n    select\n        \n    abs(('x' || substr(md5(l.codi), 1, 16))::bit(64)::bigint)\n::bigint AS measurement_id,\n        v.person_id AS person_id,\n        (case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end) AS measurement_concept_id, -- NOT NULL\n        l.data::date AS measurement_date,\n        l.data::timestamp AS measurement_datetime,\n        null::time AS measurement_time,\n        44818702::int AS measurement_type_concept_id, -- Lab result\n        4172703::int AS operator_concept_id, -- = operator\n        \n      SPLIT_PART(trim(regexp_matches(l.resultat::text, '(\\d+\\.?\\d*)\\s([a-z]*[\\/,\\*]?[a-z]*)')::text,'{}'),',', 1::int)\n::float AS value_as_number,\n        null::int AS value_as_concept_id,\n        null::int AS unit_concept_id,\n        null::float AS range_low,\n        null::float AS range_high,\n        null::bigint AS provider_id,\n        v.visit_occurrence_id::bigint AS visit_occurrence_id,\n        null::bigint AS visit_detail_id,\n        lb.cod_lab_prova_sap::text AS measurement_source_value,\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int AS measurement_source_concept_id,-- NOT NULL\n        \n      SPLIT_PART(trim(regexp_matches(l.resultat::text, '(\\d+\\.?\\d*)\\s([a-z]*[\\/,\\*]?[a-z]*)')::text,'{}'),',', 2::int)\n::text AS unit_source_value,\n        l.resultat::text AS value_source_value,\n        9 AS shard_id\n    from base_f_laboratori l\n    inner join base_f_prestacio_episodi pe on pe.cod_prestacio = l.cod_prestacio\n    inner join visit_occurrence v\n        on pe.cod_episodi = v.visit_source_value\n    inner join base_d_lab_prova lb\n        on l.cod_lab_prova = lb.codi\n    where l.data is not null -- Don't load measurement that do not have date (change variable name if necessary)\n\n)\n\nselect * from measurement",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_measurement\""
        },
        "model.hube.stg_person": {
            "raw_sql": "-- stg_person\r\n\r\n{{ config(\r\n    materialized='table_unlogged',\r\n\tenabled=true\r\n)\r\n}}\r\n\r\nwith base_d_pacient as (\r\n\r\n    select * from {{ ref('base_d_pacient') }}\r\n\r\n),\r\nperson as (\r\n    select\r\n        {{ bigint_id_from_str('cod_pacient') }} AS person_id,\r\n        {{ codigo_sexo_to_gender_concept_id('cod_sexe') }} AS gender_concept_id,\r\n        date_part('year', data_naixement::date)::int AS year_of_birth,\r\n        date_part('month', data_naixement::date)::int AS month_of_birth,\r\n        date_part('day', data_naixement::date)::int AS day_of_birth,\r\n        data_naixement::timestamp AS birth_datetime,\r\n        data_mort::timestamp AS death_datetime,\r\n        0::int AS race_concept_id,\r\n        0::int AS ethnicity_concept_id,\r\n        NULL::int AS location_id,\r\n        NULL::int AS provider_id,\r\n        NULL::int AS care_site_id,\r\n        cod_pacient::varchar(50) AS person_source_value,\r\n        cod_sexe::varchar(50) AS gender_source_value,\r\n        {{ codigo_sexo_to_gender_concept_id('cod_sexe') }} AS gender_source_concept_id,\r\n        NULL::varchar(50) AS race_source_value,\r\n        0::int AS race_source_concept_id,\r\n        NULL::varchar(50) AS ethnicity_source_value,\r\n        0::int AS ethnicity_source_concept_id,\r\n        {{ var('shard_id') }} AS shard_id,\r\n        iomed_row_insert_datetime::timestamp\r\n    from base_d_pacient\r\n    where data_naixement is not null -- Don't load patients who do not have birthdate and sex\r\n\r\n)\r\n\r\nselect * from person",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.hube.codigo_sexo_to_gender_concept_id",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_d_pacient"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_person"
            ],
            "unique_id": "model.hube.stg_person",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_person.sql",
            "original_file_path": "models\\derived\\stg_person.sql",
            "name": "stg_person",
            "alias": "stg_person",
            "checksum": {
                "name": "sha256",
                "checksum": "88da99af1c806911649e7d2f3b55ffad755c42f0cc7add35834ce8eedb3ce77b"
            },
            "tags": [],
            "refs": [
                [
                    "base_d_pacient"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_person.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_person\n\n\n\nwith base_d_pacient as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_d_pacient\"\n\n),\nperson as (\n    select\n        \n    abs(('x' || substr(md5(cod_pacient), 1, 16))::bit(64)::bigint)\n AS person_id,\n        \n(CASE WHEN cod_sexe = 'H' THEN 8507::int -- man\n      WHEN cod_sexe = 'M' THEN 8532::int -- woman\n      WHEN cod_sexe is null THEN 0::int -- no data\n      ELSE 8551::int -- unknown\n      END)\n AS gender_concept_id,\n        date_part('year', data_naixement::date)::int AS year_of_birth,\n        date_part('month', data_naixement::date)::int AS month_of_birth,\n        date_part('day', data_naixement::date)::int AS day_of_birth,\n        data_naixement::timestamp AS birth_datetime,\n        data_mort::timestamp AS death_datetime,\n        0::int AS race_concept_id,\n        0::int AS ethnicity_concept_id,\n        NULL::int AS location_id,\n        NULL::int AS provider_id,\n        NULL::int AS care_site_id,\n        cod_pacient::varchar(50) AS person_source_value,\n        cod_sexe::varchar(50) AS gender_source_value,\n        \n(CASE WHEN cod_sexe = 'H' THEN 8507::int -- man\n      WHEN cod_sexe = 'M' THEN 8532::int -- woman\n      WHEN cod_sexe is null THEN 0::int -- no data\n      ELSE 8551::int -- unknown\n      END)\n AS gender_source_concept_id,\n        NULL::varchar(50) AS race_source_value,\n        0::int AS race_source_concept_id,\n        NULL::varchar(50) AS ethnicity_source_value,\n        0::int AS ethnicity_source_concept_id,\n        9 AS shard_id,\n        iomed_row_insert_datetime::timestamp\n    from base_d_pacient\n    where data_naixement is not null -- Don't load patients who do not have birthdate and sex\n\n)\n\nselect * from person",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_person\""
        },
        "model.hube.stg_procedure_occurrence": {
            "raw_sql": "-- stg_procedure_occurrence\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=true\r\n)\r\n}}\r\n\r\nwith base_f_procediment as (\r\n\r\n    select * from {{ ref('base_f_procediment') }}\r\n\r\n)\r\nvisit_occurrence as (\r\n\r\n    select * from {{ ref('visit_occurrence') }}\r\n\r\n),\r\nsource_to_standard_vocab_map AS (\r\n\r\n    select * from {{ ref('source_to_standard_vocab_map') }}\r\n    where source_vocabulary_id in ('ICD9Proc', 'ICD10PCS')\r\n        and target_domain_id = 'Procedure'\r\n        and target_standard_concept = 'S'\r\n        and target_invalid_reason is null\r\n),\r\nprocedure_occurrence as (\r\n    select\r\n        {{ bigint_id_from_str(\"p.codi\") }}::bigint AS procedure_occurrence_id,\r\n        v.person_id::bigint as person_id,\r\n        (case when srctostdvm.target_concept_id is null then 0 else srctostdvm.target_concept_id end)::int as procedure_concept_id,\r\n        p.data::date as procedure_date,\r\n        p.data::timestamp as procedure_datetime,\r\n        42865906::int as procedure_type_concept_id, -- Condition Procedure\r\n        0::int as modifier_concept_id,\r\n        null::int as quantity,\r\n        null::bigint as provider_id,\r\n        v.visit_occurrence_id::bigint as visit_occurrence_id,\r\n        null::bigint as visit_detail_id,\r\n        p.cod_data_clinica::text as procedure_source_value,\r\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as procedure_source_concept_id,\r\n        null::text as modifier_source_value,\r\n        {{ var('shard_id') }} as shard_id,\r\n        p.iomed_row_insert_datetime::timestamp\r\n    from base_f_procediment p\r\n    inner join visit_occurrence v\r\n        on p.cod_episodi = v.visit_source_value\r\n    inner join source_to_standard_vocab_map srctostdvm\r\n        on srctostdvm.source_code = p.cod_data_clinica\r\n)\r\n\r\nselect *\r\nfrom procedure_occurrence",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_f_procediment",
                    "model.hube.visit_occurrence",
                    "model.hube.source_to_standard_vocab_map"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_procedure_occurrence"
            ],
            "unique_id": "model.hube.stg_procedure_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_procedure_occurrence.sql",
            "original_file_path": "models\\derived\\stg_procedure_occurrence.sql",
            "name": "stg_procedure_occurrence",
            "alias": "stg_procedure_occurrence",
            "checksum": {
                "name": "sha256",
                "checksum": "0ae49dad7f963e2718164634e54e0e4fedb660db9efa2ad8dca23f2fc810d97e"
            },
            "tags": [],
            "refs": [
                [
                    "base_f_procediment"
                ],
                [
                    "visit_occurrence"
                ],
                [
                    "source_to_standard_vocab_map"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_procedure_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_procedure_occurrence\n\n\n\nwith base_f_procediment as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_f_procediment\"\n\n)\nvisit_occurrence as (\n\n    select * from \"hube\".\"cdm\".\"visit_occurrence\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    select * from \"hube\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    where source_vocabulary_id in ('ICD9Proc', 'ICD10PCS')\n        and target_domain_id = 'Procedure'\n        and target_standard_concept = 'S'\n        and target_invalid_reason is null\n),\nprocedure_occurrence as (\n    select\n        \n    abs(('x' || substr(md5(p.codi), 1, 16))::bit(64)::bigint)\n::bigint AS procedure_occurrence_id,\n        v.person_id::bigint as person_id,\n        (case when srctostdvm.target_concept_id is null then 0 else srctostdvm.target_concept_id end)::int as procedure_concept_id,\n        p.data::date as procedure_date,\n        p.data::timestamp as procedure_datetime,\n        42865906::int as procedure_type_concept_id, -- Condition Procedure\n        0::int as modifier_concept_id,\n        null::int as quantity,\n        null::bigint as provider_id,\n        v.visit_occurrence_id::bigint as visit_occurrence_id,\n        null::bigint as visit_detail_id,\n        p.cod_data_clinica::text as procedure_source_value,\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as procedure_source_concept_id,\n        null::text as modifier_source_value,\n        9 as shard_id,\n        p.iomed_row_insert_datetime::timestamp\n    from base_f_procediment p\n    inner join visit_occurrence v\n        on p.cod_episodi = v.visit_source_value\n    inner join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = p.cod_data_clinica\n)\n\nselect *\nfrom procedure_occurrence",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_procedure_occurrence\""
        },
        "model.hube.stg_provider": {
            "raw_sql": "-- stg_provider\r\n\r\n{{ config(\r\n    materialized='table_unlogged',\r\n\tenabled=true\r\n)\r\n}}\r\n\r\nwith base_d_metge as (\r\n\r\n    select * from {{ ref('base_d_metge')}}\r\n\r\n),\r\nprovider as (\r\n    select\r\n        {{ bigint_id_from_str(\"codi\") }} as provider_id,\r\n        descripcio::varchar(255) as provider_name,\r\n        null::varchar(20) as npi,\r\n        null::varchar(20) as dea,\r\n        0::int as specialty_concept_id,\r\n        null::bigint as care_site_id,\r\n        null::int as year_of_birth,\r\n        0::int as gender_concept_id,\r\n        codi::text as provider_source_value,\r\n        null::text as specialty_source_value,\r\n        0::int as specialty_source_concept_id,\r\n        null::text as gender_source_value,\r\n        0::int as gender_source_concept_id,\r\n        {{ var('shard_id') }} as shard_id,\r\n        iomed_row_insert_datetime::timestamp\r\n    from base_d_metge\r\n)\r\n\r\nselect * from provider",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_d_metge"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_provider"
            ],
            "unique_id": "model.hube.stg_provider",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_provider.sql",
            "original_file_path": "models\\derived\\stg_provider.sql",
            "name": "stg_provider",
            "alias": "stg_provider",
            "checksum": {
                "name": "sha256",
                "checksum": "db856011c6fbe0df723d635788d55e9b9482cc8a7eb24d5d60dfb66bcba4f5c2"
            },
            "tags": [],
            "refs": [
                [
                    "base_d_metge"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_provider.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_provider\n\n\n\nwith base_d_metge as (\n\n    select * from \"hube\".\"cdm_dbt\".\"base_d_metge\"\n\n),\nprovider as (\n    select\n        \n    abs(('x' || substr(md5(codi), 1, 16))::bit(64)::bigint)\n as provider_id,\n        descripcio::varchar(255) as provider_name,\n        null::varchar(20) as npi,\n        null::varchar(20) as dea,\n        0::int as specialty_concept_id,\n        null::bigint as care_site_id,\n        null::int as year_of_birth,\n        0::int as gender_concept_id,\n        codi::text as provider_source_value,\n        null::text as specialty_source_value,\n        0::int as specialty_source_concept_id,\n        null::text as gender_source_value,\n        0::int as gender_source_concept_id,\n        9 as shard_id,\n        iomed_row_insert_datetime::timestamp\n    from base_d_metge\n)\n\nselect * from provider",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_provider\""
        },
        "model.hube.stg_visit_detail": {
            "raw_sql": "-- stg_visit_detail\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=true\r\n)\r\n}}\r\n\r\nwith base_sapxml_urg as (\r\n\r\n    select\r\n        episode_id,\r\n        treatment_unit_id,\r\n        doctor_id,\r\n        starting_date as note_date,\r\n        row_number() over(partition by episode_id order by episode_id, starting_date) as n_note,\r\n        'urg' as source_table,\r\n        iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_urg') }}\r\n\r\n),\r\nbase_sapxml_hos as (\r\n\r\n    select\r\n        episode_id,\r\n        treatment_unit_id,\r\n        doctor_id,\r\n        starting_date as note_date,\r\n        row_number() over(partition by episode_id order by episode_id, starting_date) as n_note,\r\n        'hos' as source_table,\r\n        iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_hos') }}\r\n\r\n),\r\nbase_sapxml_cur as (\r\n\r\n    select\r\n        episode_id,\r\n        treatment_unit_id,\r\n        doctor_id,\r\n        curs_clinic_date as note_date,\r\n        row_number() over(partition by episode_id order by episode_id, curs_clinic_date) as n_note,\r\n        'curs' as source_table,\r\n        iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_cur') }}\r\n\r\n),\r\n--base_sapxml_rad as (\r\n--\r\n--    select\r\n--        patient_id,\r\n--        doctor_id,\r\n--        treatment_unit_id,\r\n--        iomed_row_insert_datetime\r\n--    from {{ ref('base_sapxml_rad') }}\r\n--\r\n--),\r\nall_notes as (\r\n\r\n    select * from base_sapxml_urg\r\n    union all\r\n    select * from base_sapxml_hos\r\n    union all\r\n    select * from base_sapxml_cur\r\n\r\n),\r\ncare_site as (\r\n\r\n    select * from {{ ref('care_site') }}\r\n\r\n),\r\nprovider as (\r\n\r\n    select * from {{ ref('provider') }}\r\n\r\n),\r\nvisit_detail as (\r\n\r\nselect\r\n      {{ bigint_id_from_str(\"concat(n.source_table::text, '_', n.episode_id::text, '_', n.n_note::text)\") }}::bigint AS visit_detail_id,\r\n      v.person_id::bigint AS person_id,\r\n      0::int visit_detail_concept_id,\r\n      n.note_date::date AS visit_detail_start_date,\r\n      n.note_date::timestamp AS visit_detail_start_datetime,\r\n      n.note_date::date AS visit_detail_end_date,\r\n      n.note_date::timestamp AS visit_detail_end_datetime,\r\n      0::int AS visit_detail_type_concept_id,\r\n      p.provider_id::int AS provider_id,\r\n      cs.care_site_id::bigint as care_site_id,\r\n      concat(n.source_table::text, '_', n.episode_id::text, '_', n.n_note::text)::varchar(50) AS visit_detail_source_value,\r\n      0::int AS visit_detail_source_concept_id,\r\n      0::int AS admitted_from_concept_id,\r\n      null::int AS admitted_from_source_value,\r\n      null::int AS discharge_to_source_value,\r\n      0::int AS discharge_to_concept_id,\r\n      null::bigint as visit_detail_parent_id,\r\n      null::int AS preceding_visit_detail_id,\r\n      v.visit_occurrence_id::bigint as visit_occurrence_id,\r\n      {{ var('shard_id') }} AS shard_id,\r\n      iomed_row_insert_datetime::timestamp\r\n from all_notes n\r\n inner join visit_occurrence v\r\n    on n.episode_id = v.visit_source_value\r\n left join provider p\r\n    on n.doctor_id = p.provider_source_value -- ver si cuadra con BMD_IOMED_METGE.codi\r\n inner join care_site cs\r\n    on (vs.treatment_unit_id || '@BE') = cs.care_site_source_value  -- ver si cuadra con BMD_IOMED_SERVEI.codi\r\n\r\n)\r\n\r\nselect *\r\nfrom visit_detail",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_sapxml_urg",
                    "model.hube.base_sapxml_hos",
                    "model.hube.base_sapxml_cur",
                    "model.hube.base_sapxml_rad",
                    "model.hube.care_site",
                    "model.hube.provider"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_visit_detail"
            ],
            "unique_id": "model.hube.stg_visit_detail",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_visit_detail.sql",
            "original_file_path": "models\\derived\\stg_visit_detail.sql",
            "name": "stg_visit_detail",
            "alias": "stg_visit_detail",
            "checksum": {
                "name": "sha256",
                "checksum": "129c1657aac8bc6a19a7aa52c99af7991df03928af345c2eb6bc73f0361b5d42"
            },
            "tags": [],
            "refs": [
                [
                    "base_sapxml_urg"
                ],
                [
                    "base_sapxml_hos"
                ],
                [
                    "base_sapxml_cur"
                ],
                [
                    "base_sapxml_rad"
                ],
                [
                    "care_site"
                ],
                [
                    "provider"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_visit_detail.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_visit_detail\n\n\n\nwith base_sapxml_urg as (\n\n    select\n        episode_id,\n        treatment_unit_id,\n        doctor_id,\n        starting_date as note_date,\n        row_number() over(partition by episode_id order by episode_id, starting_date) as n_note,\n        'urg' as source_table,\n        iomed_row_insert_datetime\n    from \"hube\".\"cdm_dbt\".\"base_sapxml_urg\"\n\n),\nbase_sapxml_hos as (\n\n    select\n        episode_id,\n        treatment_unit_id,\n        doctor_id,\n        starting_date as note_date,\n        row_number() over(partition by episode_id order by episode_id, starting_date) as n_note,\n        'hos' as source_table,\n        iomed_row_insert_datetime\n    from \"hube\".\"cdm_dbt\".\"base_sapxml_hos\"\n\n),\nbase_sapxml_cur as (\n\n    select\n        episode_id,\n        treatment_unit_id,\n        doctor_id,\n        curs_clinic_date as note_date,\n        row_number() over(partition by episode_id order by episode_id, curs_clinic_date) as n_note,\n        'curs' as source_table,\n        iomed_row_insert_datetime\n    from \"hube\".\"cdm_dbt\".\"base_sapxml_cur\"\n\n),\n--base_sapxml_rad as (\n--\n--    select\n--        patient_id,\n--        doctor_id,\n--        treatment_unit_id,\n--        iomed_row_insert_datetime\n--    from \"hube\".\"cdm_dbt\".\"base_sapxml_rad\"\n--\n--),\nall_notes as (\n\n    select * from base_sapxml_urg\n    union all\n    select * from base_sapxml_hos\n    union all\n    select * from base_sapxml_cur\n\n),\ncare_site as (\n\n    select * from \"hube\".\"cdm\".\"care_site\"\n\n),\nprovider as (\n\n    select * from \"hube\".\"cdm\".\"provider\"\n\n),\nvisit_detail as (\n\nselect\n      \n    abs(('x' || substr(md5(concat(n.source_table::text, '_', n.episode_id::text, '_', n.n_note::text)), 1, 16))::bit(64)::bigint)\n::bigint AS visit_detail_id,\n      v.person_id::bigint AS person_id,\n      0::int visit_detail_concept_id,\n      n.note_date::date AS visit_detail_start_date,\n      n.note_date::timestamp AS visit_detail_start_datetime,\n      n.note_date::date AS visit_detail_end_date,\n      n.note_date::timestamp AS visit_detail_end_datetime,\n      0::int AS visit_detail_type_concept_id,\n      p.provider_id::int AS provider_id,\n      cs.care_site_id::bigint as care_site_id,\n      concat(n.source_table::text, '_', n.episode_id::text, '_', n.n_note::text)::varchar(50) AS visit_detail_source_value,\n      0::int AS visit_detail_source_concept_id,\n      0::int AS admitted_from_concept_id,\n      null::int AS admitted_from_source_value,\n      null::int AS discharge_to_source_value,\n      0::int AS discharge_to_concept_id,\n      null::bigint as visit_detail_parent_id,\n      null::int AS preceding_visit_detail_id,\n      v.visit_occurrence_id::bigint as visit_occurrence_id,\n      9 AS shard_id,\n      iomed_row_insert_datetime::timestamp\n from all_notes n\n inner join visit_occurrence v\n    on n.episode_id = v.visit_source_value\n left join provider p\n    on n.doctor_id = p.provider_source_value -- ver si cuadra con BMD_IOMED_METGE.codi\n inner join care_site cs\n    on (vs.treatment_unit_id || '@BE') = cs.care_site_source_value  -- ver si cuadra con BMD_IOMED_SERVEI.codi\n\n)\n\nselect *\nfrom visit_detail",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_visit_detail\""
        },
        "model.hube.stg_visit_occurrence": {
            "raw_sql": "-- stg_visit_occurrence\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=true\r\n)\r\n}}\r\n\r\n-- As we don't have a master table of episodes, we calculate start/end dates from other tables.\r\n\r\nwith base_sapxml_cur as (\r\n\r\n    select\r\n        episode_id,\r\n        patient_id,\r\n        curs_clinic_date as note_date,\r\n        iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_cur') }}\r\n\r\n),\r\nbase_sapxml_hos as (\r\n\r\n    select\r\n        episode_id,\r\n        patient_id,\r\n        register_date as note_date,\r\n        iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_hos') }}\r\n\r\n),\r\nbase_sapxml_urg as (\r\n\r\n    select\r\n        episode_id,\r\n        patient_id,\r\n        register_date as note_date,\r\n        iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_urg') }}\r\n\r\n),\r\nall_episodes as (\r\n\r\n    select * from base_sapxml_cur\r\n    union\r\n    select * from base_sapxml_hos\r\n    union\r\n    select * from base_sapxml_urg\r\n\r\n),\r\nepisodes_grouped as (\r\n\r\n    select\r\n        episode_id,\r\n        patient_id,\r\n        min(note_date) as start_date,\r\n        max(note_date) as end_date,\r\n        max(iomed_row_insert_datetime) as iomed_row_insert_datetime\r\n    from all_episodes\r\n    group by episode_id\r\n\r\n),\r\nperson as (\r\n\r\n    select * from {{ ref('person') }}\r\n\r\n),\r\nvisit_occurrence as (\r\n    select {{ bigint_id_from_str(\"pr.episode_id\") }} as visit_occurrence_id,\r\n           p.person_id::bigint as person_id,\r\n           0::int as visit_concept_id,\r\n           44818518::int as visit_type_concept_id, -- Visit derived from EHR record\r\n           pr.start_date::date as visit_start_date,\r\n           pr.start_date::timestamp as visit_start_datetime,\r\n           pr.end_date::date as visit_end_date,\r\n           pr.end_date::timestamp as visit_end_datetime,\r\n           NULL::bigint as provider_id,\r\n           {{ bigint_id_from_str(\"'HUBE'\") }}::bigint as care_site_id,\r\n           pr.episode_id::varchar(50) as visit_source_value,\r\n           0::int as visit_source_concept_id,\r\n           0::int as admitted_from_concept_id,\r\n           NULL::text as admitted_from_source_value,\r\n           NULL::text as discharge_to_source_value,\r\n           0::int as discharge_to_concept_id,\r\n           NULL::int as preceding_visit_occurrence_id,\r\n           {{ var('shard_id') }}::int as shard_id,\r\n           pr.iomed_row_insert_datetime::timestamp\r\n    from episodes_grouped pr\r\n    inner join person p on pr.patient_id::varchar = p.person_source_value\r\n    \r\n)\r\n\r\nselect *\r\nfrom visit_occurrence",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.base_sapxml_cur",
                    "model.hube.base_sapxml_hos",
                    "model.hube.base_sapxml_urg",
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_visit_occurrence"
            ],
            "unique_id": "model.hube.stg_visit_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_visit_occurrence.sql",
            "original_file_path": "models\\derived\\stg_visit_occurrence.sql",
            "name": "stg_visit_occurrence",
            "alias": "stg_visit_occurrence",
            "checksum": {
                "name": "sha256",
                "checksum": "0538aeddb2eea30339741a853fe0d61df4b9582d2b2f1da36a253a8f9d400f71"
            },
            "tags": [],
            "refs": [
                [
                    "base_sapxml_cur"
                ],
                [
                    "base_sapxml_hos"
                ],
                [
                    "base_sapxml_urg"
                ],
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\stg_visit_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- stg_visit_occurrence\n\n\n\n-- As we don't have a master table of episodes, we calculate start/end dates from other tables.\n\nwith base_sapxml_cur as (\n\n    select\n        episode_id,\n        patient_id,\n        curs_clinic_date as note_date,\n        iomed_row_insert_datetime\n    from \"hube\".\"cdm_dbt\".\"base_sapxml_cur\"\n\n),\nbase_sapxml_hos as (\n\n    select\n        episode_id,\n        patient_id,\n        register_date as note_date,\n        iomed_row_insert_datetime\n    from \"hube\".\"cdm_dbt\".\"base_sapxml_hos\"\n\n),\nbase_sapxml_urg as (\n\n    select\n        episode_id,\n        patient_id,\n        register_date as note_date,\n        iomed_row_insert_datetime\n    from \"hube\".\"cdm_dbt\".\"base_sapxml_urg\"\n\n),\nall_episodes as (\n\n    select * from base_sapxml_cur\n    union\n    select * from base_sapxml_hos\n    union\n    select * from base_sapxml_urg\n\n),\nepisodes_grouped as (\n\n    select\n        episode_id,\n        patient_id,\n        min(note_date) as start_date,\n        max(note_date) as end_date,\n        max(iomed_row_insert_datetime) as iomed_row_insert_datetime\n    from all_episodes\n    group by episode_id\n\n),\nperson as (\n\n    select * from \"hube\".\"cdm\".\"person\"\n\n),\nvisit_occurrence as (\n    select \n    abs(('x' || substr(md5(pr.episode_id), 1, 16))::bit(64)::bigint)\n as visit_occurrence_id,\n           p.person_id::bigint as person_id,\n           0::int as visit_concept_id,\n           44818518::int as visit_type_concept_id, -- Visit derived from EHR record\n           pr.start_date::date as visit_start_date,\n           pr.start_date::timestamp as visit_start_datetime,\n           pr.end_date::date as visit_end_date,\n           pr.end_date::timestamp as visit_end_datetime,\n           NULL::bigint as provider_id,\n           \n    abs(('x' || substr(md5('HUBE'), 1, 16))::bit(64)::bigint)\n::bigint as care_site_id,\n           pr.episode_id::varchar(50) as visit_source_value,\n           0::int as visit_source_concept_id,\n           0::int as admitted_from_concept_id,\n           NULL::text as admitted_from_source_value,\n           NULL::text as discharge_to_source_value,\n           0::int as discharge_to_concept_id,\n           NULL::int as preceding_visit_occurrence_id,\n           9::int as shard_id,\n           pr.iomed_row_insert_datetime::timestamp\n    from episodes_grouped pr\n    inner join person p on pr.patient_id::varchar = p.person_source_value\n    \n)\n\nselect *\nfrom visit_occurrence",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"stg_visit_occurrence\""
        },
        "model.hube.base_d_cataleg_clinic": {
            "raw_sql": "-- base_d_cataleg_clinic\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_cataleg_clinic')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_cataleg_clinic"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_cataleg_clinic"
            ],
            "unique_id": "model.hube.base_d_cataleg_clinic",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_cataleg_clinic.sql",
            "original_file_path": "models\\derived\\base\\base_d_cataleg_clinic.sql",
            "name": "base_d_cataleg_clinic",
            "alias": "base_d_cataleg_clinic",
            "checksum": {
                "name": "sha256",
                "checksum": "d76ce1c0bb14fa2c2dbd6b1d79a2198bdd399e657d1cd131114493b3220eff74"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_cataleg_clinic"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_cataleg_clinic.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_cataleg_clinic\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_cataleg_clinic\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_cataleg_clinic\""
        },
        "model.hube.base_d_far_especialitat": {
            "raw_sql": "-- base_d_far_especialitat\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_far_especialitat')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_far_especialitat"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_far_especialitat"
            ],
            "unique_id": "model.hube.base_d_far_especialitat",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_far_especialitat.sql",
            "original_file_path": "models\\derived\\base\\base_d_far_especialitat.sql",
            "name": "base_d_far_especialitat",
            "alias": "base_d_far_especialitat",
            "checksum": {
                "name": "sha256",
                "checksum": "5694e173a9509c3f70f88792f08e8683c47adab6a84c6c2548ff7ff0dc1f7d8d"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_far_especialitat"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_far_especialitat.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_far_especialitat\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_far_especialitat\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_far_especialitat\""
        },
        "model.hube.base_d_lab_prova": {
            "raw_sql": "-- base_d_lab_prova\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_lab_prova')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_lab_prova"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_lab_prova"
            ],
            "unique_id": "model.hube.base_d_lab_prova",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_lab_prova.sql",
            "original_file_path": "models\\derived\\base\\base_d_lab_prova.sql",
            "name": "base_d_lab_prova",
            "alias": "base_d_lab_prova",
            "checksum": {
                "name": "sha256",
                "checksum": "bdf8ee25fb29d76ab540d5e32f08eb64c12bbc9ba880680c2aef06b9676b8a0c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_lab_prova"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_lab_prova.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_lab_prova\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_lab_prova\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_lab_prova\""
        },
        "model.hube.base_d_metge": {
            "raw_sql": "-- base_metge\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_metge')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_metge"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_metge"
            ],
            "unique_id": "model.hube.base_d_metge",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_metge.sql",
            "original_file_path": "models\\derived\\base\\base_d_metge.sql",
            "name": "base_d_metge",
            "alias": "base_d_metge",
            "checksum": {
                "name": "sha256",
                "checksum": "d6667a5a6f45a5fe683ee21b6d3a8fabb82a45501103c541454a5e3763ddf10f"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_metge"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_metge.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_metge\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_metge\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_metge\""
        },
        "model.hube.base_d_pacient": {
            "raw_sql": "-- base_d_pacient\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect  cod_pacient,\r\n        data_naixement, \r\n        data_mort,\r\n        upper(cod_sexe),\r\n        iomed_row_insert_datetime\r\nfrom {{ source('raw','bmd_iomed_pacient')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_pacient"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_pacient"
            ],
            "unique_id": "model.hube.base_d_pacient",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_pacient.sql",
            "original_file_path": "models\\derived\\base\\base_d_pacient.sql",
            "name": "base_d_pacient",
            "alias": "base_d_pacient",
            "checksum": {
                "name": "sha256",
                "checksum": "92966a11b9a18ea9b389fe66f4750f8bbb1dd55fb2dd36cca98309f0169a8e28"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_pacient"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_pacient.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_pacient\n        \n\n        \n        \n        \nselect  cod_pacient,\n        data_naixement, \n        data_mort,\n        upper(cod_sexe),\n        iomed_row_insert_datetime\nfrom \"hube\".\"raw\".\"bmd_iomed_pacient\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_pacient\""
        },
        "model.hube.base_d_prestacio_mestre": {
            "raw_sql": "-- base_d_prestacio_mestre\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_prestacio_mestre')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_prestacio_mestre"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_prestacio_mestre"
            ],
            "unique_id": "model.hube.base_d_prestacio_mestre",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_prestacio_mestre.sql",
            "original_file_path": "models\\derived\\base\\base_d_prestacio_mestre.sql",
            "name": "base_d_prestacio_mestre",
            "alias": "base_d_prestacio_mestre",
            "checksum": {
                "name": "sha256",
                "checksum": "ddcae53af436ae3ae946331118c06b179d55e03ca5ab801af94fdf1db21a22c7"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_prestacio_mestre"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_prestacio_mestre.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_prestacio_mestre\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_prestacio_mestre\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_prestacio_mestre\""
        },
        "model.hube.base_d_servei": {
            "raw_sql": "-- base_d_servei\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_servei')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_servei"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_servei"
            ],
            "unique_id": "model.hube.base_d_servei",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_servei.sql",
            "original_file_path": "models\\derived\\base\\base_d_servei.sql",
            "name": "base_d_servei",
            "alias": "base_d_servei",
            "checksum": {
                "name": "sha256",
                "checksum": "a3867b70baa7f80bd33fb3755843eee9facae7945150d5a54605cfd6e2a1b38f"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_servei"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_servei.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_servei\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_servei\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_servei\""
        },
        "model.hube.base_d_sex": {
            "raw_sql": "-- base_d_sexe\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmd_iomed_sexe')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmd_iomed_sexe"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_d_sex"
            ],
            "unique_id": "model.hube.base_d_sex",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_d_sex.sql",
            "original_file_path": "models\\derived\\base\\base_d_sex.sql",
            "name": "base_d_sex",
            "alias": "base_d_sex",
            "checksum": {
                "name": "sha256",
                "checksum": "527e8ec3d12b9dabb46178496631036d86ec472f70d48dc2579798923d1411e9"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmd_iomed_sexe"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_d_sex.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_d_sexe\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmd_iomed_sexe\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_d_sex\""
        },
        "model.hube.base_f_diagnostic": {
            "raw_sql": "-- base_f_diagnostic\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\nselect *\r\nfrom {{ source('raw','bmf_iomed_diagnostic')}}\r\norder by cod_episodi, data",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmf_iomed_diagnostic"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_f_diagnostic"
            ],
            "unique_id": "model.hube.base_f_diagnostic",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_f_diagnostic.sql",
            "original_file_path": "models\\derived\\base\\base_f_diagnostic.sql",
            "name": "base_f_diagnostic",
            "alias": "base_f_diagnostic",
            "checksum": {
                "name": "sha256",
                "checksum": "956ab77a9b555ad3f32729d9b34bcbca47ff610ea4c3e98ad8a8d047466203ce"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmf_iomed_diagnostic"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_f_diagnostic.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_f_diagnostic\n        \n\n        \nselect *\nfrom \"hube\".\"raw\".\"bmf_iomed_diagnostic\"\norder by cod_episodi, data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_f_diagnostic\""
        },
        "model.hube.base_f_farmacia": {
            "raw_sql": "-- base_f_farmacia\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmf_iomed_farmacia')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmf_iomed_farmacia"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_f_farmacia"
            ],
            "unique_id": "model.hube.base_f_farmacia",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_f_farmacia.sql",
            "original_file_path": "models\\derived\\base\\base_f_farmacia.sql",
            "name": "base_f_farmacia",
            "alias": "base_f_farmacia",
            "checksum": {
                "name": "sha256",
                "checksum": "0975976713196dcc91f131cb793651f2c86ae5d96a6bca3a20ff029d0aec0fa4"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmf_iomed_farmacia"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_f_farmacia.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_f_farmacia\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmf_iomed_farmacia\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_f_farmacia\""
        },
        "model.hube.base_f_laboratori": {
            "raw_sql": "-- base_f_laboratori\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmf_iomed_laboratori')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmf_iomed_laboratori"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_f_laboratori"
            ],
            "unique_id": "model.hube.base_f_laboratori",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_f_laboratori.sql",
            "original_file_path": "models\\derived\\base\\base_f_laboratori.sql",
            "name": "base_f_laboratori",
            "alias": "base_f_laboratori",
            "checksum": {
                "name": "sha256",
                "checksum": "1c78ab9d0efce8408cdb9661d8493a441296d5fd1f05ceec90aa40fb28f0f962"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmf_iomed_laboratori"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_f_laboratori.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_f_laboratori\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmf_iomed_laboratori\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_f_laboratori\""
        },
        "model.hube.base_f_prestacio": {
            "raw_sql": "-- base_f_prestacio\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmf_iomed_prestacio')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmf_iomed_prestacio"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_f_prestacio"
            ],
            "unique_id": "model.hube.base_f_prestacio",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_f_prestacio.sql",
            "original_file_path": "models\\derived\\base\\base_f_prestacio.sql",
            "name": "base_f_prestacio",
            "alias": "base_f_prestacio",
            "checksum": {
                "name": "sha256",
                "checksum": "6c84d197b943ef6530dfa8656cfaa2689040366935e86038781b4d935d754da4"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmf_iomed_prestacio"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_f_prestacio.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_f_prestacio\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmf_iomed_prestacio\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_f_prestacio\""
        },
        "model.hube.base_f_prestacio_episodi": {
            "raw_sql": "-- base_f_prestacio_episodi\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect *\r\nfrom {{ source('raw','bmf_iomed_prestacio_episodi')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmf_iomed_prestacio_episodi"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_f_prestacio_episodi"
            ],
            "unique_id": "model.hube.base_f_prestacio_episodi",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_f_prestacio_episodi.sql",
            "original_file_path": "models\\derived\\base\\base_f_prestacio_episodi.sql",
            "name": "base_f_prestacio_episodi",
            "alias": "base_f_prestacio_episodi",
            "checksum": {
                "name": "sha256",
                "checksum": "4dfd4faf48cc00ae0af56e825f5c3218939c42588ed284af810934e3faa70a24"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmf_iomed_prestacio_episodi"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_f_prestacio_episodi.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_f_prestacio_episodi\n        \n\n        \n        \n        \nselect *\nfrom \"hube\".\"raw\".\"bmf_iomed_prestacio_episodi\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_f_prestacio_episodi\""
        },
        "model.hube.base_f_procediment": {
            "raw_sql": "-- base_f_procediment\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom {{ source('raw','bmf_iomed_procediment')}}\r\norder by cod_episodi, data",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bmf_iomed_procediment"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_f_procediment"
            ],
            "unique_id": "model.hube.base_f_procediment",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_f_procediment.sql",
            "original_file_path": "models\\derived\\base\\base_f_procediment.sql",
            "name": "base_f_procediment",
            "alias": "base_f_procediment",
            "checksum": {
                "name": "sha256",
                "checksum": "8f4249b64b1ddb75bff64fa4aca5a4438830089bc5d8acc22e871e454e4869d5"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bmf_iomed_procediment"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_f_procediment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_f_procediment\n        \n\n\nselect *\nfrom \"hube\".\"raw\".\"bmf_iomed_procediment\"\norder by cod_episodi, data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_f_procediment\""
        },
        "model.hube.base_sapxml_cur": {
            "raw_sql": "-- base_sapxml_cur\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\nselect\r\n    einri as health_center,\r\n    patnr as patient_id,\r\n    gbdat as birth_date,\r\n    gschl as gender,\r\n    falnr as episode_id,\r\n    fatyp as curs_clinic_type,\r\n    orgfa as treatment_unit_id,\r\n    orgna as treatment_unit_descripcion,\r\n    metge as doctor_id,\r\n    zdat_curs as curs_clinic_date,\r\n    ztxt_curs as curs_clinic_text,\r\n    iomed_row_insert_datetime\r\nfrom {{ source('raw','bc_iomed_sapxml_cur')}}\r\norder by episode_id, curs_clinic_date",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bc_iomed_sapxml_cur"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_sapxml_cur"
            ],
            "unique_id": "model.hube.base_sapxml_cur",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_sapxml_cur.sql",
            "original_file_path": "models\\derived\\base\\base_sapxml_cur.sql",
            "name": "base_sapxml_cur",
            "alias": "base_sapxml_cur",
            "checksum": {
                "name": "sha256",
                "checksum": "6dbdec1c8fd14fd4263cf84cac209d2ca66a947411bc4c720120b8fd46756070"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bc_iomed_sapxml_cur"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_sapxml_cur.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_sapxml_cur\n        \n\n        \nselect\n    einri as health_center,\n    patnr as patient_id,\n    gbdat as birth_date,\n    gschl as gender,\n    falnr as episode_id,\n    fatyp as curs_clinic_type,\n    orgfa as treatment_unit_id,\n    orgna as treatment_unit_descripcion,\n    metge as doctor_id,\n    zdat_curs as curs_clinic_date,\n    ztxt_curs as curs_clinic_text,\n    iomed_row_insert_datetime\nfrom \"hube\".\"raw\".\"bc_iomed_sapxml_cur\"\norder by episode_id, curs_clinic_date",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_sapxml_cur\""
        },
        "model.hube.base_sapxml_hos": {
            "raw_sql": "-- base_sapxml_hos\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\n        \r\n        \r\nselect \r\n    einri as health_center,\r\n    doknr as document_id,\r\n    erdat as register_date,\r\n    dokvr as document_version,\r\n    patnr as patient_id,\r\n    gbdat as birth_date,\r\n    gschl as gender,\r\n    dtid  as document_type_id,\r\n    falnr as episode_id,\r\n    begdt as starting_date,\r\n    enddt as ending_date,\r\n    orgfa as treatment_unit_id,\r\n    orgna as treatment_unit_descripcion,\r\n    metge as doctor_id,\r\n    zmalaltact as current_illness,\r\n    zexplorfis as exploracio_fisica_text,\r\n    zexplocomp as exploracio_complementaria_text,\r\n    zevolclini as evolucio_clinica_text,\r\n    iomed_row_insert_datetime\r\nfrom {{ source('raw','bc_iomed_sapxml_hos')}}\r\norder by episode_id, starting_date",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bc_iomed_sapxml_hos"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_sapxml_hos"
            ],
            "unique_id": "model.hube.base_sapxml_hos",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_sapxml_hos.sql",
            "original_file_path": "models\\derived\\base\\base_sapxml_hos.sql",
            "name": "base_sapxml_hos",
            "alias": "base_sapxml_hos",
            "checksum": {
                "name": "sha256",
                "checksum": "b530b0c227ac8632752a63f91bd1fb4bb860d459cbbf2ce8ed63c120569ce2c5"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bc_iomed_sapxml_hos"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_sapxml_hos.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_sapxml_hos\n        \n\n        \n        \n        \nselect \n    einri as health_center,\n    doknr as document_id,\n    erdat as register_date,\n    dokvr as document_version,\n    patnr as patient_id,\n    gbdat as birth_date,\n    gschl as gender,\n    dtid  as document_type_id,\n    falnr as episode_id,\n    begdt as starting_date,\n    enddt as ending_date,\n    orgfa as treatment_unit_id,\n    orgna as treatment_unit_descripcion,\n    metge as doctor_id,\n    zmalaltact as current_illness,\n    zexplorfis as exploracio_fisica_text,\n    zexplocomp as exploracio_complementaria_text,\n    zevolclini as evolucio_clinica_text,\n    iomed_row_insert_datetime\nfrom \"hube\".\"raw\".\"bc_iomed_sapxml_hos\"\norder by episode_id, starting_date",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_sapxml_hos\""
        },
        "model.hube.base_sapxml_rad": {
            "raw_sql": "-- base_sapxml_rad\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n\r\n\r\nselect\r\n    einri as health_center,\r\n    {{ extract_date_from_str(\"ztxt_rad\") }} as register_date\r\n    patnr as patient_id,\r\n    gbdat as birth_date,\r\n    gschl as gender,\r\n    orgfa as treatment_unit_id,\r\n    orgna as treatment_unit_descripcion,\r\n    metge as doctor_id,\r\n    ztxt_rad as report_content_text,\r\n    iomed_row_insert_datetime\r\nfrom {{ source('raw','bc_iomed_sapxml_rad')}}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.extract_date_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bc_iomed_sapxml_rad"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_sapxml_rad"
            ],
            "unique_id": "model.hube.base_sapxml_rad",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_sapxml_rad.sql",
            "original_file_path": "models\\derived\\base\\base_sapxml_rad.sql",
            "name": "base_sapxml_rad",
            "alias": "base_sapxml_rad",
            "checksum": {
                "name": "sha256",
                "checksum": "f8cf16054a9d3172ab14e4e21b39edc686079e6fca0c4c6069ef617e7b8e21bd"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bc_iomed_sapxml_rad"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_sapxml_rad.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_sapxml_rad\n        \n\n\n\nselect\n    einri as health_center,\n    \n      to_date(trim(regexp_matches(ztxt_rad, '\\((3[01]|[12][0-9]|0?[1-9])\\.(1[012]|0?[1-9])\\.((?:19|20)\\d{2})\\)')::text,'{}'), 'DD.MM.YYYY')\n as register_date\n    patnr as patient_id,\n    gbdat as birth_date,\n    gschl as gender,\n    orgfa as treatment_unit_id,\n    orgna as treatment_unit_descripcion,\n    metge as doctor_id,\n    ztxt_rad as report_content_text,\n    iomed_row_insert_datetime\nfrom \"hube\".\"raw\".\"bc_iomed_sapxml_rad\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_sapxml_rad\""
        },
        "model.hube.base_sapxml_urg": {
            "raw_sql": "-- base_sapxml_urg\r\n        \r\n{{ config(\r\n    materialized='table_unlogged',\r\n\t  enabled=true\r\n  )\r\n}}\r\n        \r\nselect\r\n    einri as health_center,\r\n    doknr as document_id,\r\n    erdat as register_date,\r\n    dokvr as document_version,\r\n    patnr as patient_id,\r\n    gbdat as birth_date,\r\n    gschl as gender,\r\n    dtid  as document_type_id,\r\n    falnr as episode_id,\r\n    begdt as starting_date,\r\n    enddt as ending_date,\r\n    orgfa as treatment_unit_id,\r\n    orgna as treatment_unit_descripcion,\r\n    metge as doctor_id,\r\n    zantecede  as antecedents_text,\r\n    zmalaltact as current_illness,\r\n    zexplocomp as exploracio_complementaria_text,\r\n    zmotconsul as motiu_consulta_text,\r\n    zevolualta as evolucio_alta_text,\r\n    zexplorfis as exploracio_fisica_text,\r\n    iomed_row_insert_datetime\r\nfrom {{ source('raw','bc_iomed_sapxml_urg')}}\r\norder by episode_id, starting_date",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.raw.bc_iomed_sapxml_urg"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "base",
                "base_sapxml_urg"
            ],
            "unique_id": "model.hube.base_sapxml_urg",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\base\\base_sapxml_urg.sql",
            "original_file_path": "models\\derived\\base\\base_sapxml_urg.sql",
            "name": "base_sapxml_urg",
            "alias": "base_sapxml_urg",
            "checksum": {
                "name": "sha256",
                "checksum": "593ba85cf126494440989fcef906d473b758d4638af91917ae4beeaf43bdc9af"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw",
                    "bc_iomed_sapxml_urg"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\base\\base_sapxml_urg.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": true
            },
            "compiled_sql": "-- base_sapxml_urg\n        \n\n        \nselect\n    einri as health_center,\n    doknr as document_id,\n    erdat as register_date,\n    dokvr as document_version,\n    patnr as patient_id,\n    gbdat as birth_date,\n    gschl as gender,\n    dtid  as document_type_id,\n    falnr as episode_id,\n    begdt as starting_date,\n    enddt as ending_date,\n    orgfa as treatment_unit_id,\n    orgna as treatment_unit_descripcion,\n    metge as doctor_id,\n    zantecede  as antecedents_text,\n    zmalaltact as current_illness,\n    zexplocomp as exploracio_complementaria_text,\n    zmotconsul as motiu_consulta_text,\n    zevolualta as evolucio_alta_text,\n    zexplorfis as exploracio_fisica_text,\n    iomed_row_insert_datetime\nfrom \"hube\".\"raw\".\"bc_iomed_sapxml_urg\"\norder by episode_id, starting_date",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"base_sapxml_urg\""
        },
        "model.hube.source_to_source_vocab_map": {
            "raw_sql": "{{ config(\r\n    enabled = true,\r\n    materialized='table',\r\n    post_hook=[\r\n      \"create index if not exists idx_source_vocab_map_source_code on {{ this }} (source_code);\",\r\n\t  \"create index if not exists idx_source_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);\"\r\n    ]\r\n  )\r\n}}\r\n\r\nWITH CONCEPT AS (\r\n\r\n    SELECT * FROM {{ source('cdm', 'concept') }}\r\n\r\n),\r\nsource_to_concept_map AS (\r\n\r\n    SELECT * FROM {{ source('cdm', 'source_to_concept_map') }}\r\n\r\n)\r\n\r\nSELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.CONCEPT_NAME AS SOURCE_CODE_DESCRIPTION,\r\n                c.vocabulary_id AS SOURCE_VOCABULARY_ID, c.domain_id AS SOURCE_DOMAIN_ID, c.concept_class_id AS SOURCE_CONCEPT_CLASS_ID,\r\n    c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.invalid_reason AS SOURCE_INVALID_REASON,\r\n    c.concept_ID as TARGET_CONCEPT_ID, c.concept_name AS TARGET_CONCEPT_NAME, c.vocabulary_id AS TARGET_VOCABULARY_ID, c.domain_id AS TARGET_DOMAIN_ID,\r\n                c.concept_class_id AS TARGET_CONCEPT_CLASS_ID, c.INVALID_REASON AS TARGET_INVALID_REASON,\r\n    c.STANDARD_CONCEPT AS TARGET_STANDARD_CONCEPT\r\nFROM CONCEPT c\r\nUNION\r\nSELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\r\n                                c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,stcm.INVALID_REASON AS SOURCE_INVALID_REASON,\r\n                                target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\r\n             c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\r\nFROM source_to_concept_map stcm\r\n      LEFT OUTER JOIN CONCEPT c1\r\n             ON c1.concept_id = stcm.source_concept_id\r\n      LEFT OUTER JOIN CONCEPT c2\r\n             ON c2.CONCEPT_ID = stcm.target_concept_id\r\nWHERE stcm.INVALID_REASON IS NULL",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.cdm.concept",
                    "source.hube.cdm.source_to_concept_map"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "create index if not exists idx_source_vocab_map_source_code on {{ this }} (source_code);",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "create index if not exists idx_source_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "mappings",
                "source_to_source_vocab_map"
            ],
            "unique_id": "model.hube.source_to_source_vocab_map",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\mappings\\source_to_source_vocab_map.sql",
            "original_file_path": "models\\derived\\mappings\\source_to_source_vocab_map.sql",
            "name": "source_to_source_vocab_map",
            "alias": "source_to_source_vocab_map",
            "checksum": {
                "name": "sha256",
                "checksum": "f0153d2059b8a51d7969baa3b94ef75e48072ff1501542232cabac969d4ef1ad"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "cdm",
                    "concept"
                ],
                [
                    "cdm",
                    "source_to_concept_map"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\mappings\\source_to_source_vocab_map.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "create index if not exists idx_source_vocab_map_source_code on {{ this }} (source_code);",
                    "create index if not exists idx_source_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);"
                ],
                "schema": "dbt",
                "enabled": true,
                "materialized": "table"
            },
            "compiled_sql": "\n\nWITH CONCEPT AS (\n\n    SELECT * FROM \"hube\".\"cdm\".\"concept\"\n\n),\nsource_to_concept_map AS (\n\n    SELECT * FROM \"hube\".\"cdm\".\"source_to_concept_map\"\n\n)\n\nSELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.CONCEPT_NAME AS SOURCE_CODE_DESCRIPTION,\n                c.vocabulary_id AS SOURCE_VOCABULARY_ID, c.domain_id AS SOURCE_DOMAIN_ID, c.concept_class_id AS SOURCE_CONCEPT_CLASS_ID,\n    c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.invalid_reason AS SOURCE_INVALID_REASON,\n    c.concept_ID as TARGET_CONCEPT_ID, c.concept_name AS TARGET_CONCEPT_NAME, c.vocabulary_id AS TARGET_VOCABULARY_ID, c.domain_id AS TARGET_DOMAIN_ID,\n                c.concept_class_id AS TARGET_CONCEPT_CLASS_ID, c.INVALID_REASON AS TARGET_INVALID_REASON,\n    c.STANDARD_CONCEPT AS TARGET_STANDARD_CONCEPT\nFROM CONCEPT c\nUNION\nSELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,stcm.INVALID_REASON AS SOURCE_INVALID_REASON,\n                                target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n             c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\nFROM source_to_concept_map stcm\n      LEFT OUTER JOIN CONCEPT c1\n             ON c1.concept_id = stcm.source_concept_id\n      LEFT OUTER JOIN CONCEPT c2\n             ON c2.CONCEPT_ID = stcm.target_concept_id\nWHERE stcm.INVALID_REASON IS NULL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"source_to_source_vocab_map\""
        },
        "model.hube.source_to_standard_vocab_map": {
            "raw_sql": "{{ config(\r\n    enabled = true,\r\n    materialized='table',\r\n    post_hook=[\r\n      \"create index if not exists idx_vocab_map_source_code on {{ this }} (source_code);\",\r\n\t  \"create index if not exists idx_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);\"\r\n    ]\r\n  )\r\n}}\r\n\r\nWITH CONCEPT AS (\r\n\r\n    SELECT * FROM {{ source('cdm', 'concept') }}\r\n\r\n),\r\nsource_to_concept_map as (\r\n\r\n    SELECT * FROM {{ source('cdm', 'source_to_concept_map') }}\r\n\r\n),\r\nCONCEPT_RELATIONSHIP AS (\r\n\r\n    SELECT * FROM {{ source('cdm', 'concept_relationship') }}\r\n\r\n),\r\nCTE_VOCAB_MAP AS (\r\n       SELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.concept_name AS SOURCE_CODE_DESCRIPTION, c.vocabulary_id AS SOURCE_VOCABULARY_ID,\r\n                           c.domain_id AS SOURCE_DOMAIN_ID, c.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\r\n                                                   c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.INVALID_REASON AS SOURCE_INVALID_REASON,\r\n                           c1.concept_id AS TARGET_CONCEPT_ID, c1.concept_name AS TARGET_CONCEPT_NAME, c1.VOCABULARY_ID AS TARGET_VOCABULARY_ID, c1.domain_id AS TARGET_DOMAIN_ID, c1.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\r\n                           c1.INVALID_REASON AS TARGET_INVALID_REASON, c1.standard_concept AS TARGET_STANDARD_CONCEPT\r\n       FROM CONCEPT C\r\n             JOIN CONCEPT_RELATIONSHIP CR\r\n                        ON C.CONCEPT_ID = CR.CONCEPT_ID_1\r\n                        AND CR.invalid_reason IS NULL\r\n                        AND lower(cr.relationship_id) = 'maps to'\r\n              JOIN CONCEPT C1\r\n                        ON CR.CONCEPT_ID_2 = C1.CONCEPT_ID\r\n                        AND C1.INVALID_REASON IS NULL\r\n       UNION\r\n       SELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\r\n                                        c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,\r\n                     stcm.INVALID_REASON AS SOURCE_INVALID_REASON,target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\r\n                     c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\r\n       FROM source_to_concept_map stcm\r\n              LEFT OUTER JOIN CONCEPT c1\r\n                     ON c1.concept_id = stcm.source_concept_id\r\n              LEFT OUTER JOIN CONCEPT c2\r\n                     ON c2.CONCEPT_ID = stcm.target_concept_id\r\n       WHERE stcm.INVALID_REASON IS NULL\r\n)\r\nselect * from CTE_VOCAB_MAP",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "source.hube.cdm.concept",
                    "source.hube.cdm.source_to_concept_map",
                    "source.hube.cdm.concept_relationship"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "table",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "create index if not exists idx_vocab_map_source_code on {{ this }} (source_code);",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "create index if not exists idx_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "mappings",
                "source_to_standard_vocab_map"
            ],
            "unique_id": "model.hube.source_to_standard_vocab_map",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\mappings\\source_to_standard_vocab_map.sql",
            "original_file_path": "models\\derived\\mappings\\source_to_standard_vocab_map.sql",
            "name": "source_to_standard_vocab_map",
            "alias": "source_to_standard_vocab_map",
            "checksum": {
                "name": "sha256",
                "checksum": "6374fc05d5efd93a17c3ece5e2e80e32f1b1f27da63acfcabaa4dd7b6c167b5c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "cdm",
                    "concept"
                ],
                [
                    "cdm",
                    "source_to_concept_map"
                ],
                [
                    "cdm",
                    "concept_relationship"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\derived\\mappings\\source_to_standard_vocab_map.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "create index if not exists idx_vocab_map_source_code on {{ this }} (source_code);",
                    "create index if not exists idx_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);"
                ],
                "schema": "dbt",
                "enabled": true,
                "materialized": "table"
            },
            "compiled_sql": "\n\nWITH CONCEPT AS (\n\n    SELECT * FROM \"hube\".\"cdm\".\"concept\"\n\n),\nsource_to_concept_map as (\n\n    SELECT * FROM \"hube\".\"cdm\".\"source_to_concept_map\"\n\n),\nCONCEPT_RELATIONSHIP AS (\n\n    SELECT * FROM \"hube\".\"cdm\".\"concept_relationship\"\n\n),\nCTE_VOCAB_MAP AS (\n       SELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.concept_name AS SOURCE_CODE_DESCRIPTION, c.vocabulary_id AS SOURCE_VOCABULARY_ID,\n                           c.domain_id AS SOURCE_DOMAIN_ID, c.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                                   c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.INVALID_REASON AS SOURCE_INVALID_REASON,\n                           c1.concept_id AS TARGET_CONCEPT_ID, c1.concept_name AS TARGET_CONCEPT_NAME, c1.VOCABULARY_ID AS TARGET_VOCABULARY_ID, c1.domain_id AS TARGET_DOMAIN_ID, c1.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n                           c1.INVALID_REASON AS TARGET_INVALID_REASON, c1.standard_concept AS TARGET_STANDARD_CONCEPT\n       FROM CONCEPT C\n             JOIN CONCEPT_RELATIONSHIP CR\n                        ON C.CONCEPT_ID = CR.CONCEPT_ID_1\n                        AND CR.invalid_reason IS NULL\n                        AND lower(cr.relationship_id) = 'maps to'\n              JOIN CONCEPT C1\n                        ON CR.CONCEPT_ID_2 = C1.CONCEPT_ID\n                        AND C1.INVALID_REASON IS NULL\n       UNION\n       SELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                        c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,\n                     stcm.INVALID_REASON AS SOURCE_INVALID_REASON,target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n                     c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\n       FROM source_to_concept_map stcm\n              LEFT OUTER JOIN CONCEPT c1\n                     ON c1.concept_id = stcm.source_concept_id\n              LEFT OUTER JOIN CONCEPT c2\n                     ON c2.CONCEPT_ID = stcm.target_concept_id\n       WHERE stcm.INVALID_REASON IS NULL\n)\nselect * from CTE_VOCAB_MAP",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_dbt\".\"source_to_standard_vocab_map\""
        },
        "model.hube.care_site": {
            "raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='care_site_id',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom {{ ref('stg_care_site') }}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.stg_care_site"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "care_site_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "care_site"
            ],
            "unique_id": "model.hube.care_site",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\care_site.sql",
            "original_file_path": "models\\iomed\\care_site.sql",
            "name": "care_site",
            "alias": "care_site",
            "checksum": {
                "name": "sha256",
                "checksum": "939730e8c2300f87500f3deeba8545aa88741b86931db1ee9a1ee386a17f144e"
            },
            "tags": [],
            "refs": [
                [
                    "stg_care_site"
                ]
            ],
            "sources": [],
            "description": "The CARE_SITE table contains a list of uniquely identified institutional (physical or organizational) units where healthcare delivery is practiced (offices, wards, hospitals, clinics, etc.).",
            "columns": {
                "care_site_id": {
                    "name": "care_site_id",
                    "description": "A unique identifier for each Care Site.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "care_site_name": {
                    "name": "care_site_name",
                    "description": "The verbatim description or name of the Care Site as in data source",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "place_of_service_concept_id": {
                    "name": "place_of_service_concept_id",
                    "description": "A foreign key that refers to a Place of Service Concept ID in the Standardized Vocabularies.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "location_id": {
                    "name": "location_id",
                    "description": "A foreign key to the geographic Location in the LOCATION table, where the detailed address information is stored.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "care_site_source_value": {
                    "name": "care_site_source_value",
                    "description": "The identifier for the Care Site in the source data, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "place_of_service_source_value": {
                    "name": "place_of_service_source_value",
                    "description": "The source code for the Place of Service as it appears in the source data, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\care_site.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "materialized": "incremental",
                "unique_key": "care_site_id",
                "enabled": true
            },
            "compiled_sql": "\n\nselect *\nfrom \"hube\".\"cdm_dbt\".\"stg_care_site\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"care_site\""
        },
        "model.hube.condition_occurrence": {
            "raw_sql": "{{ config(\r\n    unique_key='condition_occurrence_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith condition_occurrence as (\r\n\r\n    select * from {{ ref('stg_condition_occurrence')}}\r\n\r\n)\r\nselect\r\n    condition_occurrence_id,\r\n    person_id,\r\n    condition_concept_id,\r\n    condition_start_date,\r\n    condition_start_datetime,\r\n    condition_end_date,\r\n    condition_end_datetime,\r\n    condition_type_concept_id,\r\n    condition_status_concept_id,\r\n    stop_reason,\r\n    provider_id,\r\n    visit_occurrence_id,\r\n    visit_detail_id,\r\n    condition_source_value,\r\n    condition_source_concept_id,\r\n    condition_status_source_value,\r\n    shard_id\r\nfrom condition_occurrence\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'condition_occurrence') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_condition_occurrence"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "condition_occurrence_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "condition_occurrence"
            ],
            "unique_id": "model.hube.condition_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\condition_occurrence.sql",
            "original_file_path": "models\\iomed\\condition_occurrence.sql",
            "name": "condition_occurrence",
            "alias": "condition_occurrence",
            "checksum": {
                "name": "sha256",
                "checksum": "6a0f2407ba656b592c02c0197f758f315659ec300e5e90e2c2930d87c1c7ebec"
            },
            "tags": [],
            "refs": [
                [
                    "stg_condition_occurrence"
                ]
            ],
            "sources": [],
            "description": "Conditions are records of a Person suggesting the presence of a disease or medical condition stated as a diagnosis, a sign, or a symptom, which is either observed by a Provider or reported by the patient. Conditions are recorded in different sources and levels of standardization, for example: * Medical claims data include diagnoses coded in Source Vocabularies such as ICD-9-CM that are submitted as part of a reimbursement claim for health services * EHRs may capture Person conditions in the form of diagnosis codes or symptoms",
            "columns": {
                "condition_occurrence_id": {
                    "name": "condition_occurrence_id",
                    "description": "A unique identifier for each Condition Occurrence event.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_id": {
                    "name": "person_id",
                    "description": "A foreign key identifier to the Person who is experiencing the condition. The demographic details of that Person are stored in the PERSON table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_concept_id": {
                    "name": "condition_concept_id",
                    "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies belonging to the ''Condition'' domain.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_start_date": {
                    "name": "condition_start_date",
                    "description": "The date when the instance of the Condition is recorded.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_start_datetime": {
                    "name": "condition_start_datetime",
                    "description": "The date and time when the instance of the Condition is recorded.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_end_date": {
                    "name": "condition_end_date",
                    "description": "The date when the instance of the Condition is considered to have ended.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_end_datetime": {
                    "name": "condition_end_datetime",
                    "description": "The date when the instance of the Condition is considered to have ended.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_type_concept_id": {
                    "name": "condition_type_concept_id",
                    "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the source data from which the Condition was recorded, the level of standardization, and the type of occurrence. These belong to the ''Condition Type'' vocabulary",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_status_concept_id": {
                    "name": "condition_status_concept_id",
                    "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies reflecting the point of care at which the Condition was diagnosed.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "stop_reason": {
                    "name": "stop_reason",
                    "description": "The reason that the Condition was no longer present, as indicated in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the Provider in the PROVIDER table who was responsible for capturing (diagnosing) the Condition.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_occurrence_id": {
                    "name": "visit_occurrence_id",
                    "description": "A foreign key to the visit in the VISIT_OCCURRENCE table during which the Condition was determined (diagnosed).",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_id": {
                    "name": "visit_detail_id",
                    "description": "A foreign key to the visit in the VISIT_DETAIL table during which the Condition was determined (diagnosed).",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_source_value": {
                    "name": "condition_source_value",
                    "description": "The source code for the Condition as it appears in the source data. This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_source_concept_id": {
                    "name": "condition_source_concept_id",
                    "description": "A foreign key to a Condition Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "condition_status_source_value": {
                    "name": "condition_status_source_value",
                    "description": "The source code for the condition status as it appears in the source data.  This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\condition_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "condition_occurrence_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\nwith condition_occurrence as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_condition_occurrence\"\n\n)\nselect\n    condition_occurrence_id,\n    person_id,\n    condition_concept_id,\n    condition_start_date,\n    condition_start_datetime,\n    condition_end_date,\n    condition_end_datetime,\n    condition_type_concept_id,\n    condition_status_concept_id,\n    stop_reason,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    condition_source_value,\n    condition_source_concept_id,\n    condition_status_source_value,\n    shard_id\nfrom condition_occurrence\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'condition_occurrence'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"condition_occurrence\""
        },
        "model.hube.death": {
            "raw_sql": "{{ config(\r\n    unique_key='person_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith death as (\r\n\r\n    select * from {{ ref('stg_death') }}\r\n\r\n)\r\nselect\r\n    person_id,\r\n    death_date,\r\n    death_datetime,\r\n    death_type_concept_id,\r\n    cause_concept_id,\r\n    cause_source_value,\r\n    cause_source_concept_id,\r\n    shard_id\r\nfrom death\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'death') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.hube.stg_death"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "person_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "death"
            ],
            "unique_id": "model.hube.death",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\death.sql",
            "original_file_path": "models\\iomed\\death.sql",
            "name": "death",
            "alias": "death",
            "checksum": {
                "name": "sha256",
                "checksum": "de37eb87dac95c0c3efdb1cf953136a99d484c03e0c1596f27c1dbf78a0ef0d2"
            },
            "tags": [],
            "refs": [
                [
                    "stg_death"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\death.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "person_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\nwith death as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_death\"\n\n)\nselect\n    person_id,\n    death_date,\n    death_datetime,\n    death_type_concept_id,\n    cause_concept_id,\n    cause_source_value,\n    cause_source_concept_id,\n    shard_id\nfrom death\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"death\""
        },
        "model.hube.drug_exposure": {
            "raw_sql": "{{\r\nconfig(\r\n    unique_key='drug_exposure_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith drug_exposure as (\r\n\r\n    select * from {{ ref('stg_drug_exposure')}}\r\n\r\n)\r\nselect\r\n    drug_exposure_id,\r\n    person_id,\r\n    drug_concept_id,\r\n    drug_exposure_start_date,\r\n    drug_exposure_start_datetime,\r\n    drug_exposure_end_date,\r\n    drug_exposure_end_datetime,\r\n    verbatim_end_date,\r\n    drug_type_concept_id,\r\n    stop_reason,\r\n    refills,\r\n    quantity,\r\n    days_supply,\r\n    sig,\r\n    route_concept_id,\r\n    lot_number,\r\n    provider_id,\r\n    visit_occurrence_id,\r\n    visit_detail_id,\r\n    drug_source_value,\r\n    drug_source_concept_id,\r\n    route_source_value,\r\n    dose_unit_source_value,\r\n    shard_id\r\nfrom drug_exposure\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'drug_exposure') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_drug_exposure"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "drug_exposure_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "drug_exposure"
            ],
            "unique_id": "model.hube.drug_exposure",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\drug_exposure.sql",
            "original_file_path": "models\\iomed\\drug_exposure.sql",
            "name": "drug_exposure",
            "alias": "drug_exposure",
            "checksum": {
                "name": "sha256",
                "checksum": "9796a68e2672ee44587cc292f26962ce1459e9183b73f5f4f15b35803c7872f3"
            },
            "tags": [],
            "refs": [
                [
                    "stg_drug_exposure"
                ]
            ],
            "sources": [],
            "description": "The Drug domain captures records about the utilization of a Drug when ingested or otherwise introduced into the body. A Drug is a biochemical substance formulated in such a way that when administered to a Person it will exert a certain physiological effect. Drugs include prescription and over-the-counter medicines, vaccines, and large-molecule biologic therapies. Radiological devices ingested or applied locally do not count as Drugs. Drug Exposure is inferred from clinical events associated with orders, prescriptions written, pharmacy dispensings, procedural administrations, and other patient-reported information, for example: * The Prescription section of an EHR captures prescriptions written by physicians or from electronic ordering systems * The Medication list section of an EHR for both non-prescription products and medications prescribed by other providers * Prescriptions filled at dispensing providers such as pharmacies, and then captured in reimbursement claim systems * Drugs administered as part of a Procedure, such as chemotherapy or vaccines.",
            "columns": {
                "drug_exposure_id": {
                    "name": "drug_exposure_id",
                    "description": "A system-generated unique identifier for each Drug utilization event.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_id": {
                    "name": "person_id",
                    "description": "A foreign key identifier to the Person who is subjected to the Drug. The demographic details of that Person are stored in the PERSON table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_concept_id": {
                    "name": "drug_concept_id",
                    "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies belonging to the ''Drug'' domain.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_exposure_start_date": {
                    "name": "drug_exposure_start_date",
                    "description": "The start date for the current instance of Drug utilization. Valid entries include a start date of a prescription, the date a prescription was filled, or the date on which a Drug administration procedure was recorded.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_exposure_start_datetime": {
                    "name": "drug_exposure_start_datetime",
                    "description": "The start date and time for the current instance of Drug utilization. Valid entries include a start datetime of a prescription, the date and time a prescription was filled, or the date and time on which a Drug administration procedure was recorded.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_exposure_end_date": {
                    "name": "drug_exposure_end_date",
                    "description": "The end date for the current instance of Drug utilization. Depending on different sources, it could be a known or an inferred date and denotes the last day at which the patient was still exposed to Drug.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_exposure_end_datetime": {
                    "name": "drug_exposure_end_datetime",
                    "description": "The end date and time for the current instance of Drug utilization. Depending on different sources, it could be a known or an inferred date and time and denotes the last day at which the patient was still exposed to Drug.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "verbatim_end_date": {
                    "name": "verbatim_end_date",
                    "description": "The known end date of a drug_exposure as provided by the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_type_concept_id": {
                    "name": "drug_type_concept_id",
                    "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of Drug Exposure recorded. It indicates how the Drug Exposure was represented in the source data and belongs to the ''Drug Type'' vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "stop_reason": {
                    "name": "stop_reason",
                    "description": "The reason the Drug was stopped. Reasons include regimen completed, changed, removed, etc.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "refills": {
                    "name": "refills",
                    "description": "The number of refills after the initial prescription. The initial prescription is not counted, values start with null.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "quantity": {
                    "name": "quantity",
                    "description": "The quantity of drug as recorded in the original prescription or dispensing record.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "days_supply": {
                    "name": "days_supply",
                    "description": "The number of days of supply of the medication as prescribed. This reflects the intention of the provider for the length of exposure.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "sig": {
                    "name": "sig",
                    "description": "The directions (''signetur'') on the Drug prescription as recorded in the original prescription (and printed on the container) or dispensing record.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "route_concept_id": {
                    "name": "route_concept_id",
                    "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies reflecting the route of administration and belonging to the ''Route'' domain.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lot_number": {
                    "name": "lot_number",
                    "description": "An identifier assigned to a particular quantity or lot of Drug product from the manufacturer.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the provider in the PROVIDER table who initiated (prescribed or administered) the Drug Exposure.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_occurrence_id": {
                    "name": "visit_occurrence_id",
                    "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table during which the Drug Exposure was initiated.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_id": {
                    "name": "visit_detail_id",
                    "description": "A foreign key to the Visit Detail in the VISIT_DETAIL table during which the Drug Exposure was initiated.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_source_value": {
                    "name": "drug_source_value",
                    "description": "The source code for the Drug as it appears in the source data. This code is mapped to a Standard Drug concept in the Standardized Vocabularies and the original code is, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "drug_source_concept_id": {
                    "name": "drug_source_concept_id",
                    "description": "A foreign key to a Drug Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "route_source_value": {
                    "name": "route_source_value",
                    "description": "The information about the route of administration as detailed in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dose_unit_source_value": {
                    "name": "dose_unit_source_value",
                    "description": "The information about the dose unit as detailed in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\drug_exposure.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "drug_exposure_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\nwith drug_exposure as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_drug_exposure\"\n\n)\nselect\n    drug_exposure_id,\n    person_id,\n    drug_concept_id,\n    drug_exposure_start_date,\n    drug_exposure_start_datetime,\n    drug_exposure_end_date,\n    drug_exposure_end_datetime,\n    verbatim_end_date,\n    drug_type_concept_id,\n    stop_reason,\n    refills,\n    quantity,\n    days_supply,\n    sig,\n    route_concept_id,\n    lot_number,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    drug_source_value,\n    drug_source_concept_id,\n    route_source_value,\n    dose_unit_source_value,\n    shard_id\nfrom drug_exposure\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'drug_exposure'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"drug_exposure\""
        },
        "model.hube.measurement": {
            "raw_sql": "{{\r\nconfig(\r\n    unique_key='measurement_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\n\r\nwith measurement as (\r\n\r\n    select * from {{ ref('stg_measurement')}}\r\n\r\n)\r\nselect\r\n    measurement_id,\r\n    person_id,\r\n    measurement_concept_id,\r\n    measurement_date,\r\n    measurement_datetime,\r\n    measurement_time,\r\n    measurement_type_concept_id,\r\n    operator_concept_id,\r\n    value_as_number,\r\n    value_as_concept_id,\r\n    unit_concept_id,\r\n    range_low,\r\n    range_high,\r\n    provider_id,\r\n    visit_occurrence_id,\r\n    visit_detail_id,\r\n    measurement_source_value,\r\n    measurement_source_concept_id,\r\n    unit_source_value,\r\n    value_source_value,\r\n    shard_id\r\nfrom measurement\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'measurement') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_measurement"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "measurement_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "measurement"
            ],
            "unique_id": "model.hube.measurement",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\measurement.sql",
            "original_file_path": "models\\iomed\\measurement.sql",
            "name": "measurement",
            "alias": "measurement",
            "checksum": {
                "name": "sha256",
                "checksum": "36a64136b25619aa8c9dcca4d1dc80a8cf0e82c7ff2428bc30593af5642d6024"
            },
            "tags": [],
            "refs": [
                [
                    "stg_measurement"
                ]
            ],
            "sources": [],
            "description": "The MEASUREMENT table contains records of Measurement, i.e. structured values (numerical or categorical) obtained through systematic and standardized examination or testing of a Person or Person''s sample. The MEASUREMENT table contains both orders and results of such Measurements as laboratory tests, vital signs, quantitative findings from pathology reports, etc.",
            "columns": {
                "measurement_id": {
                    "name": "measurement_id",
                    "description": "A unique identifier for each Measurement.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_id": {
                    "name": "person_id",
                    "description": "A foreign key identifier to the Person about whom the measurement was recorded. The demographic details of that Person are stored in the PERSON table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_concept_id": {
                    "name": "measurement_concept_id",
                    "description": "A foreign key to the standard measurement concept identifier in the Standardized Vocabularies. These belong to the ''Measurement'' domain, but could overlap with the ''Observation'' domain (see",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_date": {
                    "name": "measurement_date",
                    "description": "The date of the Measurement.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_datetime": {
                    "name": "measurement_datetime",
                    "description": "The date and time of the Measurement. Some database systems don''t have a datatype of time. To accommodate all temporal analyses, datatype datetime can be used (combining measurement_date and measurement_time [forum discussion](http://forums.ohdsi.org/t/date-time-and-datetime-problem-and-the-world-of-hours-and-1day/314))",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_time": {
                    "name": "measurement_time",
                    "description": "The time of the Measurement. This is present for backwards compatibility and will be deprecated in an upcoming version",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_type_concept_id": {
                    "name": "measurement_type_concept_id",
                    "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the provenance from where the Measurement record was recorded. These belong to the ''Meas Type'' vocabulary",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "operator_concept_id": {
                    "name": "operator_concept_id",
                    "description": "A foreign key identifier to the predefined Concept in the Standardized Vocabularies reflecting the mathematical operator that is applied to the value_as_number. Operators are <, <=, =, >=, > and these concepts belong to the ''Meas Value Operator'' domain.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "value_as_number": {
                    "name": "value_as_number",
                    "description": "A Measurement result where the result is expressed as a numeric value.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "value_as_concept_id": {
                    "name": "value_as_concept_id",
                    "description": "A foreign key to a Measurement result represented as a Concept from the Standardized Vocabularies (e.g., positive/negative, present/absent, low/high, etc.). These belong to the ''Meas Value'' domain",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "unit_concept_id": {
                    "name": "unit_concept_id",
                    "description": "A foreign key to a Standard Concept ID of Measurement Units in the Standardized Vocabularies that belong to the ''Unit'' domain.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "range_low": {
                    "name": "range_low",
                    "description": "The lower limit of the normal range of the Measurement result. The lower range is assumed to be of the same unit of measure as the Measurement value.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "range_high": {
                    "name": "range_high",
                    "description": "The upper limit of the normal range of the Measurement. The upper range is assumed to be of the same unit of measure as the Measurement value.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the provider in the PROVIDER table who was responsible for initiating or obtaining the measurement.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_occurrence_id": {
                    "name": "visit_occurrence_id",
                    "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table during which the Measurement was recorded.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_id": {
                    "name": "visit_detail_id",
                    "description": "A foreign key to the Visit Detail in the VISIT_DETAIL table during which the Measurement was recorded.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_source_value": {
                    "name": "measurement_source_value",
                    "description": "The Measurement name as it appears in the source data. This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "measurement_source_concept_id": {
                    "name": "measurement_source_concept_id",
                    "description": "A foreign key to a Concept in the Standard Vocabularies that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "unit_source_value": {
                    "name": "unit_source_value",
                    "description": "The source code for the unit as it appears in the source data. This code is mapped to a standard unit concept in the Standardized Vocabularies and the original code is stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "value_source_value": {
                    "name": "value_source_value",
                    "description": "The source value associated with the content of the value_as_number or value_as_concept_id as stored in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\measurement.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "measurement_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\n\nwith measurement as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_measurement\"\n\n)\nselect\n    measurement_id,\n    person_id,\n    measurement_concept_id,\n    measurement_date,\n    measurement_datetime,\n    measurement_time,\n    measurement_type_concept_id,\n    operator_concept_id,\n    value_as_number,\n    value_as_concept_id,\n    unit_concept_id,\n    range_low,\n    range_high,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    measurement_source_value,\n    measurement_source_concept_id,\n    unit_source_value,\n    value_source_value,\n    shard_id\nfrom measurement\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'measurement'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"measurement\""
        },
        "model.hube.person": {
            "raw_sql": "{{\r\nconfig(\r\n    unique_key='person_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith person as (\r\n\r\n    select * from {{ ref('stg_person')}}\r\n\r\n)\r\nselect\r\n    person_id,\r\n    gender_concept_id,\r\n    year_of_birth,\r\n    month_of_birth,\r\n    day_of_birth,\r\n    birth_datetime,\r\n    death_datetime,\r\n    race_concept_id,\r\n    ethnicity_concept_id,\r\n    location_id,\r\n    provider_id,\r\n    care_site_id,\r\n    person_source_value,\r\n    gender_source_value,\r\n    gender_source_concept_id,\r\n    race_source_value,\r\n    race_source_concept_id,\r\n    ethnicity_source_value,\r\n    ethnicity_source_concept_id,\r\n    shard_id\r\nfrom person\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'person') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "person_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "person"
            ],
            "unique_id": "model.hube.person",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\person.sql",
            "original_file_path": "models\\iomed\\person.sql",
            "name": "person",
            "alias": "person",
            "checksum": {
                "name": "sha256",
                "checksum": "e7437e85be072490bcaa12f45bef7afad0329cfdc5ab5cc67a63ec0015306c8f"
            },
            "tags": [],
            "refs": [
                [
                    "stg_person"
                ]
            ],
            "sources": [],
            "description": "The Person Domain contains records that uniquely identify each patient in the source data who is time at-risk to have clinical observations recorded within the source systems.",
            "columns": {
                "person_id": {
                    "name": "person_id",
                    "description": "A unique identifier for each person.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "gender_concept_id": {
                    "name": "gender_concept_id",
                    "description": "A foreign key that refers to an identifier in the CONCEPT table for the unique gender of the person.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "year_of_birth": {
                    "name": "year_of_birth",
                    "description": "The year of birth of the person. For data sources with date of birth, the year is extracted. For data sources where the year of birth is not available, the approximate year of birth is derived based on any age group categorization available.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "month_of_birth": {
                    "name": "month_of_birth",
                    "description": "The month of birth of the person. For data sources that provide the precise date of birth, the month is extracted and stored in this field.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "day_of_birth": {
                    "name": "day_of_birth",
                    "description": "The day of the month of birth of the person. For data sources that provide the precise date of birth, the day is extracted and stored in this field.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "birth_datetime": {
                    "name": "birth_datetime",
                    "description": "The date and time of birth of the person.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "death_datetime": {
                    "name": "death_datetime",
                    "description": "The date and time of death of the person.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "race_concept_id": {
                    "name": "race_concept_id",
                    "description": "A foreign key that refers to an identifier in the CONCEPT table for the unique race of the person, belonging to the ''Race'' vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "ethnicity_concept_id": {
                    "name": "ethnicity_concept_id",
                    "description": "A foreign key that refers to the standard concept identifier in the Standardized Vocabularies for the ethnicity of the person, belonging to the ''Ethnicity'' vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "location_id": {
                    "name": "location_id",
                    "description": "A foreign key to the place of residency for the person in the location table, where the detailed address information is stored.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the primary care provider the person is seeing in the provider table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "care_site_id": {
                    "name": "care_site_id",
                    "description": "A foreign key to the site of primary care in the care_site table, where the details of the care site are stored.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_source_value": {
                    "name": "person_source_value",
                    "description": "An (encrypted) key derived from the person identifier in the source data. This is necessary when a use case requires a link back to the person data at the source dataset.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "gender_source_value": {
                    "name": "gender_source_value",
                    "description": "The source code for the gender of the person as it appears in the source data. The person\u2019s gender is mapped to a standard gender concept in the Standardized Vocabularies; the original value is stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "gender_source_concept_id": {
                    "name": "gender_source_concept_id",
                    "description": "A foreign key to the gender concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "race_source_value": {
                    "name": "race_source_value",
                    "description": "The source code for the race of the person as it appears in the source data. The person race is mapped to a standard race concept in the Standardized Vocabularies and the original value is stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "race_source_concept_id": {
                    "name": "race_source_concept_id",
                    "description": "A foreign key to the race concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "ethnicity_source_value": {
                    "name": "ethnicity_source_value",
                    "description": "The source code for the ethnicity of the person as it appears in the source data. The person ethnicity is mapped to a standard ethnicity concept in the Standardized Vocabularies and the original code is, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "ethnicity_source_concept_id": {
                    "name": "ethnicity_source_concept_id",
                    "description": "A foreign key to the ethnicity concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\person.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "person_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\nwith person as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_person\"\n\n)\nselect\n    person_id,\n    gender_concept_id,\n    year_of_birth,\n    month_of_birth,\n    day_of_birth,\n    birth_datetime,\n    death_datetime,\n    race_concept_id,\n    ethnicity_concept_id,\n    location_id,\n    provider_id,\n    care_site_id,\n    person_source_value,\n    gender_source_value,\n    gender_source_concept_id,\n    race_source_value,\n    race_source_concept_id,\n    ethnicity_source_value,\n    ethnicity_source_concept_id,\n    shard_id\nfrom person\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'person'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"person\""
        },
        "model.hube.procedure_occurrence": {
            "raw_sql": "{{\r\nconfig(\r\n    unique_key='procedure_occurrence_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith procedure_occurrence as (\r\n\r\n    select * from {{ ref('stg_procedure_occurrence')}}\r\n\r\n)\r\nselect\r\n    procedure_occurrence_id,\r\n    person_id,\r\n    procedure_concept_id,\r\n    procedure_date,\r\n    procedure_datetime,\r\n    procedure_type_concept_id,\r\n    modifier_concept_id,\r\n    quantity,\r\n    provider_id,\r\n    visit_occurrence_id,\r\n    visit_detail_id,\r\n    procedure_source_value,\r\n    procedure_source_concept_id,\r\n    modifier_source_value,\r\n    shard_id\r\nfrom procedure_occurrence\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'procedure_occurrence') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_procedure_occurrence"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "procedure_occurrence_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "procedure_occurrence"
            ],
            "unique_id": "model.hube.procedure_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\procedure_occurrence.sql",
            "original_file_path": "models\\iomed\\procedure_occurrence.sql",
            "name": "procedure_occurrence",
            "alias": "procedure_occurrence",
            "checksum": {
                "name": "sha256",
                "checksum": "a40158a9727d68829b6256d1bd02901f6c3fc5d8926705cf348c422ed59823aa"
            },
            "tags": [],
            "refs": [
                [
                    "stg_procedure_occurrence"
                ]
            ],
            "sources": [],
            "description": "The PROCEDURE_OCCURRENCE table contains records of activities or processes ordered by, or carried out by, a healthcare provider on the patient to have a diagnostic or therapeutic purpose. Procedures are present in various data sources in different forms with varying levels of standardization. For example: * Medical Claims include procedure codes that are submitted as part of a claim for health services rendered, including procedures performed. * Electronic Health Records that capture procedures as orders.",
            "columns": {
                "procedure_occurrence_id": {
                    "name": "procedure_occurrence_id",
                    "description": "A system-generated unique identifier for each Procedure Occurrence.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_id": {
                    "name": "person_id",
                    "description": "A foreign key identifier to the Person who is subjected to the Procedure. The demographic details of that Person are stored in the PERSON table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "procedure_concept_id": {
                    "name": "procedure_concept_id",
                    "description": "A foreign key that refers to a standard procedure Concept identifier in the Standardized Vocabularies.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "procedure_date": {
                    "name": "procedure_date",
                    "description": "The date on which the Procedure was performed.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "procedure_datetime": {
                    "name": "procedure_datetime",
                    "description": "The date and time on which the Procedure was performed.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "procedure_type_concept_id": {
                    "name": "procedure_type_concept_id",
                    "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of source data from which the procedure record is derived, belonging to the ''Procedure Type'' vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "modifier_concept_id": {
                    "name": "modifier_concept_id",
                    "description": "A foreign key to a Standard Concept identifier for a modifier to the Procedure (e.g. bilateral). These concepts are typically distinguished by ''Modifier'' concept classes (e.g., ''CPT4 Modifier'' as part of the ''CPT4'' vocabulary).",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "quantity": {
                    "name": "quantity",
                    "description": "The quantity of procedures ordered or administered.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the provider in the PROVIDER table who was responsible for carrying out the procedure.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_occurrence_id": {
                    "name": "visit_occurrence_id",
                    "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table during which the Procedure was carried out.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_id": {
                    "name": "visit_detail_id",
                    "description": "A foreign key to the Visit Detail in the VISIT_DETAIL table during which the Procedure was carried out.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "procedure_source_value": {
                    "name": "procedure_source_value",
                    "description": "The source code for the Procedure as it appears in the source data. This code is mapped to a standard procedure Concept in the Standardized Vocabularies and the original code is, stored here for reference. Procedure source codes are typically ICD-9-Proc, CPT-4, HCPCS or OPCS-4 codes.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "procedure_source_concept_id": {
                    "name": "procedure_source_concept_id",
                    "description": "A foreign key to a Procedure Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "modifier_source_value": {
                    "name": "modifier_source_value",
                    "description": "The source code for the qualifier as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\procedure_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "procedure_occurrence_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\nwith procedure_occurrence as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_procedure_occurrence\"\n\n)\nselect\n    procedure_occurrence_id,\n    person_id,\n    procedure_concept_id,\n    procedure_date,\n    procedure_datetime,\n    procedure_type_concept_id,\n    modifier_concept_id,\n    quantity,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    procedure_source_value,\n    procedure_source_concept_id,\n    modifier_source_value,\n    shard_id\nfrom procedure_occurrence\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'procedure_occurrence'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"procedure_occurrence\""
        },
        "model.hube.provider": {
            "raw_sql": "{{\r\nconfig(\r\n    unique_key='provider_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\nwith provider as (\r\n\r\n    select * from {{ ref('stg_provider')}}\r\n\r\n)\r\nselect\r\n    provider_id,\r\n    provider_name,\r\n    npi,\r\n    dea,\r\n    specialty_concept_id,\r\n    care_site_id,\r\n    year_of_birth,\r\n    gender_concept_id,\r\n    provider_source_value,\r\n    specialty_source_value,\r\n    specialty_source_concept_id,\r\n    gender_source_value,\r\n    gender_source_concept_id,\r\n    shard_id\r\nfrom provider\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'person') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_provider"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "provider_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "provider"
            ],
            "unique_id": "model.hube.provider",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\provider.sql",
            "original_file_path": "models\\iomed\\provider.sql",
            "name": "provider",
            "alias": "provider",
            "checksum": {
                "name": "sha256",
                "checksum": "650f64c3c185fe10ab76fe06a36db38ccfc23698627e9de76e92deaa2bef074d"
            },
            "tags": [],
            "refs": [
                [
                    "stg_provider"
                ]
            ],
            "sources": [],
            "description": "The PROVIDER table contains a list of uniquely identified healthcare providers. These are individuals providing hands-on healthcare to patients, such as physicians, nurses, midwives, physical therapists etc.",
            "columns": {
                "provider_id": {
                    "name": "provider_id",
                    "description": "A unique identifier for each Provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_name": {
                    "name": "provider_name",
                    "description": "A description of the Provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "npi": {
                    "name": "npi",
                    "description": "The National Provider Identifier (NPI) of the provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dea": {
                    "name": "dea",
                    "description": "The Drug Enforcement Administration (DEA) number of the provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "specialty_concept_id": {
                    "name": "specialty_concept_id",
                    "description": "A foreign key to a Standard Specialty Concept ID in the Standardized Vocabularies.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "care_site_id": {
                    "name": "care_site_id",
                    "description": "A foreign key to the main Care Site where the provider is practicing.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "year_of_birth": {
                    "name": "year_of_birth",
                    "description": "The year of birth of the Provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "gender_concept_id": {
                    "name": "gender_concept_id",
                    "description": "The gender of the Provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_source_value": {
                    "name": "provider_source_value",
                    "description": "The identifier used for the Provider in the source data, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "specialty_source_value": {
                    "name": "specialty_source_value",
                    "description": "The source code for the Provider specialty as it appears in the source data, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "specialty_source_concept_id": {
                    "name": "specialty_source_concept_id",
                    "description": "A foreign key to a Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "gender_source_value": {
                    "name": "gender_source_value",
                    "description": "The gender code for the Provider as it appears in the source data, stored here for reference.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "gender_source_concept_id": {
                    "name": "gender_source_concept_id",
                    "description": "A foreign key to a Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\provider.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "provider_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\nwith provider as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_provider\"\n\n)\nselect\n    provider_id,\n    provider_name,\n    npi,\n    dea,\n    specialty_concept_id,\n    care_site_id,\n    year_of_birth,\n    gender_concept_id,\n    provider_source_value,\n    specialty_source_value,\n    specialty_source_concept_id,\n    gender_source_value,\n    gender_source_concept_id,\n    shard_id\nfrom provider\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'person'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"provider\""
        },
        "model.hube.visit_detail": {
            "raw_sql": "{{ config(\r\n    unique_key='visit_detail_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\n\r\nwith visit_detail as (\r\n\r\n    select * from {{ ref('stg_visit_detail')}}\r\n\r\n)\r\nselect\r\n    visit_detail_id,\r\n    person_id,\r\n    visit_detail_concept_id,\r\n    visit_detail_start_date,\r\n    visit_detail_start_datetime,\r\n    visit_detail_end_date,\r\n    visit_detail_end_datetime,\r\n    visit_detail_type_concept_id,\r\n    provider_id,\r\n    care_site_id,\r\n    visit_detail_source_value,\r\n    visit_detail_source_concept_id,\r\n    admitted_from_concept_id,\r\n    admitted_from_source_value,\r\n    discharge_to_source_value,\r\n    discharge_to_concept_id,\r\n    visit_detail_parent_id,\r\n    preceding_visit_detail_id,\r\n    visit_occurrence_id,\r\n    shard_id\r\nfrom visit_detail\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'visit_detail') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_visit_detail"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "visit_detail_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "visit_detail"
            ],
            "unique_id": "model.hube.visit_detail",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\visit_detail.sql",
            "original_file_path": "models\\iomed\\visit_detail.sql",
            "name": "visit_detail",
            "alias": "visit_detail",
            "checksum": {
                "name": "sha256",
                "checksum": "e6be2d4916ce123846e8c5f4dcdead3da4e66172a1f7126aef7cf39381edfdcd"
            },
            "tags": [],
            "refs": [
                [
                    "stg_visit_detail"
                ]
            ],
            "sources": [],
            "description": "The VISIT_DETAIL table is an optional table used to represents details of each record in the parent visit_occurrence table. For every record in visit_occurrence table there may be 0 or more records in the visit_detail table with a 1:n relationship where n may be 0. The visit_detail table is structurally very similar to visit_occurrence table and belongs to the similar domain as the visit.",
            "columns": {
                "visit_detail_id": {
                    "name": "visit_detail_id",
                    "description": "A unique identifier for each Person''s visit or encounter at a healthcare provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_id": {
                    "name": "person_id",
                    "description": "A foreign key identifier to the Person for whom the visit is recorded. The demographic details of that Person are stored in the PERSON table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_concept_id": {
                    "name": "visit_detail_concept_id",
                    "description": "A foreign key that refers to a visit Concept identifier in the Standardized Vocabularies belonging to the ''Visit'' Vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_start_date": {
                    "name": "visit_detail_start_date",
                    "description": "The start date of the visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_start_datetime": {
                    "name": "visit_detail_start_datetime",
                    "description": "The date and time of the visit started.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_end_date": {
                    "name": "visit_detail_end_date",
                    "description": "The end date of the visit. If this is a one-day visit the end date should match the start date.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_end_datetime": {
                    "name": "visit_detail_end_datetime",
                    "description": "The date and time of the visit end.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_type_concept_id": {
                    "name": "visit_detail_type_concept_id",
                    "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of source data from which the visit record is derived belonging to the ''Visit Type'' vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the provider in the provider table who was associated with the visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "care_site_id": {
                    "name": "care_site_id",
                    "description": "A foreign key to the care site in the care site table that was visited.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_source_value": {
                    "name": "visit_detail_source_value",
                    "description": "The source code for the visit as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_source_concept_id": {
                    "name": "visit_detail_source_concept_id",
                    "description": "A foreign key to a Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "admitted_from_source_value": {
                    "name": "admitted_from_source_value",
                    "description": "The source code for the admitting source as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "admitted_from_concept_id": {
                    "name": "admitted_from_concept_id",
                    "description": "A foreign key to the predefined concept in the ''Place of Service'' Vocabulary reflecting the admitting source for a visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "discharge_to_source_value": {
                    "name": "discharge_to_source_value",
                    "description": "The source code for the discharge disposition as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "discharge_to_concept_id": {
                    "name": "discharge_to_concept_id",
                    "description": "A foreign key to the predefined concept in the ''Place of Service'' Vocabulary reflecting the discharge disposition for a visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "preceding_visit_detail_id": {
                    "name": "preceding_visit_detail_id",
                    "description": "A foreign key to the VISIT_DETAIL table of the visit immediately preceding this visit",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_detail_parent_id": {
                    "name": "visit_detail_parent_id",
                    "description": "A foreign key to the VISIT_DETAIL table record to represent the immediate parent visit-detail record.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_occurrence_id": {
                    "name": "visit_occurrence_id",
                    "description": "A foreign key that refers to the record in the VISIT_OCCURRENCE table. This is a required field, because for every visit_detail is a child of visit_occurrence and cannot exist without a corresponding parent record in visit_occurrence.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\visit_detail.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "visit_detail_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\n\nwith visit_detail as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_visit_detail\"\n\n)\nselect\n    visit_detail_id,\n    person_id,\n    visit_detail_concept_id,\n    visit_detail_start_date,\n    visit_detail_start_datetime,\n    visit_detail_end_date,\n    visit_detail_end_datetime,\n    visit_detail_type_concept_id,\n    provider_id,\n    care_site_id,\n    visit_detail_source_value,\n    visit_detail_source_concept_id,\n    admitted_from_concept_id,\n    admitted_from_source_value,\n    discharge_to_source_value,\n    discharge_to_concept_id,\n    visit_detail_parent_id,\n    preceding_visit_detail_id,\n    visit_occurrence_id,\n    shard_id\nfrom visit_detail\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'visit_detail'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"visit_detail\""
        },
        "model.hube.visit_occurrence": {
            "raw_sql": "{{ config(\r\n    unique_key='visit_occurrence_id',\r\n    materialized='incremental',\r\n\tenabled=true\r\n  )\r\n}}\r\n\r\n\r\nwith visit_occurrence as (\r\n\r\n    select * from {{ ref('stg_visit_occurrence')}}\r\n\r\n)\r\nselect\r\n    visit_occurrence_id,\r\n    person_id,\r\n    visit_concept_id,\r\n    visit_start_date,\r\n    visit_start_datetime,\r\n    visit_end_date,\r\n    visit_end_datetime,\r\n    visit_type_concept_id,\r\n    provider_id,\r\n    care_site_id,\r\n    visit_source_value,\r\n    visit_source_concept_id,\r\n    admitted_from_concept_id,\r\n    admitted_from_source_value,\r\n    discharge_to_source_value,\r\n    discharge_to_concept_id,\r\n    preceding_visit_occurrence_id,\r\n    shard_id\r\nfrom visit_occurrence\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'visit_occurrence') }}\r\n{% endif %}",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event",
                    "macro.hube.last_dbt_run"
                ],
                "nodes": [
                    "model.hube.stg_visit_occurrence"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "visit_occurrence_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "visit_occurrence"
            ],
            "unique_id": "model.hube.visit_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\visit_occurrence.sql",
            "original_file_path": "models\\iomed\\visit_occurrence.sql",
            "name": "visit_occurrence",
            "alias": "visit_occurrence",
            "checksum": {
                "name": "sha256",
                "checksum": "05d5ffe4fcd76fe80a1886c6017a38ec6e8d18928a8083391cfd85742a38ce1b"
            },
            "tags": [],
            "refs": [
                [
                    "stg_visit_occurrence"
                ]
            ],
            "sources": [],
            "description": "The VISIT_OCCURRENCE table contains the spans of time a Person continuously receives medical services from one or more providers at a Care Site in a given setting within the health care system. Visits are classified into 4 settings: outpatient care, inpatient confinement, emergency room, and long-term care. Persons may transition between these settings over the course of an episode of care (for example, treatment of a disease onset).",
            "columns": {
                "visit_occurrence_id": {
                    "name": "visit_occurrence_id",
                    "description": "A unique identifier for each Person''s visit or encounter at a healthcare provider.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "person_id": {
                    "name": "person_id",
                    "description": "A foreign key identifier to the Person for whom the visit is recorded. The demographic details of that Person are stored in the PERSON table.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_concept_id": {
                    "name": "visit_concept_id",
                    "description": "A foreign key that refers to a visit Concept identifier in the Standardized Vocabularies belonging to the ''Visit'' Vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_start_date": {
                    "name": "visit_start_date",
                    "description": "The start date of the visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_start_datetime": {
                    "name": "visit_start_datetime",
                    "description": "The date and time of the visit started.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_end_date": {
                    "name": "visit_end_date",
                    "description": "The end date of the visit. If this is a one-day visit the end date should match the start date.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_end_datetime": {
                    "name": "visit_end_datetime",
                    "description": "The date and time of the visit end.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_type_concept_id": {
                    "name": "visit_type_concept_id",
                    "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of source data from which the visit record is derived belonging to the ''Visit Type'' vocabulary.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "provider_id": {
                    "name": "provider_id",
                    "description": "A foreign key to the provider in the provider table who was associated with the visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "care_site_id": {
                    "name": "care_site_id",
                    "description": "A foreign key to the care site in the care site table that was visited.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_source_value": {
                    "name": "visit_source_value",
                    "description": "The source code for the visit as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "visit_source_concept_id": {
                    "name": "visit_source_concept_id",
                    "description": "A foreign key to a Concept that refers to the code used in the source.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "admitted_from_concept_id": {
                    "name": "admitted_from_concept_id",
                    "description": "A foreign key to the predefined concept in the Place of Service Vocabulary reflecting where the patient was admitted from.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "admitted_from_source_value": {
                    "name": "admitted_from_source_value",
                    "description": "The source code for where the patient was admitted from as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "discharge_to_concept_id": {
                    "name": "discharge_to_concept_id",
                    "description": "A foreign key to the predefined concept in the Place of Service Vocabulary reflecting the discharge disposition for a visit.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "discharge_to_source_value": {
                    "name": "discharge_to_source_value",
                    "description": "The source code for the discharge disposition as it appears in the source data.",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "preceding_visit_occurrence_id": {
                    "name": "preceding_visit_occurrence_id",
                    "description": "A foreign key to the VISIT_OCCURRENCE table of the visit immediately preceding this visit",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "models\\schema.yml",
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\iomed\\visit_occurrence.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "visit_occurrence_id",
                "materialized": "incremental",
                "enabled": true
            },
            "compiled_sql": "\n\n\nwith visit_occurrence as (\n\n    select * from \"hube\".\"cdm_dbt\".\"stg_visit_occurrence\"\n\n)\nselect\n    visit_occurrence_id,\n    person_id,\n    visit_concept_id,\n    visit_start_date,\n    visit_start_datetime,\n    visit_end_date,\n    visit_end_datetime,\n    visit_type_concept_id,\n    provider_id,\n    care_site_id,\n    visit_source_value,\n    visit_source_concept_id,\n    admitted_from_concept_id,\n    admitted_from_source_value,\n    discharge_to_source_value,\n    discharge_to_concept_id,\n    preceding_visit_occurrence_id,\n    shard_id\nfrom visit_occurrence\n\n\n  -- this filter will only be applied on an incremental run\n    where iomed_row_insert_datetime > \n\n    COALESCE(\n        (select max(event_timestamp)\n        from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        where event_schema = 'cdm'\n        and event_model =  'visit_occurrence'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm\".\"visit_occurrence\""
        },
        "operation.hube.hube-on-run-start-0": {
            "raw_sql": "CREATE EXTENSION IF NOT EXISTS tablefunc;",
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "hooks",
                "hube-on-run-start-0"
            ],
            "unique_id": "operation.hube.hube-on-run-start-0",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "hooks\\hube-on-run-start-0.sql",
            "original_file_path": ".\\dbt_project.yml",
            "name": "hube-on-run-start-0",
            "alias": "hube-on-run-start-0",
            "checksum": {
                "name": "sha256",
                "checksum": "fdd28a6ca82f1c3009a44cc23a77f573099f2ff6700a5b6268278e962ccfd132"
            },
            "tags": [
                "on-run-start"
            ],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\.\\dbt_project.yml\\hooks\\hube-on-run-start-0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "CREATE EXTENSION IF NOT EXISTS tablefunc;",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 0
        },
        "operation.hube.hube-on-run-end-0": {
            "raw_sql": "GRANT USAGE ON SCHEMA {{ target.schema }} TO dataengineering_stolon_vault;",
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "hooks",
                "hube-on-run-end-0"
            ],
            "unique_id": "operation.hube.hube-on-run-end-0",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "hooks\\hube-on-run-end-0.sql",
            "original_file_path": ".\\dbt_project.yml",
            "name": "hube-on-run-end-0",
            "alias": "hube-on-run-end-0",
            "checksum": {
                "name": "sha256",
                "checksum": "fdd28a6ca82f1c3009a44cc23a77f573099f2ff6700a5b6268278e962ccfd132"
            },
            "tags": [
                "on-run-end"
            ],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\.\\dbt_project.yml\\hooks\\hube-on-run-end-0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "GRANT USAGE ON SCHEMA cdm TO dataengineering_stolon_vault;",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 0
        },
        "model.logging.stg_dbt_audit_log": {
            "raw_sql": "with audit as (\n\n    select * from {{ get_audit_relation() }}\n\n),\n\nwith_id as (\n\n    select\n\n        *,\n\n        {{ dbt_utils.surrogate_key([\n            'event_name',\n            'event_model',\n            'invocation_id'\n        ]) }} as event_id\n\n    from audit\n\n)\n\nselect * from with_id",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.get_audit_relation",
                    "macro.dbt_utils.surrogate_key",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "stg_dbt_audit_log"
            ],
            "unique_id": "model.logging.stg_dbt_audit_log",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "stg_dbt_audit_log.sql",
            "original_file_path": "models\\stg_dbt_audit_log.sql",
            "name": "stg_dbt_audit_log",
            "alias": "stg_dbt_audit_log",
            "checksum": {
                "name": "sha256",
                "checksum": "860aaeb854440548a6f7ce422ef884b6fd2180e82f8de3bd0fec173e678f0950"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\models\\stg_dbt_audit_log.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "with audit as (\n\n    select * from \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n\n),\n\nwith_id as (\n\n    select\n\n        *,\n\n        md5(cast(concat(coalesce(cast(event_name as \n    varchar\n), ''), '-', coalesce(cast(event_model as \n    varchar\n), ''), '-', coalesce(cast(invocation_id as \n    varchar\n), '')) as \n    varchar\n)) as event_id\n\n    from audit\n\n)\n\nselect * from with_id",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_meta\".\"stg_dbt_audit_log\""
        },
        "model.logging.stg_dbt_deployments": {
            "raw_sql": "with events as (\n\n    select * from {{ref('stg_dbt_audit_log')}}\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name ilike '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    {{ dbt_utils.group_by(n=4) }}\n\n)\n\nselect * from aggregated",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.group_by",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.logging.stg_dbt_audit_log"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "default",
                "stg_dbt_deployments"
            ],
            "unique_id": "model.logging.stg_dbt_deployments",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "default\\stg_dbt_deployments.sql",
            "original_file_path": "models\\default\\stg_dbt_deployments.sql",
            "name": "stg_dbt_deployments",
            "alias": "stg_dbt_deployments",
            "checksum": {
                "name": "sha256",
                "checksum": "13fdb1dfbcdb35a5a6fcc1e96d338658aebdca7591055af3fb6189b1aa39dfa6"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_audit_log"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\models\\default\\stg_dbt_deployments.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "enabled": "{{ target.type != \"bigquery\" | as_bool }}",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "with events as (\n\n    select * from \"hube\".\"cdm_meta\".\"stg_dbt_audit_log\"\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name ilike '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    group by 1,2,3,4\n\n)\n\nselect * from aggregated",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_meta\".\"stg_dbt_deployments\""
        },
        "model.logging.stg_dbt_model_deployments": {
            "raw_sql": "with events as (\n\n    select * from {{ ref('stg_dbt_audit_log') }}\n\n),\n\naggregated as (\n\n    select\n\n        {{ dbt_utils.surrogate_key([\n            'event_model',\n            'invocation_id'\n        ]) }} as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name ilike '%model%'\n\n    {{ dbt_utils.group_by(n=7) }}\n\n)\n\nselect * from aggregated",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.surrogate_key",
                    "macro.dbt_utils.group_by",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.logging.stg_dbt_audit_log"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "default",
                "stg_dbt_model_deployments"
            ],
            "unique_id": "model.logging.stg_dbt_model_deployments",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "default\\stg_dbt_model_deployments.sql",
            "original_file_path": "models\\default\\stg_dbt_model_deployments.sql",
            "name": "stg_dbt_model_deployments",
            "alias": "stg_dbt_model_deployments",
            "checksum": {
                "name": "sha256",
                "checksum": "2188a68b5a1da14b216be25caa8c84e5dbda2a9c186cc0ad857d7bf908944697"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_audit_log"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\models\\default\\stg_dbt_model_deployments.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "enabled": "{{ target.type != \"bigquery\" | as_bool }}",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "with events as (\n\n    select * from \"hube\".\"cdm_meta\".\"stg_dbt_audit_log\"\n\n),\n\naggregated as (\n\n    select\n\n        md5(cast(concat(coalesce(cast(event_model as \n    varchar\n), ''), '-', coalesce(cast(invocation_id as \n    varchar\n), '')) as \n    varchar\n)) as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name ilike '%model%'\n\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect * from aggregated",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "\"hube\".\"cdm_meta\".\"stg_dbt_model_deployments\""
        },
        "analysis.logging.deployments": {
            "raw_sql": "select\n  [deployment_started_at:aggregation] as period\n  , sum(datediff('minute', deployment_started_at, deployment_completed_at)) as total_runtime_m\n  , avg(datediff('minute', deployment_started_at, deployment_completed_at)) as avg_runtime_m\n  , sum(models_deployed) as models_deployed\nfrom\n  {{ ref('stg_dbt_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  1 desc",
            "compiled": true,
            "resource_type": "analysis",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.logging.stg_dbt_deployments"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "analysis",
                "periscope",
                "deployments"
            ],
            "unique_id": "analysis.logging.deployments",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "analysis\\periscope\\deployments.sql",
            "original_file_path": "analysis\\periscope\\deployments.sql",
            "name": "deployments",
            "alias": "deployments",
            "checksum": {
                "name": "sha256",
                "checksum": "a79323cb950544c98ee9e49eede7eb70a9f506729ca2f6316ba2df4a06b1a484"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_deployments"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\analysis\\periscope\\deployments.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "select\n  [deployment_started_at:aggregation] as period\n  , sum(datediff('minute', deployment_started_at, deployment_completed_at)) as total_runtime_m\n  , avg(datediff('minute', deployment_started_at, deployment_completed_at)) as avg_runtime_m\n  , sum(models_deployed) as models_deployed\nfrom\n  \"hube\".\"cdm_meta\".\"stg_dbt_deployments\"\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  1 desc",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "analysis.logging.models": {
            "raw_sql": "select\n  [deployment_started_at:aggregation] as period\n  , model\n  , count(1) as deployment_count\nfrom\n  {{ ref('stg_dbt_model_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\n  , 2\norder by\n  1 desc\n  , 2",
            "compiled": true,
            "resource_type": "analysis",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.logging.stg_dbt_model_deployments"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "analysis",
                "periscope",
                "models"
            ],
            "unique_id": "analysis.logging.models",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "analysis\\periscope\\models.sql",
            "original_file_path": "analysis\\periscope\\models.sql",
            "name": "models",
            "alias": "models",
            "checksum": {
                "name": "sha256",
                "checksum": "ad58419bde3e142dadccb66e55850f11687b9cb3eb37a0ed3188701f90d0478a"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_model_deployments"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\analysis\\periscope\\models.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "select\n  [deployment_started_at:aggregation] as period\n  , model\n  , count(1) as deployment_count\nfrom\n  \"hube\".\"cdm_meta\".\"stg_dbt_model_deployments\"\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\n  , 2\norder by\n  1 desc\n  , 2",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "analysis.logging.models_out_of_sla": {
            "raw_sql": "with\n  models_out_of_sla as (\n    select\n      model\n      , max(deployment_started_at) as last_deployment_ts\n      , datediff('hour', max(deployment_started_at), {{ dbt_utils.current_timestamp() }}) as hours_since_refreshed\n    from\n      {{ ref('stg_dbt_model_deployments') }}\n    group by\n      1\n    having\n      max(deployment_started_at) < dateadd('hour', -24, getdate())\n  )\nselect\n  count(1)\nfrom\n  models_out_of_sla",
            "compiled": true,
            "resource_type": "analysis",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.logging.stg_dbt_model_deployments"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "analysis",
                "periscope",
                "models_out_of_sla"
            ],
            "unique_id": "analysis.logging.models_out_of_sla",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "analysis\\periscope\\models_out_of_sla.sql",
            "original_file_path": "analysis\\periscope\\models_out_of_sla.sql",
            "name": "models_out_of_sla",
            "alias": "models_out_of_sla",
            "checksum": {
                "name": "sha256",
                "checksum": "16bb908db23145769f3aef422e823ca2f6e49721de4691b5d092baf8bf77e257"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_model_deployments"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\analysis\\periscope\\models_out_of_sla.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "with\n  models_out_of_sla as (\n    select\n      model\n      , max(deployment_started_at) as last_deployment_ts\n      , datediff('hour', max(deployment_started_at), \n    current_timestamp::\n    timestamp\n\n) as hours_since_refreshed\n    from\n      \"hube\".\"cdm_meta\".\"stg_dbt_model_deployments\"\n    group by\n      1\n    having\n      max(deployment_started_at) < dateadd('hour', -24, getdate())\n  )\nselect\n  count(1)\nfrom\n  models_out_of_sla",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "analysis.logging.models_summary": {
            "raw_sql": "select\n  model\n  , cast(min(deployment_started_at) as date) as first\n  , max(deployment_started_at) as last\nfrom\n  {{ ref('stg_dbt_model_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  3 asc",
            "compiled": true,
            "resource_type": "analysis",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": [
                    "model.logging.stg_dbt_model_deployments"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "analysis",
                "periscope",
                "models_summary"
            ],
            "unique_id": "analysis.logging.models_summary",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "analysis\\periscope\\models_summary.sql",
            "original_file_path": "analysis\\periscope\\models_summary.sql",
            "name": "models_summary",
            "alias": "models_summary",
            "checksum": {
                "name": "sha256",
                "checksum": "11235519fa3e0c8447ab2ac37a69aee3fb1085303ffc627243512dcc98deb32c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_model_deployments"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\analysis\\periscope\\models_summary.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "select\n  model\n  , cast(min(deployment_started_at) as date) as first\n  , max(deployment_started_at) as last\nfrom\n  \"hube\".\"cdm_meta\".\"stg_dbt_model_deployments\"\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  3 asc",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "operation.logging.logging-on-run-start-0": {
            "raw_sql": "{{ logging.create_audit_schema() }}",
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.logging.create_audit_schema",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "hooks",
                "logging-on-run-start-0"
            ],
            "unique_id": "operation.logging.logging-on-run-start-0",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "hooks\\logging-on-run-start-0.sql",
            "original_file_path": ".\\dbt_project.yml",
            "name": "logging-on-run-start-0",
            "alias": "logging-on-run-start-0",
            "checksum": {
                "name": "sha256",
                "checksum": "c05deed536f79c0b94ec1cc3bb074461599b823420d99765030ebbfa0fd8d12e"
            },
            "tags": [
                "on-run-start"
            ],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\.\\dbt_project.yml\\hooks\\logging-on-run-start-0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "\n    \n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 0
        },
        "operation.logging.logging-on-run-start-1": {
            "raw_sql": "{{ logging.create_audit_log_table() }}",
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.logging.create_audit_log_table",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "hooks",
                "logging-on-run-start-1"
            ],
            "unique_id": "operation.logging.logging-on-run-start-1",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "hooks\\logging-on-run-start-1.sql",
            "original_file_path": ".\\dbt_project.yml",
            "name": "logging-on-run-start-1",
            "alias": "logging-on-run-start-1",
            "checksum": {
                "name": "sha256",
                "checksum": "c05deed536f79c0b94ec1cc3bb074461599b823420d99765030ebbfa0fd8d12e"
            },
            "tags": [
                "on-run-start"
            ],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\.\\dbt_project.yml\\hooks\\logging-on-run-start-1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "create table if not exists \"hube\".\"cdm_meta\".\"dbt_audit_log\"\n        (\n        \n            event_name \n    varchar\n,\n        \n            event_timestamp \n    timestamp\n,\n        \n            event_schema \n    varchar\n,\n        \n            event_model \n    varchar\n,\n        \n            event_user \n    varchar\n,\n        \n            event_target \n    varchar\n,\n        \n            event_is_full_refresh boolean,\n        \n            invocation_id \n    varchar\n\n        \n        )",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 1
        },
        "operation.logging.logging-on-run-start-2": {
            "raw_sql": "{{ logging.log_run_start_event() }}",
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.logging.log_run_start_event",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "hooks",
                "logging-on-run-start-2"
            ],
            "unique_id": "operation.logging.logging-on-run-start-2",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "hooks\\logging-on-run-start-2.sql",
            "original_file_path": ".\\dbt_project.yml",
            "name": "logging-on-run-start-2",
            "alias": "logging-on-run-start-2",
            "checksum": {
                "name": "sha256",
                "checksum": "c05deed536f79c0b94ec1cc3bb074461599b823420d99765030ebbfa0fd8d12e"
            },
            "tags": [
                "on-run-start"
            ],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\.\\dbt_project.yml\\hooks\\logging-on-run-start-2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "\n    \n\n    insert into \"hube\".\"cdm_meta\".\"dbt_audit_log\" (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        'run started',\n        \n    (current_timestamp at time zone 'utc')::\n    timestamp\n\n,\n        '',\n        '',\n        'v-oidc-ham-hospital-1ACBdyU2ruDRCVRbExV2-1623915849',\n        'hube',\n        FALSE,\n        '6eda6789-ea50-4d1c-82fe-460fa10a678e'\n    );\n\n    commit;\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 2
        },
        "operation.logging.logging-on-run-end-0": {
            "raw_sql": "{{ logging.log_run_end_event() }}",
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.logging.log_run_end_event",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "hooks",
                "logging-on-run-end-0"
            ],
            "unique_id": "operation.logging.logging-on-run-end-0",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "hooks\\logging-on-run-end-0.sql",
            "original_file_path": ".\\dbt_project.yml",
            "name": "logging-on-run-end-0",
            "alias": "logging-on-run-end-0",
            "checksum": {
                "name": "sha256",
                "checksum": "c05deed536f79c0b94ec1cc3bb074461599b823420d99765030ebbfa0fd8d12e"
            },
            "tags": [
                "on-run-end"
            ],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\logging\\.\\dbt_project.yml\\hooks\\logging-on-run-end-0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            },
            "compiled_sql": "\n    \n\n    insert into \"hube\".\"cdm_meta\".\"dbt_audit_log\" (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        'run completed',\n        \n    (current_timestamp at time zone 'utc')::\n    timestamp\n\n,\n        '',\n        '',\n        'v-oidc-ham-hospital-1ACBdyU2ruDRCVRbExV2-1623915849',\n        'hube',\n        FALSE,\n        '6eda6789-ea50-4d1c-82fe-460fa10a678e'\n    );\n\n    commit;\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 0
        },
        "test.hube.not_null_location_location_id.863743b330": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "location_id",
                    "model": "{{ ref('location') }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_location_location_id"
            ],
            "unique_id": "test.hube.not_null_location_location_id.863743b330",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_location_location_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_location_location_id",
            "alias": "not_null_location_location_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "location"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "column_name": "location_id"
        },
        "test.hube.not_null_provider_provider_id.56c189ceb5": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "provider_id",
                    "model": "{{ ref('provider') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.provider"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_provider_provider_id"
            ],
            "unique_id": "test.hube.not_null_provider_provider_id.56c189ceb5",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_provider_provider_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_provider_provider_id",
            "alias": "not_null_provider_provider_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "provider"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_provider_provider_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"provider\"\nwhere provider_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "provider_id"
        },
        "test.hube.not_null_care_site_care_site_id.616967014b": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "care_site_id",
                    "model": "{{ ref('care_site') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.care_site"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_care_site_care_site_id"
            ],
            "unique_id": "test.hube.not_null_care_site_care_site_id.616967014b",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_care_site_care_site_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_care_site_care_site_id",
            "alias": "not_null_care_site_care_site_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "care_site"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_care_site_care_site_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"care_site\"\nwhere care_site_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "care_site_id"
        },
        "test.hube.unique_person_person_id.dec200c4c4": {
            "raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "person_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "unique_person_person_id"
            ],
            "unique_id": "test.hube.unique_person_person_id.dec200c4c4",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\unique_person_person_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "unique_person_person_id",
            "alias": "unique_person_person_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\unique_person_person_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect\n    person_id,\n    count(*) as n_records\n\nfrom \"hube\".\"cdm\".\"person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "person_id"
        },
        "test.hube.not_null_person_person_id.195d30b84a": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "person_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_person_id"
            ],
            "unique_id": "test.hube.not_null_person_person_id.195d30b84a",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_person_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_person_id",
            "alias": "not_null_person_person_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_person_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere person_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "person_id"
        },
        "test.hube.not_null_person_gender_concept_id.bc5dac1807": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "gender_concept_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_gender_concept_id"
            ],
            "unique_id": "test.hube.not_null_person_gender_concept_id.bc5dac1807",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_gender_concept_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_gender_concept_id",
            "alias": "not_null_person_gender_concept_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_gender_concept_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere gender_concept_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "gender_concept_id"
        },
        "test.hube.not_null_person_year_of_birth.167b9ae611": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "year_of_birth",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_year_of_birth"
            ],
            "unique_id": "test.hube.not_null_person_year_of_birth.167b9ae611",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_year_of_birth.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_year_of_birth",
            "alias": "not_null_person_year_of_birth",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_year_of_birth.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere year_of_birth is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "year_of_birth"
        },
        "test.hube.not_null_person_race_concept_id.c2da52469d": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "race_concept_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_race_concept_id"
            ],
            "unique_id": "test.hube.not_null_person_race_concept_id.c2da52469d",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_race_concept_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_race_concept_id",
            "alias": "not_null_person_race_concept_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_race_concept_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere race_concept_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "race_concept_id"
        },
        "test.hube.not_null_person_ethnicity_concept_id.92a25feaa3": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "ethnicity_concept_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_ethnicity_concept_id"
            ],
            "unique_id": "test.hube.not_null_person_ethnicity_concept_id.92a25feaa3",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_ethnicity_concept_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_ethnicity_concept_id",
            "alias": "not_null_person_ethnicity_concept_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_ethnicity_concept_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere ethnicity_concept_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "ethnicity_concept_id"
        },
        "test.hube.not_null_person_gender_source_concept_id.7a57a967cf": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "gender_source_concept_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_gender_source_concept_id"
            ],
            "unique_id": "test.hube.not_null_person_gender_source_concept_id.7a57a967cf",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_gender_source_concept_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_gender_source_concept_id",
            "alias": "not_null_person_gender_source_concept_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_gender_source_concept_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere gender_source_concept_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "gender_source_concept_id"
        },
        "test.hube.not_null_person_ethnicity_source_concept_id.501aeaee9e": {
            "raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "ethnicity_source_concept_id",
                    "model": "{{ ref('person') }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.hube.person"
                ]
            },
            "config": {
                "enabled": true,
                "materialized": "test",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "severity": "ERROR",
                "store_failures": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt_test__audit",
            "fqn": [
                "hube",
                "schema_test",
                "not_null_person_ethnicity_source_concept_id"
            ],
            "unique_id": "test.hube.not_null_person_ethnicity_source_concept_id.501aeaee9e",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "schema_test\\not_null_person_ethnicity_source_concept_id.sql",
            "original_file_path": "models\\schema.yml",
            "name": "not_null_person_ethnicity_source_concept_id",
            "alias": "not_null_person_ethnicity_source_concept_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [
                "schema"
            ],
            "refs": [
                [
                    "person"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "/tmp/target\\compiled\\hube\\models\\schema.yml\\schema_test\\not_null_person_ethnicity_source_concept_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "compiled_sql": "\n    \n    \n\nselect *\nfrom \"hube\".\"cdm\".\"person\"\nwhere ethnicity_source_concept_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "column_name": "ethnicity_source_concept_id"
        }
    },
    "sources": {
        "source.hube.raw.bc_iomed_sapxml_cur": {
            "fqn": [
                "hube",
                "raw",
                "bc_iomed_sapxml_cur"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bc_iomed_sapxml_cur",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bc_iomed_sapxml_cur",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bc_iomed_sapxml_cur",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bc_iomed_sapxml_cur\""
        },
        "source.hube.raw.bc_iomed_sapxml_hos": {
            "fqn": [
                "hube",
                "raw",
                "bc_iomed_sapxml_hos"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bc_iomed_sapxml_hos",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bc_iomed_sapxml_hos",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bc_iomed_sapxml_hos",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bc_iomed_sapxml_hos\""
        },
        "source.hube.raw.bc_iomed_sapxml_rad": {
            "fqn": [
                "hube",
                "raw",
                "bc_iomed_sapxml_rad"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bc_iomed_sapxml_rad",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bc_iomed_sapxml_rad",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bc_iomed_sapxml_rad",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bc_iomed_sapxml_rad\""
        },
        "source.hube.raw.bc_iomed_sapxml_urg": {
            "fqn": [
                "hube",
                "raw",
                "bc_iomed_sapxml_urg"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bc_iomed_sapxml_urg",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bc_iomed_sapxml_urg",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bc_iomed_sapxml_urg",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bc_iomed_sapxml_urg\""
        },
        "source.hube.raw.bmd_iomed_cataleg_clinic": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_cataleg_clinic"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_cataleg_clinic",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_cataleg_clinic",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_cataleg_clinic",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_cataleg_clinic\""
        },
        "source.hube.raw.bmd_iomed_far_especialitat": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_far_especialitat"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_far_especialitat",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_far_especialitat",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_far_especialitat",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_far_especialitat\""
        },
        "source.hube.raw.bmd_iomed_lab_prova": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_lab_prova"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_lab_prova",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_lab_prova",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_lab_prova",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_lab_prova\""
        },
        "source.hube.raw.bmd_iomed_metge": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_metge"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_metge",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_metge",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_metge",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_metge\""
        },
        "source.hube.raw.bmd_iomed_pacient": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_pacient"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_pacient",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_pacient",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_pacient",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_pacient\""
        },
        "source.hube.raw.bmd_iomed_prestacio_mestre": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_prestacio_mestre"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_prestacio_mestre",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_prestacio_mestre",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_prestacio_mestre",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_prestacio_mestre\""
        },
        "source.hube.raw.bmd_iomed_servei": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_servei"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_servei",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_servei",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_servei",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_servei\""
        },
        "source.hube.raw.bmd_iomed_sexe": {
            "fqn": [
                "hube",
                "raw",
                "bmd_iomed_sexe"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmd_iomed_sexe",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmd_iomed_sexe",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmd_iomed_sexe",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmd_iomed_sexe\""
        },
        "source.hube.raw.bmf_iomed_diagnostic": {
            "fqn": [
                "hube",
                "raw",
                "bmf_iomed_diagnostic"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmf_iomed_diagnostic",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmf_iomed_diagnostic",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmf_iomed_diagnostic",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmf_iomed_diagnostic\""
        },
        "source.hube.raw.bmf_iomed_farmacia": {
            "fqn": [
                "hube",
                "raw",
                "bmf_iomed_farmacia"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmf_iomed_farmacia",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmf_iomed_farmacia",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmf_iomed_farmacia",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmf_iomed_farmacia\""
        },
        "source.hube.raw.bmf_iomed_laboratori": {
            "fqn": [
                "hube",
                "raw",
                "bmf_iomed_laboratori"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmf_iomed_laboratori",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmf_iomed_laboratori",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmf_iomed_laboratori",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmf_iomed_laboratori\""
        },
        "source.hube.raw.bmf_iomed_prestacio": {
            "fqn": [
                "hube",
                "raw",
                "bmf_iomed_prestacio"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmf_iomed_prestacio",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmf_iomed_prestacio",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmf_iomed_prestacio",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmf_iomed_prestacio\""
        },
        "source.hube.raw.bmf_iomed_prestacio_episodi": {
            "fqn": [
                "hube",
                "raw",
                "bmf_iomed_prestacio_episodi"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmf_iomed_prestacio_episodi",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmf_iomed_prestacio_episodi",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmf_iomed_prestacio_episodi",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmf_iomed_prestacio_episodi\""
        },
        "source.hube.raw.bmf_iomed_procediment": {
            "fqn": [
                "hube",
                "raw",
                "bmf_iomed_procediment"
            ],
            "database": "hube",
            "schema": "raw",
            "unique_id": "source.hube.raw.bmf_iomed_procediment",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "bmf_iomed_procediment",
            "source_name": "raw",
            "source_description": "",
            "loader": "",
            "identifier": "bmf_iomed_procediment",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"raw\".\"bmf_iomed_procediment\""
        },
        "source.hube.cdm.vocabulary": {
            "fqn": [
                "hube",
                "cdm",
                "vocabulary"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.vocabulary",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "vocabulary",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "vocabulary",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"vocabulary\""
        },
        "source.hube.cdm.concept": {
            "fqn": [
                "hube",
                "cdm",
                "concept"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.concept",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "concept",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "concept",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"concept\""
        },
        "source.hube.cdm.concept_relationship": {
            "fqn": [
                "hube",
                "cdm",
                "concept_relationship"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.concept_relationship",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "concept_relationship",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "concept_relationship",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"concept_relationship\""
        },
        "source.hube.cdm.concept_ancestor": {
            "fqn": [
                "hube",
                "cdm",
                "concept_ancestor"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.concept_ancestor",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "concept_ancestor",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "concept_ancestor",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"concept_ancestor\""
        },
        "source.hube.cdm.concept_synonym": {
            "fqn": [
                "hube",
                "cdm",
                "concept_synonym"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.concept_synonym",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "concept_synonym",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "concept_synonym",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"concept_synonym\""
        },
        "source.hube.cdm.concept_class": {
            "fqn": [
                "hube",
                "cdm",
                "concept_class"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.concept_class",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "concept_class",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "concept_class",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"concept_class\""
        },
        "source.hube.cdm.relationship": {
            "fqn": [
                "hube",
                "cdm",
                "relationship"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.relationship",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "relationship",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "relationship",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"relationship\""
        },
        "source.hube.cdm.domain": {
            "fqn": [
                "hube",
                "cdm",
                "domain"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.domain",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "domain",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "domain",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"domain\""
        },
        "source.hube.cdm.drug_strength": {
            "fqn": [
                "hube",
                "cdm",
                "drug_strength"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.drug_strength",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "drug_strength",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "drug_strength",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"drug_strength\""
        },
        "source.hube.cdm.source_to_concept_map": {
            "fqn": [
                "hube",
                "cdm",
                "source_to_concept_map"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.source_to_concept_map",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "source_to_concept_map",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "source_to_concept_map",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"source_to_concept_map\""
        },
        "source.hube.cdm.drug_exposure": {
            "fqn": [
                "hube",
                "cdm",
                "drug_exposure"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.drug_exposure",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "drug_exposure",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "drug_exposure",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"drug_exposure\""
        },
        "source.hube.cdm.condition_occurrence": {
            "fqn": [
                "hube",
                "cdm",
                "condition_occurrence"
            ],
            "database": "hube",
            "schema": "cdm",
            "unique_id": "source.hube.cdm.condition_occurrence",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "models\\sources.yml",
            "original_file_path": "models\\sources.yml",
            "name": "condition_occurrence",
            "source_name": "cdm",
            "source_description": "",
            "loader": "",
            "identifier": "condition_occurrence",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": null,
                "error_after": null,
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"hube\".\"cdm\".\"condition_occurrence\""
        }
    },
    "macros": {
        "macro.hube.str_to_int": {
            "unique_id": "macro.hube.str_to_int",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\cleaning_macros.sql",
            "original_file_path": "macros\\cleaning_macros.sql",
            "name": "str_to_int",
            "macro_sql": "{% macro str_to_int(num) %}\r\n(CASE WHEN {{ num }} ~ '^[0-9]+$' THEN {{ num }}::int\r\n      ELSE null::int\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.str_to_dec": {
            "unique_id": "macro.hube.str_to_dec",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\cleaning_macros.sql",
            "original_file_path": "macros\\cleaning_macros.sql",
            "name": "str_to_dec",
            "macro_sql": "{% macro str_to_dec(num) %}\r\n(CASE WHEN {{ num }} ~ '^-?[0-9]\\d*(\\.\\d+)?$' THEN {{ num }}::decimal\r\n      ELSE null::int\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.str_to_date": {
            "unique_id": "macro.hube.str_to_date",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\cleaning_macros.sql",
            "original_file_path": "macros\\cleaning_macros.sql",
            "name": "str_to_date",
            "macro_sql": "{% macro str_to_date(fecha) %}\r\n(CASE WHEN {{ fecha }} ~ '^(19|20)\\d\\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'\r\n      THEN to_date({{ fecha }},'YYYYMMDD')\r\n      ELSE null::date\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.str_to_timestamp": {
            "unique_id": "macro.hube.str_to_timestamp",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\cleaning_macros.sql",
            "original_file_path": "macros\\cleaning_macros.sql",
            "name": "str_to_timestamp",
            "macro_sql": "{% macro str_to_timestamp(fecha, hora) %}\r\n(CASE WHEN {{ fecha }} ~ '^(19|20)\\d\\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'\r\n      AND  {{ hora }} ~ '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'\r\n      THEN to_timestamp({{ fecha }} || ' ' || {{ hora }}, 'YYYYMMDD HH24:MI')\r\n      WHEN {{ fecha }} ~ '^(19|20)\\d\\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'\r\n      THEN to_timestamp({{ fecha }} || ' 00:00', 'YYYYMMDD HH24:MI')\r\n      ELSE null::timestamp\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.null_conversion": {
            "unique_id": "macro.hube.null_conversion",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\cleaning_macros.sql",
            "original_file_path": "macros\\cleaning_macros.sql",
            "name": "null_conversion",
            "macro_sql": "{% macro null_conversion(column_name, null_value)  %}\r\n(CASE WHEN {{ column_name }} = {{ null_value }} THEN NULL\r\n      ELSE {{ column_name }}\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.clean_age": {
            "unique_id": "macro.hube.clean_age",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\cleaning_macros.sql",
            "original_file_path": "macros\\cleaning_macros.sql",
            "name": "clean_age",
            "macro_sql": "{% macro clean_age(age) %}\r\n(CASE WHEN {{ age }} != '' THEN substring({{age}} from '(\\d*).*')::int\r\n      ELSE null::int\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.last_inserted": {
            "unique_id": "macro.hube.last_inserted",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\logging_macros.sql",
            "original_file_path": "macros\\logging_macros.sql",
            "name": "last_inserted",
            "macro_sql": "{% macro last_inserted(table) %}\r\n\r\n(select max(iomed_row_insert_datetime) from  {{table}}  )\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.last_run": {
            "unique_id": "macro.hube.last_run",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\logging_macros.sql",
            "original_file_path": "macros\\logging_macros.sql",
            "name": "last_run",
            "macro_sql": "{% macro last_run() %}\r\n\r\n    COALESCE((select max(event_timestamp)\r\n             from {{ logging.get_audit_relation() }}), '1900-01-01'::timestamp)\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.get_audit_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.last_dbt_run": {
            "unique_id": "macro.hube.last_dbt_run",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\logging_macros.sql",
            "original_file_path": "macros\\logging_macros.sql",
            "name": "last_dbt_run",
            "macro_sql": "{% macro last_dbt_run(table_schema, table_name) %}\r\n\r\n    COALESCE(\r\n        (select max(event_timestamp)\r\n        from {{ logging.get_audit_relation() }}\r\n        where event_schema = '{{ table_schema }}'\r\n        and event_model =  '{{ table_name }}'\r\n        and event_name = 'model deployment completed'),\r\n        '1900-01-01'::timestamp)\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.get_audit_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.bigint_id_from_str": {
            "unique_id": "macro.hube.bigint_id_from_str",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "bigint_id_from_str",
            "macro_sql": "{% macro bigint_id_from_str(text) %}\r\n    abs(('x' || substr(md5({{ text }}), 1, 16))::bit(64)::bigint)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.int_id_from_str": {
            "unique_id": "macro.hube.int_id_from_str",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "int_id_from_str",
            "macro_sql": "{% macro int_id_from_str(text) %}\r\n    abs(('x' || substr(md5({{ text }}),1,16))::bit(32)::int)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.codigo_sexo_to_gender_concept_id": {
            "unique_id": "macro.hube.codigo_sexo_to_gender_concept_id",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "codigo_sexo_to_gender_concept_id",
            "macro_sql": "{% macro codigo_sexo_to_gender_concept_id(sexo) %}\r\n(CASE WHEN {{ sexo }} = 'H' THEN 8507::int -- man\r\n      WHEN {{ sexo }} = 'M' THEN 8532::int -- woman\r\n      WHEN {{ sexo }} is null THEN 0::int -- no data\r\n      ELSE 8551::int -- unknown\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.calculate_death_date": {
            "unique_id": "macro.hube.calculate_death_date",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "calculate_death_date",
            "macro_sql": "{% macro calculate_death_date(birthdate, age_exitus) %}\r\n(CASE WHEN {{ birthdate }} IS NOT NULL AND {{ age_exitus }} IS NOT NULL\r\n      THEN CONCAT(EXTRACT(year from {{ birthdate }}::date) + {{ age_exitus }},'-12-31')\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.extract_operator_concept_id": {
            "unique_id": "macro.hube.extract_operator_concept_id",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "extract_operator_concept_id",
            "macro_sql": "{% macro extract_operator_concept_id(val) %}\r\n(CASE WHEN {{ val }} like '>%' THEN 4172704::int -- \">\"  operator\r\n      WHEN {{ val }} like '<%' THEN 4171756::int -- \"<\"operator\r\n      WHEN {{ val }} like '<=%' THEN 4171754::int -- \"<=\" operator\r\n      WHEN {{ val }} like '>=%' THEN 4171755::int -- \">=\" operator\r\n      WHEN {{ val }} is null THEN 0::int -- No data\r\n      ELSE 4172703::int -- \"=\" operator\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.extract_numerical_value": {
            "unique_id": "macro.hube.extract_numerical_value",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "extract_numerical_value",
            "macro_sql": "{% macro extract_numerical_value(val) %}\r\n(CASE WHEN {{ val }} similar to '(>|<|<=|>=)%'\r\n      AND (right({{ val }},  length({{ val }}) - 1)) ~ '^-?[0-9]\\d*(\\.\\d+)?$'\r\n      THEN (right({{ val }},  length({{ val }}) - 1))::decimal -- Remove the first character\r\n      WHEN {{ val }} ~ '^-?[0-9]\\d*(\\.\\d+)?$' THEN {{ val }}::decimal\r\n      END)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.extract_date_from_str": {
            "unique_id": "macro.hube.extract_date_from_str",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "extract_date_from_str",
            "macro_sql": "{% macro extract_date_from_str(plaintext) %}\r\n      to_date(trim(regexp_matches({{ plaintext }}, '\\((3[01]|[12][0-9]|0?[1-9])\\.(1[012]|0?[1-9])\\.((?:19|20)\\d{2})\\)')::text,'{}'), 'DD.MM.YYYY')\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.extract_timestamp_from_str": {
            "unique_id": "macro.hube.extract_timestamp_from_str",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "extract_timestamp_from_str",
            "macro_sql": "{% macro extract_timestamp_from_str(plaintext) %}\r\n      to_timestamp(trim(regexp_matches({{ plaintext }}, '\\(((3[01]|[12][0-9]|0?[1-9])\\.(1[012]|0?[1-9])\\.((?:19|20)\\d{2})\\s/[0-9]{2}:[0-9]{2}:[0-9]{2})\\)')::text, '{\"\"}'), 'DD.MM.YYYY /hh24:mi:ss')\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.handle_measument": {
            "unique_id": "macro.hube.handle_measument",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\transformation_macros.sql",
            "original_file_path": "macros\\transformation_macros.sql",
            "name": "handle_measument",
            "macro_sql": "{% macro handle_measument(measument, position) %}\r\n      SPLIT_PART(trim(regexp_matches({{ measument }}::text, '(\\d+\\.?\\d*)\\s([a-z]*[\\/,\\*]?[a-z]*)')::text,'{}'),',', {{ position }}::int)\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.dbt__set_unlogged": {
            "unique_id": "macro.hube.dbt__set_unlogged",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\incremental_unlogged.sql",
            "original_file_path": "macros\\materializations\\incremental_unlogged.sql",
            "name": "dbt__set_unlogged",
            "macro_sql": "{% macro dbt__set_unlogged(target_relation) -%}\r\n  alter table {{target_relation}} set unlogged;\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.dbt__set_logged": {
            "unique_id": "macro.hube.dbt__set_logged",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\incremental_unlogged.sql",
            "original_file_path": "macros\\materializations\\incremental_unlogged.sql",
            "name": "dbt__set_logged",
            "macro_sql": "{% macro dbt__set_logged(target_relation) -%}\r\n  alter table {{target_relation}} set logged;\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.dbt__incremental_delete": {
            "unique_id": "macro.hube.dbt__incremental_delete",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\incremental_unlogged.sql",
            "original_file_path": "macros\\materializations\\incremental_unlogged.sql",
            "name": "dbt__incremental_delete",
            "macro_sql": "{% macro dbt__incremental_delete(target_relation, tmp_relation) -%}\r\n\r\n  {%- set unique_key = config.require('unique_key') -%}\r\n\r\n  delete\r\n  from {{ target_relation }}\r\n  where ({{ unique_key }}) in (\r\n    select ({{ unique_key }})\r\n    from {{ tmp_relation.include(schema=False, database=False) }}\r\n  );\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.materialization_incremental_unlogged_default": {
            "unique_id": "macro.hube.materialization_incremental_unlogged_default",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\incremental_unlogged.sql",
            "original_file_path": "macros\\materializations\\incremental_unlogged.sql",
            "name": "materialization_incremental_unlogged_default",
            "macro_sql": "{% materialization incremental_unlogged, default -%}\r\n  {%- set unique_key = config.get('unique_key') -%}\r\n\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,  type='table') -%}\r\n  {%- set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\r\n\r\n  {%- set should_drop = (exists_not_as_table) -%}\r\n\r\n  -- setup\r\n  {% if old_relation is none -%}\r\n    -- noop\r\n  {%- elif should_drop -%}\r\n    {{ adapter.drop_relation(old_relation) }}\r\n    {%- set old_relation = none -%}\r\n  {%- endif %}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% if full_refresh_mode and old_relation is not none-%}\r\n      {{ adapter.truncate_relation(old_relation) }}\r\n  {%- endif %}\r\n\r\n  -- build model\r\n  {% if old_relation is none -%}\r\n    {%- call statement('main') -%}\r\n      {{ create_table_as(False, target_relation, sql) }}\r\n    {%- endcall -%}\r\n  {%- else -%}\r\n     {%- call statement() -%}\r\n       -- create temporary table\r\n       {{ dbt.create_table_as(True, tmp_relation, sql) }}\r\n\r\n     {%- endcall -%}\r\n\r\n     {{ adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                           to_relation=target_relation) }}\r\n\r\n     {%- call statement('main') -%}\r\n       {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\r\n       {% set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') %}\r\n\r\n      {{ dbt__set_unlogged(target_relation) }}\r\n\r\n       {% if unique_key is not none -%}\r\n\r\n         {{ dbt__incremental_delete(target_relation, tmp_relation) }}\r\n\r\n       {%- endif %}\r\n\r\n       insert into {{ target_relation }} ({{ dest_cols_csv }})\r\n       (\r\n         select {{ dest_cols_csv }}\r\n         from {{ tmp_relation }}\r\n       );\r\n\r\n      {{ dbt__set_logged(target_relation) }}\r\n\r\n     {% endcall %}\r\n  {%- endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.hube.dbt__set_unlogged",
                    "macro.hube.dbt__incremental_delete",
                    "macro.hube.dbt__set_logged"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.default__create_unlogged_table_as": {
            "unique_id": "macro.hube.default__create_unlogged_table_as",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\table_unlogged.sql",
            "original_file_path": "macros\\materializations\\table_unlogged.sql",
            "name": "default__create_unlogged_table_as",
            "macro_sql": "{% macro default__create_unlogged_table_as(temporary, relation, sql) -%}\r\n  create unlogged {% if temporary: -%}temporary{%- endif %} table\r\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.create_unlogged_table_as": {
            "unique_id": "macro.hube.create_unlogged_table_as",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\table_unlogged.sql",
            "original_file_path": "macros\\materializations\\table_unlogged.sql",
            "name": "create_unlogged_table_as",
            "macro_sql": "{% macro create_unlogged_table_as(temporary, relation, sql) -%}\r\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.hube.materialization_table_unlogged_default": {
            "unique_id": "macro.hube.materialization_table_unlogged_default",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "macros\\materializations\\table_unlogged.sql",
            "original_file_path": "macros\\materializations\\table_unlogged.sql",
            "name": "materialization_table_unlogged_default",
            "macro_sql": "{% materialization table_unlogged, default %}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\r\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type='table') -%}\r\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema,\r\n                                                      database=database,\r\n                                                      type='table') -%}\r\n\r\n  /*\r\n      See ../view/view.sql for more information about this relation.\r\n  */\r\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\r\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type=backup_relation_type) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n\r\n  -- drop the temp relations if they exists for some reason\r\n  {{ adapter.drop_relation(intermediate_relation) }}\r\n  {{ adapter.drop_relation(backup_relation) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_unlogged_table_as(False, intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- set logged\r\n  {{ dbt__set_logged(intermediate_relation) }}\r\n\r\n  -- cleanup\r\n  {% if old_relation is not none %}\r\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\r\n  {% endif %}\r\n\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  -- finally, drop the existing/backup relation after the commit\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.hube.create_unlogged_table_as",
                    "macro.hube.dbt__set_logged",
                    "macro.dbt.drop_relation_if_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__create_table_as": {
            "unique_id": "macro.dbt_postgres.postgres__create_table_as",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__create_table_as",
            "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\r\n  {%- set unlogged = config.get('unlogged', default=false) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary -%}\r\n    temporary\r\n  {%- elif unlogged -%}\r\n    unlogged\r\n  {%- endif %} table {{ relation }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__get_create_index_sql": {
            "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__get_create_index_sql",
            "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\r\n  {%- set index_config = adapter.parse_index(index_dict) -%}\r\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\r\n  {%- set index_name = index_config.render(relation) -%}\r\n\r\n  create {% if index_config.unique -%}\r\n    unique\r\n  {%- endif %} index if not exists\r\n  \"{{ index_name }}\"\r\n  on {{ relation }} {% if index_config.type -%}\r\n    using {{ index_config.type }}\r\n  {%- endif %}\r\n  ({{ comma_separated_columns }});\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__create_schema": {
            "unique_id": "macro.dbt_postgres.postgres__create_schema",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__create_schema",
            "macro_sql": "{% macro postgres__create_schema(relation) -%}\r\n  {% if relation.database -%}\r\n    {{ adapter.verify_database(relation.database) }}\r\n  {%- endif -%}\r\n  {%- call statement('create_schema') -%}\r\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\r\n  {%- endcall -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__drop_schema": {
            "unique_id": "macro.dbt_postgres.postgres__drop_schema",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__drop_schema",
            "macro_sql": "{% macro postgres__drop_schema(relation) -%}\r\n  {% if relation.database -%}\r\n    {{ adapter.verify_database(relation.database) }}\r\n  {%- endif -%}\r\n  {%- call statement('drop_schema') -%}\r\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\r\n  {%- endcall -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__get_columns_in_relation": {
            "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__get_columns_in_relation",
            "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\r\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\r\n      select\r\n          column_name,\r\n          data_type,\r\n          character_maximum_length,\r\n          numeric_precision,\r\n          numeric_scale\r\n\r\n      from {{ relation.information_schema('columns') }}\r\n      where table_name = '{{ relation.identifier }}'\r\n        {% if relation.schema %}\r\n        and table_schema = '{{ relation.schema }}'\r\n        {% endif %}\r\n      order by ordinal_position\r\n\r\n  {% endcall %}\r\n  {% set table = load_result('get_columns_in_relation').table %}\r\n  {{ return(sql_convert_columns_in_relation(table)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__list_relations_without_caching": {
            "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__list_relations_without_caching",
            "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\r\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      tablename as name,\r\n      schemaname as schema,\r\n      'table' as type\r\n    from pg_tables\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n    union all\r\n    select\r\n      '{{ schema_relation.database }}' as database,\r\n      viewname as name,\r\n      schemaname as schema,\r\n      'view' as type\r\n    from pg_views\r\n    where schemaname ilike '{{ schema_relation.schema }}'\r\n  {% endcall %}\r\n  {{ return(load_result('list_relations_without_caching').table) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__information_schema_name": {
            "unique_id": "macro.dbt_postgres.postgres__information_schema_name",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__information_schema_name",
            "macro_sql": "{% macro postgres__information_schema_name(database) -%}\r\n  {% if database_name -%}\r\n    {{ adapter.verify_database(database_name) }}\r\n  {%- endif -%}\r\n  information_schema\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__list_schemas": {
            "unique_id": "macro.dbt_postgres.postgres__list_schemas",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__list_schemas",
            "macro_sql": "{% macro postgres__list_schemas(database) %}\r\n  {% if database -%}\r\n    {{ adapter.verify_database(database) }}\r\n  {%- endif -%}\r\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\r\n    select distinct nspname from pg_namespace\r\n  {% endcall %}\r\n  {{ return(load_result('list_schemas').table) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__check_schema_exists": {
            "unique_id": "macro.dbt_postgres.postgres__check_schema_exists",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__check_schema_exists",
            "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\r\n  {% if information_schema.database -%}\r\n    {{ adapter.verify_database(information_schema.database) }}\r\n  {%- endif -%}\r\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\r\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\r\n  {% endcall %}\r\n  {{ return(load_result('check_schema_exists').table) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__current_timestamp": {
            "unique_id": "macro.dbt_postgres.postgres__current_timestamp",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__current_timestamp",
            "macro_sql": "{% macro postgres__current_timestamp() -%}\r\n  now()\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__snapshot_string_as_time": {
            "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__snapshot_string_as_time",
            "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\r\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\r\n    {{ return(result) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__snapshot_get_time": {
            "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__snapshot_get_time",
            "macro_sql": "{% macro postgres__snapshot_get_time() -%}\r\n  {{ current_timestamp() }}::timestamp without time zone\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__make_temp_relation": {
            "unique_id": "macro.dbt_postgres.postgres__make_temp_relation",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__make_temp_relation",
            "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\r\n    {% set dt = modules.datetime.datetime.now() %}\r\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\r\n    {% set suffix_length = suffix|length + dtstring|length %}\r\n    {% set relation_max_name_length = 63 %}\r\n    {% if suffix_length > relation_max_name_length %}\r\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\r\n    {% endif %}\r\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\r\n    {% do return(base_relation.incorporate(\r\n                                  path={\r\n                                    \"identifier\": tmp_identifier,\r\n                                    \"schema\": none,\r\n                                    \"database\": none\r\n                                  })) -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres_escape_comment": {
            "unique_id": "macro.dbt_postgres.postgres_escape_comment",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres_escape_comment",
            "macro_sql": "{% macro postgres_escape_comment(comment) -%}\r\n  {% if comment is not string %}\r\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\r\n  {% endif %}\r\n  {%- set magic = '$dbt_comment_literal_block$' -%}\r\n  {%- if magic in comment -%}\r\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\r\n  {%- endif -%}\r\n  {{ magic }}{{ comment }}{{ magic }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__alter_relation_comment": {
            "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__alter_relation_comment",
            "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\r\n  {% set escaped_comment = postgres_escape_comment(comment) %}\r\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__alter_column_comment": {
            "unique_id": "macro.dbt_postgres.postgres__alter_column_comment",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "postgres__alter_column_comment",
            "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\r\n  {% for column_name in column_dict %}\r\n    {% set comment = column_dict[column_name]['description'] %}\r\n    {% set escaped_comment = postgres_escape_comment(comment) %}\r\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\r\n  {% endfor %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__get_catalog": {
            "unique_id": "macro.dbt_postgres.postgres__get_catalog",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\catalog.sql",
            "original_file_path": "macros\\catalog.sql",
            "name": "postgres__get_catalog",
            "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\r\n\r\n  {%- call statement('catalog', fetch_result=True) -%}\r\n    {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n    {% set database = information_schema.database %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    select\r\n        '{{ database }}' as table_database,\r\n        sch.nspname as table_schema,\r\n        tbl.relname as table_name,\r\n        case tbl.relkind\r\n            when 'v' then 'VIEW'\r\n            else 'BASE TABLE'\r\n        end as table_type,\r\n        tbl_desc.description as table_comment,\r\n        col.attname as column_name,\r\n        col.attnum as column_index,\r\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\r\n        col_desc.description as column_comment,\r\n        pg_get_userbyid(tbl.relowner) as table_owner\r\n\r\n    from pg_catalog.pg_namespace sch\r\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\r\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\r\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\r\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\r\n\r\n    where (\r\n        {%- for schema in schemas -%}\r\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n        {%- endfor -%}\r\n      )\r\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\r\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\r\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\r\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\r\n      and not col.attisdropped -- column as not been dropped\r\n\r\n    order by\r\n        sch.nspname,\r\n        tbl.relname,\r\n        col.attnum\r\n\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('catalog').table) }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres_get_relations": {
            "unique_id": "macro.dbt_postgres.postgres_get_relations",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\relations.sql",
            "original_file_path": "macros\\relations.sql",
            "name": "postgres_get_relations",
            "macro_sql": "{% macro postgres_get_relations () -%}\r\n\r\n  {#\r\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\r\n      --  > a pg_depend entry indicates that the referenced object cannot be\r\n      --  > dropped without also dropping the dependent object.\r\n  #}\r\n\r\n  {%- call statement('relations', fetch_result=True) -%}\r\n    with relation as (\r\n        select\r\n            pg_rewrite.ev_class as class,\r\n            pg_rewrite.oid as id\r\n        from pg_rewrite\r\n    ),\r\n    class as (\r\n        select\r\n            oid as id,\r\n            relname as name,\r\n            relnamespace as schema,\r\n            relkind as kind\r\n        from pg_class\r\n    ),\r\n    dependency as (\r\n        select\r\n            pg_depend.objid as id,\r\n            pg_depend.refobjid as ref\r\n        from pg_depend\r\n    ),\r\n    schema as (\r\n        select\r\n            pg_namespace.oid as id,\r\n            pg_namespace.nspname as name\r\n        from pg_namespace\r\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\r\n    ),\r\n    referenced as (\r\n        select\r\n            relation.id AS id,\r\n            referenced_class.name ,\r\n            referenced_class.schema ,\r\n            referenced_class.kind\r\n        from relation\r\n        join class as referenced_class on relation.class=referenced_class.id\r\n        where referenced_class.kind in ('r', 'v')\r\n    ),\r\n    relationships as (\r\n        select\r\n            referenced.name as referenced_name,\r\n            referenced.schema as referenced_schema_id,\r\n            dependent_class.name as dependent_name,\r\n            dependent_class.schema as dependent_schema_id,\r\n            referenced.kind as kind\r\n        from referenced\r\n        join dependency on referenced.id=dependency.id\r\n        join class as dependent_class on dependency.ref=dependent_class.id\r\n        where\r\n            (referenced.name != dependent_class.name or\r\n             referenced.schema != dependent_class.schema)\r\n    )\r\n\r\n    select\r\n        referenced_schema.name as referenced_schema,\r\n        relationships.referenced_name as referenced_name,\r\n        dependent_schema.name as dependent_schema,\r\n        relationships.dependent_name as dependent_name\r\n    from relationships\r\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\r\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\r\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\r\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\r\n\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('relations').table) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_postgres.postgres__snapshot_merge_sql": {
            "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql",
            "package_name": "dbt_postgres",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\postgres",
            "path": "macros\\materializations\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshot_merge.sql",
            "name": "postgres__snapshot_merge_sql",
            "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\r\n\r\n    update {{ target }}\r\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\r\n    from {{ source }} as DBT_INTERNAL_SOURCE\r\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\r\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\r\n      and {{ target }}.dbt_valid_to is null;\r\n\r\n    insert into {{ target }} ({{ insert_cols_csv }})\r\n    select {% for column in insert_cols -%}\r\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\r\n    {%- endfor %}\r\n    from {{ source }} as DBT_INTERNAL_SOURCE\r\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\core.sql",
            "original_file_path": "macros\\core.sql",
            "name": "statement",
            "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\r\n  {%- if execute: -%}\r\n    {%- set sql = caller() -%}\r\n\r\n    {%- if name == 'main' -%}\r\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\r\n      {{ write(sql) }}\r\n    {%- endif -%}\r\n\r\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\r\n    {%- if name is not none -%}\r\n      {{ store_result(name, response=res, agate_table=table) }}\r\n    {%- endif -%}\r\n\r\n  {%- endif -%}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\core.sql",
            "original_file_path": "macros\\core.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\r\n  {%- set sql = caller() -%}\r\n\r\n  {%- if name == 'main' -%}\r\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\r\n    {{ write(sql) }}\r\n  {%- endif -%}\r\n\r\n  {%- if name is not none -%}\r\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\r\n  {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\r\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\r\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\r\n        select * from (\r\n            {{ select_sql }}\r\n        ) as __dbt_sbq\r\n        where false\r\n        limit 0\r\n    {% endcall %}\r\n\r\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\r\n  {{ adapter.dispatch('create_schema')(relation) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\r\n  {%- call statement('create_schema') -%}\r\n    create schema if not exists {{ relation.without_identifier() }}\r\n  {% endcall %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\r\n  {{ adapter.dispatch('drop_schema')(relation) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\r\n  {%- call statement('drop_schema') -%}\r\n    drop schema if exists {{ relation.without_identifier() }} cascade\r\n  {% endcall %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\r\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary: -%}temporary{%- endif %} table\r\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\r\n  as (\r\n    {{ sql }}\r\n  );\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\r\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\r\n  {% do return(None) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\r\n  {{ adapter.dispatch('create_indexes')(relation) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\r\n  {%- set _indexes = config.get('indexes', default=[]) -%}\r\n\r\n  {% for _index_dict in _indexes %}\r\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\r\n    {% if create_index_sql %}\r\n      {% do run_query(create_index_sql) %}\r\n    {% endif %}\r\n  {% endfor %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\r\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n  create view {{ relation }} as (\r\n    {{ sql }}\r\n  );\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\r\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\r\n\r\n  {% set typename = adapter.type() %}\r\n  {% set msg -%}\r\n    get_catalog not implemented for {{ typename }}\r\n  {%- endset %}\r\n\r\n  {{ exceptions.raise_compiler_error(msg) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\r\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\r\n  {% set columns = [] %}\r\n  {% for row in table %}\r\n    {% do columns.append(api.Column(*row)) %}\r\n  {% endfor %}\r\n  {{ return(columns) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\r\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\r\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\r\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\r\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\r\n  {% if for_relation and config.persist_relation_docs() and model.description %}\r\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\r\n  {% endif %}\r\n\r\n  {% if for_columns and config.persist_column_docs() and model.columns %}\r\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\r\n  {% endif %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\r\n  {#\r\n    1. Create a new column (w/ temp name and correct type)\r\n    2. Copy data over to it\r\n    3. Drop the existing column (cascade!)\r\n    4. Rename the new column to existing column\r\n  #}\r\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\r\n\r\n  {% call statement('alter_column_type') %}\r\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\r\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\r\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\r\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\r\n  {% endcall %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\r\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\r\n  {% call statement('drop_relation', auto_begin=False) -%}\r\n    drop {{ relation.type }} if exists {{ relation }} cascade\r\n  {%- endcall %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\r\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\r\n  {% call statement('truncate_relation') -%}\r\n    truncate table {{ relation }}\r\n  {%- endcall %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\r\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\r\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\r\n  {% call statement('rename_relation') -%}\r\n    alter table {{ from_relation }} rename to {{ target_name }}\r\n  {%- endcall %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\r\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\r\n  {%- if database -%}\r\n    {{ database }}.INFORMATION_SCHEMA\r\n  {%- else -%}\r\n    INFORMATION_SCHEMA\r\n  {%- endif -%}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\r\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\r\n  {% set sql %}\r\n    select distinct schema_name\r\n    from {{ information_schema_name(database) }}.SCHEMATA\r\n    where catalog_name ilike '{{ database }}'\r\n  {% endset %}\r\n  {{ return(run_query(sql)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\r\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\r\n  {% set sql -%}\r\n        select count(*)\r\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\r\n        where catalog_name='{{ information_schema.database }}'\r\n          and schema_name='{{ schema }}'\r\n  {%- endset %}\r\n  {{ return(run_query(sql)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\r\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\r\n  {{ exceptions.raise_not_implemented(\r\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\r\n  {{ adapter.dispatch('current_timestamp')() }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\r\n  {{ exceptions.raise_not_implemented(\r\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\r\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\r\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\r\n    select\r\n      max({{ loaded_at_field }}) as max_loaded_at,\r\n      {{ current_timestamp() }} as snapshotted_at\r\n    from {{ source }}\r\n    {% if filter %}\r\n    where {{ filter }}\r\n    {% endif %}\r\n  {% endcall %}\r\n  {{ return(load_result('collect_freshness').table) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\r\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\r\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\r\n    {% set tmp_relation = base_relation.incorporate(\r\n                                path={\"identifier\": tmp_identifier}) -%}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\common.sql",
            "original_file_path": "macros\\adapters\\common.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\r\n  {{ config.set('sql_header', caller()) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\r\n\r\n  {% set error_msg -%}\r\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\r\n  {%- endset %}\r\n\r\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\r\n  {{ return(res) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\r\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\r\n\r\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\r\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\r\n\r\n    {% set day_count = (end_date - start_date).days %}\r\n    {% if day_count < 0 %}\r\n        {% set msg -%}\r\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\r\n        {%- endset %}\r\n\r\n        {{ exceptions.raise_compiler_error(msg, model) }}\r\n    {% endif %}\r\n\r\n    {% set date_list = [] %}\r\n    {% for i in range(0, day_count + 1) %}\r\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\r\n        {% if not out_fmt %}\r\n            {% set _ = date_list.append(the_date) %}\r\n        {% else %}\r\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {{ return(date_list) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\r\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\r\n\r\n    {% if (partition_range | length) == 1 %}\r\n      {% set start_date = partition_range[0] %}\r\n      {% set end_date = none %}\r\n    {% elif (partition_range | length) == 2 %}\r\n      {% set start_date = partition_range[0] %}\r\n      {% set end_date = partition_range[1] %}\r\n    {% else %}\r\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\r\n    {% endif %}\r\n\r\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\r\n    {% set dt = modules.datetime.datetime.now() %}\r\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\get_custom_alias.sql",
            "original_file_path": "macros\\etc\\get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n\r\n    {%- if custom_alias_name is none -%}\r\n\r\n        {{ node.name }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_alias_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\get_custom_database.sql",
            "original_file_path": "macros\\etc\\get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\r\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\get_custom_database.sql",
            "original_file_path": "macros\\etc\\get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\r\n    {%- set default_database = target.database -%}\r\n    {%- if custom_database_name is none -%}\r\n\r\n        {{ default_database }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_database_name }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\get_custom_schema.sql",
            "original_file_path": "macros\\etc\\get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ default_schema }}_{{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\get_custom_schema.sql",
            "original_file_path": "macros\\etc\\get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\is_incremental.sql",
            "original_file_path": "macros\\etc\\is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\r\n    {#-- do not run introspective queries in parsing #}\r\n    {% if not execute %}\r\n        {{ return(False) }}\r\n    {% else %}\r\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\r\n        {{ return(relation is not none\r\n                  and relation.type == 'table'\r\n                  and model.config.materialized == 'incremental'\r\n                  and not should_full_refresh()) }}\r\n    {% endif %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\query.sql",
            "original_file_path": "macros\\etc\\query.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\r\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\r\n    {{ sql }}\r\n  {% endcall %}\r\n\r\n  {% do return(load_result(\"run_query_statement\").table) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\r\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\r\n    {% if not inside_transaction and loop.first %}\r\n      {% call statement(auto_begin=inside_transaction) %}\r\n        commit;\r\n      {% endcall %}\r\n    {% endif %}\r\n    {% set rendered = render(hook.get('sql')) | trim %}\r\n    {% if (rendered | length) > 0 %}\r\n      {% call statement(auto_begin=inside_transaction) %}\r\n        {{ rendered }}\r\n      {% endcall %}\r\n    {% endif %}\r\n  {% endfor %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.column_list": {
            "unique_id": "macro.dbt.column_list",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "column_list",
            "macro_sql": "{% macro column_list(columns) %}\r\n  {%- for col in columns %}\r\n    {{ col.name }} {% if not loop.last %},{% endif %}\r\n  {% endfor -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.column_list_for_create_table": {
            "unique_id": "macro.dbt.column_list_for_create_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "column_list_for_create_table",
            "macro_sql": "{% macro column_list_for_create_table(columns) %}\r\n  {%- for col in columns %}\r\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\r\n  {% endfor -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\r\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=False) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=True) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\r\n    {{ make_hook_config(sql, inside_transaction=False) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\r\n  {% if relation is not none %}\r\n    {{ adapter.drop_relation(relation) }}\r\n  {% endif %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\r\n  {% do return(adapter.get_relation(\r\n    database=relation.database,\r\n    schema=relation.schema,\r\n    identifier=relation.identifier\r\n  )) -%}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\r\n  {% set config_full_refresh = config.get('full_refresh') %}\r\n  {% if config_full_refresh is none %}\r\n    {% set config_full_refresh = flags.FULL_REFRESH %}\r\n  {% endif %}\r\n  {% do return(config_full_refresh) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\helpers.sql",
            "original_file_path": "macros\\materializations\\helpers.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\r\n  {% set config_store_failures = config.get('store_failures') %}\r\n  {% if config_store_failures is none %}\r\n    {% set config_store_failures = flags.STORE_FAILURES %}\r\n  {% endif %}\r\n  {% do return(config_store_failures) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\test.sql",
            "original_file_path": "macros\\materializations\\test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\r\n\r\n  {% set relations = [] %}\r\n\r\n  {% if should_store_failures() %}\r\n\r\n    {% set identifier = model['alias'] %}\r\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\r\n    {% set target_relation = api.Relation.create(\r\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\r\n    \r\n    {% if old_relation %}\r\n        {% do adapter.drop_relation(old_relation) %}\r\n    {% endif %}\r\n    \r\n    {% call statement(auto_begin=True) %}\r\n        {{ create_table_as(False, target_relation, sql) }}\r\n    {% endcall %}\r\n    \r\n    {% do relations.append(target_relation) %}\r\n  \r\n    {% set main_sql %}\r\n        select count(*) as validation_errors\r\n        from {{ target_relation }}\r\n    {% endset %}\r\n    \r\n    {{ adapter.commit() }}\r\n  \r\n  {% else %}\r\n\r\n      {% set main_sql %}\r\n          select count(*) as validation_errors\r\n          from (\r\n            {{ sql }}\r\n          ) _dbt_internal_test\r\n      {% endset %}\r\n  \r\n  {% endif %}\r\n\r\n  {% call statement('main', fetch_result=True) -%}\r\n    {{ main_sql }}\r\n  {%- endcall %}\r\n  \r\n  {{ return({'relations': relations}) }}\r\n\r\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\r\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\r\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\r\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\r\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\r\n    {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n    {% if unique_key %}\r\n        {% set unique_key_match %}\r\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\r\n        {% endset %}\r\n        {% do predicates.append(unique_key_match) %}\r\n    {% else %}\r\n        {% do predicates.append('FALSE') %}\r\n    {% endif %}\r\n\r\n    {{ sql_header if sql_header is not none }}\r\n\r\n    merge into {{ target }} as DBT_INTERNAL_DEST\r\n        using {{ source }} as DBT_INTERNAL_SOURCE\r\n        on {{ predicates | join(' and ') }}\r\n\r\n    {% if unique_key %}\r\n    when matched then update set\r\n        {% for column_name in update_columns -%}\r\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\r\n            {%- if not loop.last %}, {%- endif %}\r\n        {%- endfor %}\r\n    {% endif %}\r\n\r\n    when not matched then insert\r\n        ({{ dest_cols_csv }})\r\n    values\r\n        ({{ dest_cols_csv }})\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\r\n    {% set quoted = [] %}\r\n    {% for col in column_names -%}\r\n        {%- do quoted.append(adapter.quote(col)) -%}\r\n    {%- endfor %}\r\n\r\n    {%- set dest_cols_csv = quoted | join(', ') -%}\r\n    {{ return(dest_cols_csv) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.common_get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.common_get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "common_get_delete_insert_merge_sql",
            "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\r\n\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n\r\n    {% if unique_key is not none %}\r\n    delete from {{ target }}\r\n    where ({{ unique_key }}) in (\r\n        select ({{ unique_key }})\r\n        from {{ source }}\r\n    );\r\n    {% endif %}\r\n\r\n    insert into {{ target }} ({{ dest_cols_csv }})\r\n    (\r\n        select {{ dest_cols_csv }}\r\n        from {{ source }}\r\n    );\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\r\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.common_get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\common\\merge.sql",
            "original_file_path": "macros\\materializations\\common\\merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\r\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\r\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\r\n    {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n    {{ sql_header if sql_header is not none and include_sql_header }}\r\n\r\n    merge into {{ target }} as DBT_INTERNAL_DEST\r\n        using {{ source }} as DBT_INTERNAL_SOURCE\r\n        on FALSE\r\n\r\n    when not matched by source\r\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\r\n        then delete\r\n\r\n    when not matched then insert\r\n        ({{ dest_cols_csv }})\r\n    values\r\n        ({{ dest_cols_csv }})\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.incremental_upsert": {
            "unique_id": "macro.dbt.incremental_upsert",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\incremental\\helpers.sql",
            "original_file_path": "macros\\materializations\\incremental\\helpers.sql",
            "name": "incremental_upsert",
            "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\r\n\r\n    {%- if unique_key is not none -%}\r\n    delete\r\n    from {{ target_relation }}\r\n    where ({{ unique_key }}) in (\r\n        select ({{ unique_key }})\r\n        from {{ tmp_relation }}\r\n    );\r\n    {%- endif %}\r\n\r\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       select {{ dest_cols_csv }}\r\n       from {{ tmp_relation }}\r\n    );\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\incremental\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental\\incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\r\n\r\n  {% set unique_key = config.get('unique_key') %}\r\n\r\n  {% set target_relation = this.incorporate(type='table') %}\r\n  {% set existing_relation = load_relation(this) %}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set to_drop = [] %}\r\n  {% if existing_relation is none %}\r\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\r\n  {% elif existing_relation.is_view or should_full_refresh() %}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\r\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\r\n\r\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\r\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\r\n\r\n      {% do adapter.drop_relation(intermediate_relation) %}\r\n      {% do adapter.drop_relation(backup_relation) %}\r\n\r\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\r\n      {% set need_swap = true %}\r\n      {% do to_drop.append(backup_relation) %}\r\n  {% else %}\r\n      {% set tmp_relation = make_temp_relation(target_relation) %}\r\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\r\n      {% do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) %}\r\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\r\n  {% endif %}\r\n\r\n  {% call statement(\"main\") %}\r\n      {{ build_sql }}\r\n  {% endcall %}\r\n\r\n  {% if need_swap %} \r\n      {% do adapter.rename_relation(target_relation, backup_relation) %} \r\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \r\n  {% endif %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\r\n    {% do create_indexes(target_relation) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {% do adapter.commit() %}\r\n\r\n  {% for rel in to_drop %}\r\n      {% do adapter.drop_relation(rel) %}\r\n  {% endfor %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_query",
                    "macro.dbt.incremental_upsert",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\r\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\r\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\r\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\r\n  {%- set column_override = model['config'].get('column_types', {}) -%}\r\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\r\n\r\n  {% set sql %}\r\n    create table {{ this.render() }} (\r\n        {%- for col_name in agate_table.column_names -%}\r\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\r\n            {%- set type = column_override.get(col_name, inferred_type) -%}\r\n            {%- set column_name = (col_name | string) -%}\r\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\r\n        {%- endfor -%}\r\n    )\r\n  {% endset %}\r\n\r\n  {% call statement('_') -%}\r\n    {{ sql }}\r\n  {%- endcall %}\r\n\r\n  {{ return(sql) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\r\n    {% set sql = \"\" %}\r\n    {% if full_refresh %}\r\n        {{ adapter.drop_relation(old_relation) }}\r\n        {% set sql = create_csv_table(model, agate_table) %}\r\n    {% else %}\r\n        {{ adapter.truncate_relation(old_relation) }}\r\n        {% set sql = \"truncate table \" ~ old_relation %}\r\n    {% endif %}\r\n\r\n    {{ return(sql) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\r\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\r\n    {% set quoted = [] %}\r\n    {% for col in column_names -%}\r\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\r\n    {%- endfor %}\r\n\r\n    {%- set dest_cols_csv = quoted | join(', ') -%}\r\n    {{ return(dest_cols_csv) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.basic_load_csv_rows": {
            "unique_id": "macro.dbt.basic_load_csv_rows",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "basic_load_csv_rows",
            "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\r\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\r\n    {% set bindings = [] %}\r\n\r\n    {% set statements = [] %}\r\n\r\n    {% for chunk in agate_table.rows | batch(batch_size) %}\r\n        {% set bindings = [] %}\r\n\r\n        {% for row in chunk %}\r\n            {% do bindings.extend(row) %}\r\n        {% endfor %}\r\n\r\n        {% set sql %}\r\n            insert into {{ this.render() }} ({{ cols_sql }}) values\r\n            {% for row in chunk -%}\r\n                ({%- for column in agate_table.column_names -%}\r\n                    %s\r\n                    {%- if not loop.last%},{%- endif %}\r\n                {%- endfor -%})\r\n                {%- if not loop.last%},{%- endif %}\r\n            {%- endfor %}\r\n        {% endset %}\r\n\r\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\r\n\r\n        {% if loop.index0 == 0 %}\r\n            {% do statements.append(sql) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {# Return SQL so we can render it out into the compiled files #}\r\n    {{ return(statements[0]) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_seed_column_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\r\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.basic_load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\r\n\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n  {%- set agate_table = load_agate_table() -%}\r\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% set create_table_sql = \"\" %}\r\n  {% if exists_as_view %}\r\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\r\n  {% elif exists_as_table %}\r\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\r\n  {% else %}\r\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\r\n  {% endif %}\r\n\r\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\r\n  {% set rows_affected = (agate_table.rows | length) %}\r\n  {% set sql = load_csv_rows(model, agate_table) %}\r\n\r\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\r\n    {{ create_table_sql }};\r\n    -- dbt seed --\r\n    {{ sql }}\r\n  {% endcall %}\r\n\r\n  {% set target_relation = this.incorporate(type='table') %}\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {% if full_refresh_mode or not exists_as_table %}\r\n    {% do create_indexes(target_relation) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\r\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\r\n  {% for column in columns %}\r\n    {% call statement() %}\r\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\r\n    {% endcall %}\r\n  {% endfor %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\r\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\r\n    {# no-op #}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\r\n\r\n    with snapshot_query as (\r\n\r\n        {{ source_sql }}\r\n\r\n    ),\r\n\r\n    snapshotted_data as (\r\n\r\n        select *,\r\n            {{ strategy.unique_key }} as dbt_unique_key\r\n\r\n        from {{ target_relation }}\r\n        where dbt_valid_to is null\r\n\r\n    ),\r\n\r\n    insertions_source_data as (\r\n\r\n        select\r\n            *,\r\n            {{ strategy.unique_key }} as dbt_unique_key,\r\n            {{ strategy.updated_at }} as dbt_updated_at,\r\n            {{ strategy.updated_at }} as dbt_valid_from,\r\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\r\n            {{ strategy.scd_id }} as dbt_scd_id\r\n\r\n        from snapshot_query\r\n    ),\r\n\r\n    updates_source_data as (\r\n\r\n        select\r\n            *,\r\n            {{ strategy.unique_key }} as dbt_unique_key,\r\n            {{ strategy.updated_at }} as dbt_updated_at,\r\n            {{ strategy.updated_at }} as dbt_valid_from,\r\n            {{ strategy.updated_at }} as dbt_valid_to\r\n\r\n        from snapshot_query\r\n    ),\r\n\r\n    {%- if strategy.invalidate_hard_deletes %}\r\n\r\n    deletes_source_data as (\r\n\r\n        select \r\n            *,\r\n            {{ strategy.unique_key }} as dbt_unique_key\r\n        from snapshot_query\r\n    ),\r\n    {% endif %}\r\n\r\n    insertions as (\r\n\r\n        select\r\n            'insert' as dbt_change_type,\r\n            source_data.*\r\n\r\n        from insertions_source_data as source_data\r\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where snapshotted_data.dbt_unique_key is null\r\n           or (\r\n                snapshotted_data.dbt_unique_key is not null\r\n            and (\r\n                {{ strategy.row_changed }}\r\n            )\r\n        )\r\n\r\n    ),\r\n\r\n    updates as (\r\n\r\n        select\r\n            'update' as dbt_change_type,\r\n            source_data.*,\r\n            snapshotted_data.dbt_scd_id\r\n\r\n        from updates_source_data as source_data\r\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where (\r\n            {{ strategy.row_changed }}\r\n        )\r\n    )\r\n\r\n    {%- if strategy.invalidate_hard_deletes -%}\r\n    ,\r\n\r\n    deletes as (\r\n    \r\n        select\r\n            'delete' as dbt_change_type,\r\n            source_data.*,\r\n            {{ snapshot_get_time() }} as dbt_valid_from,\r\n            {{ snapshot_get_time() }} as dbt_updated_at,\r\n            {{ snapshot_get_time() }} as dbt_valid_to,\r\n            snapshotted_data.dbt_scd_id\r\n    \r\n        from snapshotted_data\r\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where source_data.dbt_unique_key is null\r\n    )\r\n    {%- endif %}\r\n\r\n    select * from insertions\r\n    union all\r\n    select * from updates\r\n    {%- if strategy.invalidate_hard_deletes %}\r\n    union all\r\n    select * from deletes\r\n    {%- endif %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\r\n\r\n    select *,\r\n        {{ strategy.scd_id }} as dbt_scd_id,\r\n        {{ strategy.updated_at }} as dbt_updated_at,\r\n        {{ strategy.updated_at }} as dbt_valid_from,\r\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\r\n    from (\r\n        {{ sql }}\r\n    ) sbq\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\r\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\r\n\r\n  {% if target_relation %}\r\n    {% do return([true, target_relation]) %}\r\n  {% endif %}\r\n\r\n  {%- set new_relation = api.Relation.create(\r\n      database=database,\r\n      schema=schema,\r\n      identifier=identifier,\r\n      type=type\r\n  ) -%}\r\n  {% do return([false, new_relation]) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n    {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n    {% call statement('build_snapshot_staging_relation') %}\r\n        {{ create_table_as(True, tmp_relation, select) }}\r\n    {% endcall %}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\r\n  {%- set config = model['config'] -%}\r\n\r\n  {%- set target_table = model.get('alias', model.get('name')) -%}\r\n\r\n  {%- set strategy_name = config.get('strategy') -%}\r\n  {%- set unique_key = config.get('unique_key') %}\r\n\r\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\r\n    {% do create_schema(model.database, model.schema) %}\r\n  {% endif %}\r\n\r\n  {% set target_relation_exists, target_relation = get_or_create_relation(\r\n          database=model.database,\r\n          schema=model.schema,\r\n          identifier=target_table,\r\n          type='table') -%}\r\n\r\n  {%- if not target_relation.is_table -%}\r\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\r\n  {%- endif -%}\r\n\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\r\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\r\n\r\n  {% if not target_relation_exists %}\r\n\r\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\r\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\r\n\r\n  {% else %}\r\n\r\n      {{ adapter.valid_snapshot_target(target_relation) }}\r\n\r\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n      -- this may no-op if the database does not require column expansion\r\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\r\n                                               to_relation=target_relation) %}\r\n\r\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\r\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\r\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\r\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\r\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\r\n                                   | list %}\r\n\r\n      {% do create_columns(target_relation, missing_columns) %}\r\n\r\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\r\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\r\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\r\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\r\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\r\n                                   | list %}\r\n\r\n      {% set quoted_source_columns = [] %}\r\n      {% for column in source_columns %}\r\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\r\n      {% endfor %}\r\n\r\n      {% set final_sql = snapshot_merge_sql(\r\n            target = target_relation,\r\n            source = staging_table,\r\n            insert_cols = quoted_source_columns\r\n         )\r\n      %}\r\n\r\n  {% endif %}\r\n\r\n  {% call statement('main') %}\r\n      {{ final_sql }}\r\n  {% endcall %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {% if not target_relation_exists %}\r\n    {% do create_indexes(target_relation) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {% if staging_table is defined %}\r\n      {% do post_snapshot(staging_table) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_schema",
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\r\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\r\n\r\n    merge into {{ target }} as DBT_INTERNAL_DEST\r\n    using {{ source }} as DBT_INTERNAL_SOURCE\r\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\r\n\r\n    when matched\r\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\r\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\r\n        then update\r\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\r\n\r\n    when not matched\r\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\r\n        then insert ({{ insert_cols_csv }})\r\n        values ({{ insert_cols_csv }})\r\n    ;\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\r\n{% set original_name = name %}\r\n  {% if '.' in name %}\r\n    {% set package_name, name = name.split(\".\", 1) %}\r\n  {% else %}\r\n    {% set package_name = none %}\r\n  {% endif %}\r\n\r\n  {% if package_name is none %}\r\n    {% set package_context = context %}\r\n  {% elif package_name in context %}\r\n    {% set package_context = context[package_name] %}\r\n  {% else %}\r\n    {% set error_msg %}\r\n        Could not find package '{{package_name}}', called with '{{original_name}}'\r\n    {% endset %}\r\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n  {% endif %}\r\n\r\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\r\n\r\n  {% if search_name not in package_context %}\r\n    {% set error_msg %}\r\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\r\n    {% endset %}\r\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\r\n  {% endif %}\r\n  {{ return(package_context[search_name]) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\r\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\r\n    md5({%- for arg in args -%}\r\n        coalesce(cast({{ arg }} as varchar ), '')\r\n        {% if not loop.last %} || '|' || {% endif %}\r\n    {%- endfor -%})\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_get_time",
            "macro_sql": "{% macro snapshot_get_time() -%}\r\n  {{ adapter.dispatch('snapshot_get_time')() }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() -%}\r\n  {{ current_timestamp() }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\r\n    {% set primary_key = config['unique_key'] %}\r\n    {% set updated_at = config['updated_at'] %}\r\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\r\n\r\n    {#/*\r\n        The snapshot relation might not have an {{ updated_at }} value if the\r\n        snapshot strategy is changed from `check` to `timestamp`. We\r\n        should use a dbt-created column for the comparison in the snapshot\r\n        table instead of assuming that the user-supplied {{ updated_at }}\r\n        will be present in the historical data.\r\n\r\n        See https://github.com/fishtown-analytics/dbt/issues/2350\r\n    */ #}\r\n    {% set row_changed_expr -%}\r\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\r\n    {%- endset %}\r\n\r\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\r\n\r\n    {% do return({\r\n        \"unique_key\": primary_key,\r\n        \"updated_at\": updated_at,\r\n        \"row_changed\": row_changed_expr,\r\n        \"scd_id\": scd_id_expr,\r\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\r\n    }) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\r\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_postgres.postgres__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\r\n    {% do exceptions.raise_not_implemented(\r\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\r\n    ) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\r\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\r\n    {%- if not target_exists -%}\r\n        {# no table yet -> return whatever the query does #}\r\n        {{ return([false, query_columns]) }}\r\n    {%- endif -%}\r\n    {# handle any schema changes #}\r\n    {%- set target_table = node.get('alias', node.get('name')) -%}\r\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\r\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\r\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\r\n    {%- set ns.column_added = false -%}\r\n\r\n    {%- set intersection = [] -%}\r\n    {%- for col in query_columns -%}\r\n        {%- if col in existing_cols -%}\r\n            {%- do intersection.append(col) -%}\r\n        {%- else -%}\r\n            {% set ns.column_added = true %}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ return([ns.column_added, intersection]) }}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\r\n    {% set check_cols_config = config['check_cols'] %}\r\n    {% set primary_key = config['unique_key'] %}\r\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\r\n    \r\n    {% set select_current_time -%}\r\n        select {{ snapshot_get_time() }} as snapshot_start\r\n    {%- endset %}\r\n\r\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\r\n    {%- set now = run_query(select_current_time)[0][0] -%}\r\n    {% if now is none or now is undefined -%}\r\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\r\n    {%- endif %}\r\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\r\n\r\n    {% set column_added = false %}\r\n\r\n    {% if check_cols_config == 'all' %}\r\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\r\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\r\n        {% set check_cols = check_cols_config %}\r\n    {% else %}\r\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\r\n    {% endif %}\r\n\r\n    {%- set row_changed_expr -%}\r\n    (\r\n    {%- if column_added -%}\r\n        TRUE\r\n    {%- else -%}\r\n    {%- for col in check_cols -%}\r\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\r\n        or\r\n        (\r\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\r\n            or\r\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\r\n        )\r\n        {%- if not loop.last %} or {% endif -%}\r\n    {%- endfor -%}\r\n    {%- endif -%}\r\n    )\r\n    {%- endset %}\r\n\r\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\r\n\r\n    {% do return({\r\n        \"unique_key\": primary_key,\r\n        \"updated_at\": updated_at,\r\n        \"row_changed\": row_changed_expr,\r\n        \"scd_id\": scd_id_expr,\r\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\r\n    }) %}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.run_query",
                    "macro.dbt.snapshot_string_as_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\table\\table.sql",
            "original_file_path": "macros\\materializations\\table\\table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\r\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type='table') -%}\r\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema,\r\n                                                      database=database,\r\n                                                      type='table') -%}\r\n\r\n  /*\r\n      See ../view/view.sql for more information about this relation.\r\n  */\r\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\r\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type=backup_relation_type) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n\r\n  -- drop the temp relations if they exists for some reason\r\n  {{ adapter.drop_relation(intermediate_relation) }}\r\n  {{ adapter.drop_relation(backup_relation) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_table_as(False, intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- cleanup\r\n  {% if old_relation is not none %}\r\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\r\n  {% endif %}\r\n\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {% do create_indexes(target_relation) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  -- finally, drop the existing/backup relation after the commit\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.create_indexes",
                    "macro.dbt.persist_docs",
                    "macro.dbt.drop_relation_if_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\view\\create_or_replace_view.sql",
            "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\r\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\view\\create_or_replace_view.sql",
            "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\r\n    {{ adapter.drop_relation(old_relation) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\view\\create_or_replace_view.sql",
            "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\r\n  {%- set identifier = model['alias'] -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n  {%- set target_relation = api.Relation.create(\r\n      identifier=identifier, schema=schema, database=database,\r\n      type='view') -%}\r\n\r\n  {% if run_outside_transaction_hooks %}\r\n      -- no transactions on BigQuery\r\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n  {% endif %}\r\n\r\n  -- `BEGIN` happens here on Snowflake\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- If there's a table with the same name and we weren't told to full refresh,\r\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\r\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\r\n  {%- if old_relation is not none and old_relation.is_table -%}\r\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\r\n  {%- endif -%}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_view_as(target_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {% if run_outside_transaction_hooks %}\r\n      -- No transactions on BigQuery\r\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n  {% endif %}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\view\\view.sql",
            "original_file_path": "macros\\materializations\\view\\view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\r\n\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\r\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\r\n                                                type='view') -%}\r\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema, database=database, type='view') -%}\r\n\r\n  /*\r\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\r\n     a previous run, and we're going to try to drop it immediately. At the end of this\r\n     materialization, we're going to rename the \"old_relation\" to this identifier,\r\n     and then we're going to drop it. In order to make sure we run the correct one of:\r\n       - drop view ...\r\n       - drop table ...\r\n\r\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\r\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\r\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\r\n     this relation will be effectively unused.\r\n  */\r\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\r\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema, database=database,\r\n                                                type=backup_relation_type) -%}\r\n\r\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- drop the temp relations if they exists for some reason\r\n  {{ adapter.drop_relation(intermediate_relation) }}\r\n  {{ adapter.drop_relation(backup_relation) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_view_as(intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- cleanup\r\n  -- move the existing view out of the way\r\n  {% if old_relation is not none %}\r\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\r\n  {% endif %}\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_view_as",
                    "macro.dbt.persist_docs",
                    "macro.dbt.drop_relation_if_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\accepted_values.sql",
            "original_file_path": "macros\\schema_tests\\accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\r\n\r\nwith all_values as (\r\n\r\n    select\r\n        {{ column_name }} as value_field,\r\n        count(*) as n_records\r\n\r\n    from {{ model }}\r\n    group by 1\r\n\r\n)\r\n\r\nselect *\r\nfrom all_values\r\nwhere value_field not in (\r\n    {% for value in values -%}\r\n        {% if quote -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif -%}\r\n        {%- if not loop.last -%},{%- endif %}\r\n    {%- endfor %}\r\n)\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\accepted_values.sql",
            "original_file_path": "macros\\schema_tests\\accepted_values.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\r\n    {% set macro = adapter.dispatch('test_accepted_values') %}\r\n    {{ macro(model, column_name, values, quote) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\not_null.sql",
            "original_file_path": "macros\\schema_tests\\not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\r\n\r\nselect *\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\not_null.sql",
            "original_file_path": "macros\\schema_tests\\not_null.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\r\n    {% set macro = adapter.dispatch('test_not_null') %}\r\n    {{ macro(model, column_name) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\relationships.sql",
            "original_file_path": "macros\\schema_tests\\relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\r\n\r\nselect\r\n    child.{{ column_name }}\r\n\r\nfrom {{ model }} as child\r\n\r\nleft join {{ to }} as parent\r\n    on child.{{ column_name }} = parent.{{ field }}\r\n\r\nwhere child.{{ column_name }} is not null\r\n  and parent.{{ field }} is null\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\relationships.sql",
            "original_file_path": "macros\\schema_tests\\relationships.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\r\n    {% set macro = adapter.dispatch('test_relationships') %}\r\n    {{ macro(model, column_name, to, field) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\unique.sql",
            "original_file_path": "macros\\schema_tests\\unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\r\n\r\nselect\r\n    {{ column_name }},\r\n    count(*) as n_records\r\n\r\nfrom {{ model }}\r\nwhere {{ column_name }} is not null\r\ngroup by {{ column_name }}\r\nhaving count(*) > 1\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\schema_tests\\unique.sql",
            "original_file_path": "macros\\schema_tests\\unique.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\r\n    {% set macro = adapter.dispatch('test_unique') %}\r\n    {{ macro(model, column_name) }}\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', packages = dbt_utils._get_utils_namespaces()) (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__cast_bool_to_text",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.default__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.redshift__cast_bool_to_text": {
            "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\cross_db_utils\\cast_bool_to_text.sql",
            "name": "redshift__cast_bool_to_text",
            "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.concat": {
            "unique_id": "macro.dbt_utils.concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__concat",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__concat": {
            "unique_id": "macro.dbt_utils.default__concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.alternative_concat": {
            "unique_id": "macro.dbt_utils.alternative_concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "alternative_concat",
            "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.redshift__concat": {
            "unique_id": "macro.dbt_utils.redshift__concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "redshift__concat",
            "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.alternative_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__concat": {
            "unique_id": "macro.dbt_utils.snowflake__concat",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\concat.sql",
            "original_file_path": "macros\\cross_db_utils\\concat.sql",
            "name": "snowflake__concat",
            "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.alternative_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.current_timestamp": {
            "unique_id": "macro.dbt_utils.current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__current_timestamp",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__current_timestamp": {
            "unique_id": "macro.dbt_utils.default__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.redshift__current_timestamp": {
            "unique_id": "macro.dbt_utils.redshift__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "redshift__current_timestamp",
            "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_utils.bigquery__current_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "current_timestamp_in_utc",
            "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__current_timestamp_in_utc",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "default__current_timestamp_in_utc",
            "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "snowflake__current_timestamp_in_utc",
            "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.postgres__current_timestamp_in_utc": {
            "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\current_timestamp.sql",
            "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql",
            "name": "postgres__current_timestamp_in_utc",
            "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.type_string": {
            "unique_id": "macro.dbt_utils.type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__type_string",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__type_string": {
            "unique_id": "macro.dbt_utils.default__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.redshift__type_string": {
            "unique_id": "macro.dbt_utils.redshift__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "redshift__type_string",
            "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.postgres__type_string": {
            "unique_id": "macro.dbt_utils.postgres__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "postgres__type_string",
            "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__type_string": {
            "unique_id": "macro.dbt_utils.snowflake__type_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "snowflake__type_string",
            "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.type_timestamp": {
            "unique_id": "macro.dbt_utils.type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_timestamp",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__type_timestamp": {
            "unique_id": "macro.dbt_utils.default__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__type_timestamp": {
            "unique_id": "macro.dbt_utils.snowflake__type_timestamp",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "snowflake__type_timestamp",
            "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.type_float": {
            "unique_id": "macro.dbt_utils.type_float",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_float",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__type_float": {
            "unique_id": "macro.dbt_utils.default__type_float",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__type_float": {
            "unique_id": "macro.dbt_utils.bigquery__type_float",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_float",
            "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.type_numeric": {
            "unique_id": "macro.dbt_utils.type_numeric",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_numeric",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__type_numeric": {
            "unique_id": "macro.dbt_utils.default__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__type_numeric": {
            "unique_id": "macro.dbt_utils.bigquery__type_numeric",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_numeric",
            "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.type_bigint": {
            "unique_id": "macro.dbt_utils.type_bigint",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_bigint",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__type_bigint": {
            "unique_id": "macro.dbt_utils.default__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__type_bigint": {
            "unique_id": "macro.dbt_utils.bigquery__type_bigint",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_bigint",
            "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.type_int": {
            "unique_id": "macro.dbt_utils.type_int",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__type_int",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__type_int": {
            "unique_id": "macro.dbt_utils.default__type_int",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "default__type_int",
            "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__type_int": {
            "unique_id": "macro.dbt_utils.bigquery__type_int",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datatypes.sql",
            "original_file_path": "macros\\cross_db_utils\\datatypes.sql",
            "name": "bigquery__type_int",
            "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.dateadd": {
            "unique_id": "macro.dbt_utils.dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__dateadd",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__dateadd": {
            "unique_id": "macro.dbt_utils.default__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__dateadd": {
            "unique_id": "macro.dbt_utils.bigquery__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "bigquery__dateadd",
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.postgres__dateadd": {
            "unique_id": "macro.dbt_utils.postgres__dateadd",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\dateadd.sql",
            "original_file_path": "macros\\cross_db_utils\\dateadd.sql",
            "name": "postgres__dateadd",
            "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.datediff": {
            "unique_id": "macro.dbt_utils.datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__datediff",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__datediff": {
            "unique_id": "macro.dbt_utils.default__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__datediff": {
            "unique_id": "macro.dbt_utils.bigquery__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "bigquery__datediff",
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.postgres__datediff": {
            "unique_id": "macro.dbt_utils.postgres__datediff",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\datediff.sql",
            "original_file_path": "macros\\cross_db_utils\\datediff.sql",
            "name": "postgres__datediff",
            "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.date_trunc": {
            "unique_id": "macro.dbt_utils.date_trunc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_trunc",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__date_trunc": {
            "unique_id": "macro.dbt_utils.default__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__date_trunc": {
            "unique_id": "macro.dbt_utils.bigquery__date_trunc",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\date_trunc.sql",
            "original_file_path": "macros\\cross_db_utils\\date_trunc.sql",
            "name": "bigquery__date_trunc",
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.except": {
            "unique_id": "macro.dbt_utils.except",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__except",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__except": {
            "unique_id": "macro.dbt_utils.default__except",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__except": {
            "unique_id": "macro.dbt_utils.bigquery__except",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\except.sql",
            "original_file_path": "macros\\cross_db_utils\\except.sql",
            "name": "bigquery__except",
            "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.hash": {
            "unique_id": "macro.dbt_utils.hash",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__hash": {
            "unique_id": "macro.dbt_utils.default__hash",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__hash": {
            "unique_id": "macro.dbt_utils.bigquery__hash",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\hash.sql",
            "original_file_path": "macros\\cross_db_utils\\hash.sql",
            "name": "bigquery__hash",
            "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.identifier": {
            "unique_id": "macro.dbt_utils.identifier",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "identifier",
            "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__identifier",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__identifier": {
            "unique_id": "macro.dbt_utils.default__identifier",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "default__identifier",
            "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__identifier": {
            "unique_id": "macro.dbt_utils.bigquery__identifier",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\identifier.sql",
            "original_file_path": "macros\\cross_db_utils\\identifier.sql",
            "name": "bigquery__identifier",
            "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.intersect": {
            "unique_id": "macro.dbt_utils.intersect",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__intersect",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__intersect": {
            "unique_id": "macro.dbt_utils.default__intersect",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__intersect": {
            "unique_id": "macro.dbt_utils.bigquery__intersect",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\intersect.sql",
            "original_file_path": "macros\\cross_db_utils\\intersect.sql",
            "name": "bigquery__intersect",
            "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.last_day": {
            "unique_id": "macro.dbt_utils.last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.postgres__last_day",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default_last_day": {
            "unique_id": "macro.dbt_utils.default_last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__last_day": {
            "unique_id": "macro.dbt_utils.default__last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.postgres__last_day": {
            "unique_id": "macro.dbt_utils.postgres__last_day",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\last_day.sql",
            "original_file_path": "macros\\cross_db_utils\\last_day.sql",
            "name": "postgres__last_day",
            "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.date_trunc",
                    "macro.dbt_utils.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.length": {
            "unique_id": "macro.dbt_utils.length",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__length",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__length": {
            "unique_id": "macro.dbt_utils.default__length",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.redshift__length": {
            "unique_id": "macro.dbt_utils.redshift__length",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\length.sql",
            "original_file_path": "macros\\cross_db_utils\\length.sql",
            "name": "redshift__length",
            "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.string_literal": {
            "unique_id": "macro.dbt_utils.string_literal",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\literal.sql",
            "original_file_path": "macros\\cross_db_utils\\literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__string_literal",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__string_literal": {
            "unique_id": "macro.dbt_utils.default__string_literal",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\literal.sql",
            "original_file_path": "macros\\cross_db_utils\\literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.position": {
            "unique_id": "macro.dbt_utils.position",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__position",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__position": {
            "unique_id": "macro.dbt_utils.default__position",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__position": {
            "unique_id": "macro.dbt_utils.bigquery__position",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\position.sql",
            "original_file_path": "macros\\cross_db_utils\\position.sql",
            "name": "bigquery__position",
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.replace": {
            "unique_id": "macro.dbt_utils.replace",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\replace.sql",
            "original_file_path": "macros\\cross_db_utils\\replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__replace",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__replace": {
            "unique_id": "macro.dbt_utils.default__replace",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\replace.sql",
            "original_file_path": "macros\\cross_db_utils\\replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.right": {
            "unique_id": "macro.dbt_utils.right",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__right",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__right": {
            "unique_id": "macro.dbt_utils.default__right",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__right": {
            "unique_id": "macro.dbt_utils.bigquery__right",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "bigquery__right",
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__right": {
            "unique_id": "macro.dbt_utils.snowflake__right",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\right.sql",
            "original_file_path": "macros\\cross_db_utils\\right.sql",
            "name": "snowflake__right",
            "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.safe_cast": {
            "unique_id": "macro.dbt_utils.safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_cast",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__safe_cast": {
            "unique_id": "macro.dbt_utils.default__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__safe_cast": {
            "unique_id": "macro.dbt_utils.snowflake__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "snowflake__safe_cast",
            "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__safe_cast": {
            "unique_id": "macro.dbt_utils.bigquery__safe_cast",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\safe_cast.sql",
            "original_file_path": "macros\\cross_db_utils\\safe_cast.sql",
            "name": "bigquery__safe_cast",
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.split_part": {
            "unique_id": "macro.dbt_utils.split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__split_part",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__split_part": {
            "unique_id": "macro.dbt_utils.default__split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__split_part": {
            "unique_id": "macro.dbt_utils.bigquery__split_part",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\split_part.sql",
            "original_file_path": "macros\\cross_db_utils\\split_part.sql",
            "name": "bigquery__split_part",
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.width_bucket": {
            "unique_id": "macro.dbt_utils.width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__width_bucket": {
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "unique_id": "macro.dbt_utils.redshift__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "redshift__width_bucket",
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\width_bucket.sql",
            "original_file_path": "macros\\cross_db_utils\\width_bucket.sql",
            "name": "snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils._get_utils_namespaces": {
            "unique_id": "macro.dbt_utils._get_utils_namespaces",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_get_utils_namespaces.sql",
            "original_file_path": "macros\\cross_db_utils\\_get_utils_namespaces.sql",
            "name": "_get_utils_namespaces",
            "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils._is_ephemeral": {
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_is_ephemeral.sql",
            "original_file_path": "macros\\cross_db_utils\\_is_ephemeral.sql",
            "name": "_is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils._is_relation": {
            "unique_id": "macro.dbt_utils._is_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\cross_db_utils\\_is_relation.sql",
            "original_file_path": "macros\\cross_db_utils\\_is_relation.sql",
            "name": "_is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.log_info": {
            "unique_id": "macro.dbt_utils.log_info",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\logger\\log_info.sql",
            "original_file_path": "macros\\logger\\log_info.sql",
            "name": "log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__log_info": {
            "unique_id": "macro.dbt_utils.default__log_info",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\logger\\log_info.sql",
            "original_file_path": "macros\\logger\\log_info.sql",
            "name": "default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.pretty_log_format": {
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\logger\\pretty_log_format.sql",
            "original_file_path": "macros\\logger\\pretty_log_format.sql",
            "name": "pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\logger\\pretty_log_format.sql",
            "original_file_path": "macros\\logger\\pretty_log_format.sql",
            "name": "default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.pretty_time": {
            "unique_id": "macro.dbt_utils.pretty_time",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\logger\\pretty_time.sql",
            "original_file_path": "macros\\logger\\pretty_time.sql",
            "name": "pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__pretty_time": {
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\logger\\pretty_time.sql",
            "original_file_path": "macros\\logger\\pretty_time.sql",
            "name": "default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_period_boundaries": {
            "unique_id": "macro.dbt_utils.get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "get_period_boundaries",
            "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_boundaries",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_period_boundaries": {
            "unique_id": "macro.dbt_utils.default__get_period_boundaries",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "default__get_period_boundaries",
            "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_period_sql": {
            "unique_id": "macro.dbt_utils.get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "get_period_sql",
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_period_sql",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_period_sql": {
            "unique_id": "macro.dbt_utils.default__get_period_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "default__get_period_sql",
            "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.materialization_insert_by_period_default": {
            "unique_id": "macro.dbt_utils.materialization_insert_by_period_default",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\materializations\\insert_by_period_materialization.sql",
            "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql",
            "name": "materialization_insert_by_period_default",
            "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_utils.get_period_boundaries",
                    "macro.dbt_utils.log_info",
                    "macro.dbt_utils.get_period_sql",
                    "macro.dbt.noop_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_accepted_range": {
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\accepted_range.sql",
            "original_file_path": "macros\\schema_tests\\accepted_range.sql",
            "name": "test_accepted_range",
            "macro_sql": "{% macro test_accepted_range(model, min_value = none, max_value = none, inclusive = true, where = \"true\") %}\n\n{%- set column_name = kwargs.get('column_name', kwargs.get('field')) -%}\n\nwith meet_condition as(\n  select {{ column_name }} \n  from {{ model }}\n  where {{ where }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where \n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2 \n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }} \n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_at_least_one": {
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\at_least_one.sql",
            "original_file_path": "macros\\schema_tests\\at_least_one.sql",
            "name": "test_at_least_one",
            "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\at_least_one.sql",
            "original_file_path": "macros\\schema_tests\\at_least_one.sql",
            "name": "default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\schema_tests\\cardinality_equality.sql",
            "name": "test_cardinality_equality",
            "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\schema_tests\\cardinality_equality.sql",
            "name": "default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_equality": {
            "unique_id": "macro.dbt_utils.test_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\equality.sql",
            "original_file_path": "macros\\schema_tests\\equality.sql",
            "name": "test_equality",
            "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_equality": {
            "unique_id": "macro.dbt_utils.default__test_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\equality.sql",
            "original_file_path": "macros\\schema_tests\\equality.sql",
            "name": "default__test_equality",
            "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\schema_tests\\equal_rowcount.sql",
            "name": "test_equal_rowcount",
            "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\schema_tests\\equal_rowcount.sql",
            "name": "default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_expression_is_true": {
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\expression_is_true.sql",
            "original_file_path": "macros\\schema_tests\\expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\expression_is_true.sql",
            "original_file_path": "macros\\schema_tests\\expression_is_true.sql",
            "name": "default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n{% set column_name = kwargs.get('column_name') %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    {% if column_name is none %}\n    where not({{ expression }})\n    {%- else %}\n    where not({{ column_name }} {{ expression }})\n    {%- endif %}\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\schema_tests\\fewer_rows_than.sql",
            "name": "test_fewer_rows_than",
            "macro_sql": "{% macro test_fewer_rows_than(model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', packages = dbt_utils._get_utils_namespaces())(model, combination_of_columns, quote_columns, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\schema_tests\\fewer_rows_than.sql",
            "name": "default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\nwith a as (\n\n    select count(*) as count_ourmodel from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparisonmodel from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        (select count_ourmodel from a) as count_model_with_fewer_rows,\n        (select count_comparisonmodel from b) as count_model_with_more_rows\n\n),\nfinal as (\n\n    select\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_model_with_fewer_rows > count_model_with_more_rows then (count_model_with_fewer_rows - count_model_with_more_rows)\n            -- fail the test if they are the same number\n            when count_model = count_comparison then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect row_count_delta from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\schema_tests\\mutually_exclusive_ranges.sql",
            "name": "test_mutually_exclusive_ranges",
            "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\schema_tests\\mutually_exclusive_ranges.sql",
            "name": "default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\schema_tests\\not_accepted_values.sql",
            "name": "test_not_accepted_values",
            "macro_sql": "{% macro test_not_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_not_constant": {
            "unique_id": "macro.dbt_utils.test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\not_constant.sql",
            "original_file_path": "macros\\schema_tests\\not_constant.sql",
            "name": "test_not_constant",
            "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_not_constant": {
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\not_constant.sql",
            "original_file_path": "macros\\schema_tests\\not_constant.sql",
            "name": "default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_recency": {
            "unique_id": "macro.dbt_utils.test_recency",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\recency.sql",
            "original_file_path": "macros\\schema_tests\\recency.sql",
            "name": "test_recency",
            "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_recency": {
            "unique_id": "macro.dbt_utils.default__test_recency",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\recency.sql",
            "original_file_path": "macros\\schema_tests\\recency.sql",
            "name": "default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd",
                    "macro.dbt_utils.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_relationships_where": {
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\relationships_where.sql",
            "original_file_path": "macros\\schema_tests\\relationships_where.sql",
            "name": "test_relationships_where",
            "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\relationships_where.sql",
            "original_file_path": "macros\\schema_tests\\relationships_where.sql",
            "name": "default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_sequential_values": {
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\sequential_values.sql",
            "original_file_path": "macros\\schema_tests\\sequential_values.sql",
            "name": "test_sequential_values",
            "macro_sql": "{% macro test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', packages=dbt_utils._get_utils_namespaces())(model, column_name, interval, datepart, **kwargs)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\sequential_values.sql",
            "original_file_path": "macros\\schema_tests\\sequential_values.sql",
            "name": "default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval, datepart) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as timestamp)= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as timestamp))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect\n    count(*)\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_not_null_where": {
            "unique_id": "macro.dbt_utils.test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\test_not_null_where.sql",
            "original_file_path": "macros\\schema_tests\\test_not_null_where.sql",
            "name": "test_not_null_where",
            "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_where",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_not_null_where": {
            "unique_id": "macro.dbt_utils.default__test_not_null_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\test_not_null_where.sql",
            "original_file_path": "macros\\schema_tests\\test_not_null_where.sql",
            "name": "default__test_not_null_where",
            "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_unique_where": {
            "unique_id": "macro.dbt_utils.test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\test_unique_where.sql",
            "original_file_path": "macros\\schema_tests\\test_unique_where.sql",
            "name": "test_unique_where",
            "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_where",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_unique_where": {
            "unique_id": "macro.dbt_utils.default__test_unique_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\test_unique_where.sql",
            "original_file_path": "macros\\schema_tests\\test_unique_where.sql",
            "name": "default__test_unique_where",
            "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\schema_tests\\unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\schema_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\schema_tests\\unique_combination_of_columns.sql",
            "name": "default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_intervals_between": {
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.date_spine": {
            "unique_id": "macro.dbt_utils.date_spine",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__date_spine": {
            "unique_id": "macro.dbt_utils.default__date_spine",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt_utils.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_powers_of_two": {
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.generate_series": {
            "unique_id": "macro.dbt_utils.generate_series",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__generate_series": {
            "unique_id": "macro.dbt_utils.default__generate_series",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_column_values": {
            "unique_id": "macro.dbt_utils.get_column_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_column_values": {
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "_bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.group_by": {
            "unique_id": "macro.dbt_utils.group_by",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__group_by": {
            "unique_id": "macro.dbt_utils.default__group_by",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.degrees_to_radians": {
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.haversine_distance": {
            "unique_id": "macro.dbt_utils.haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__haversine_distance": {
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(pow((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    pow((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(pow(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    pow(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.nullcheck": {
            "unique_id": "macro.dbt_utils.nullcheck",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__nullcheck": {
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.nullcheck_table": {
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.pivot": {
            "unique_id": "macro.dbt_utils.pivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__pivot": {
            "unique_id": "macro.dbt_utils.default__pivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.safe_add": {
            "unique_id": "macro.dbt_utils.safe_add",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "safe_add",
            "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__safe_add": {
            "unique_id": "macro.dbt_utils.default__safe_add",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.star": {
            "unique_id": "macro.dbt_utils.star",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__star": {
            "unique_id": "macro.dbt_utils.default__star",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.surrogate_key": {
            "unique_id": "macro.dbt_utils.surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__surrogate_key": {
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.hash",
                    "macro.dbt_utils.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.union_relations": {
            "unique_id": "macro.dbt_utils.union_relations",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__union_relations": {
            "unique_id": "macro.dbt_utils.default__union_relations",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.string_literal",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.unpivot": {
            "unique_id": "macro.dbt_utils.unpivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__unpivot": {
            "unique_id": "macro.dbt_utils.default__unpivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_url_host": {
            "unique_id": "macro.dbt_utils.get_url_host",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_url_host": {
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_url_parameter": {
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.get_url_path": {
            "unique_id": "macro.dbt_utils.get_url_path",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path",
                    "macro.dbt_utils._get_utils_namespaces"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.dbt_utils.default__get_url_path": {
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "package_name": "dbt_utils",
            "root_path": "C:\\tmp\\packages\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.replace",
                    "macro.dbt_utils.position",
                    "macro.dbt_utils.split_part",
                    "macro.dbt_utils.right",
                    "macro.dbt_utils.length",
                    "macro.dbt_utils.safe_cast",
                    "macro.dbt_utils.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.get_audit_schema": {
            "unique_id": "macro.logging.get_audit_schema",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "get_audit_schema",
            "macro_sql": "{% macro get_audit_schema() %}\n\n    {# if the get_audit_schema macro exists in the base project use that #}\n    {% if context.get(project_name, {}).get('get_audit_schema') %}\n        {{ return(context[project_name].get_audit_schema()) }}\n    {% else %}\n        {{ return(target.schema~'_meta') }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.get_audit_relation": {
            "unique_id": "macro.logging.get_audit_relation",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "get_audit_relation",
            "macro_sql": "{% macro get_audit_relation() %}\n\n    {%- set audit_schema=logging.get_audit_schema() -%}\n\n    {%- set audit_table =\n        api.Relation.create(\n            database=target.database,\n            schema=audit_schema,\n            identifier='dbt_audit_log',\n            type='table'\n        ) -%}\n\n    {{ return(audit_table) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.get_audit_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.log_audit_event": {
            "unique_id": "macro.logging.log_audit_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "log_audit_event",
            "macro_sql": "{% macro log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) -%}\n\n  {{ return(adapter.dispatch('log_audit_event', packages=['logging'])(event_name, schema, relation, user, target_name, is_full_refresh)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.default__log_audit_event"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.default__log_audit_event": {
            "unique_id": "macro.logging.default__log_audit_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "default__log_audit_event",
            "macro_sql": "{% macro default__log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) %}\n\n    insert into {{ logging.get_audit_relation() }} (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        '{{ event_name }}',\n        {{ dbt_utils.current_timestamp_in_utc() }},\n        {% if schema != None %}'{{ schema }}'{% else %}null::varchar(512){% endif %},\n        {% if relation != None %}'{{ relation }}'{% else %}null::varchar(512){% endif %},\n        {% if user != None %}'{{ user }}'{% else %}null::varchar(512){% endif %},\n        {% if target_name != None %}'{{ target_name }}'{% else %}null::varchar(512){% endif %},\n        {% if is_full_refresh %}TRUE{% else %}FALSE{% endif %},\n        '{{ invocation_id }}'\n    );\n\n    commit;\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.get_audit_relation",
                    "macro.dbt_utils.current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.create_audit_schema": {
            "unique_id": "macro.logging.create_audit_schema",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "create_audit_schema",
            "macro_sql": "{% macro create_audit_schema() %}\n    {% do create_schema(api.Relation.create(\n        database=target.database,\n        schema=logging.get_audit_schema())\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_schema",
                    "macro.logging.get_audit_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.create_audit_log_table": {
            "unique_id": "macro.logging.create_audit_log_table",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "create_audit_log_table",
            "macro_sql": "{% macro create_audit_log_table() -%}\n\n    {{ return(adapter.dispatch('create_audit_log_table', packages=['logging'])()) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.default__create_audit_log_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.default__create_audit_log_table": {
            "unique_id": "macro.logging.default__create_audit_log_table",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "default__create_audit_log_table",
            "macro_sql": "{% macro default__create_audit_log_table() -%}\n\n    {% set required_columns = [\n       [\"event_name\", dbt_utils.type_string()],\n       [\"event_timestamp\", dbt_utils.type_timestamp()],\n       [\"event_schema\", dbt_utils.type_string()],\n       [\"event_model\", dbt_utils.type_string()],\n       [\"event_user\", dbt_utils.type_string()],\n       [\"event_target\", dbt_utils.type_string()],\n       [\"event_is_full_refresh\", \"boolean\"],\n       [\"invocation_id\", dbt_utils.type_string()],\n    ] -%}\n\n    {% set audit_table = logging.get_audit_relation() -%}\n\n    {% set audit_table_exists = adapter.get_relation(audit_table.database, audit_table.schema, audit_table.name) -%}\n\n\n    {% if audit_table_exists -%}\n\n        {%- set columns_to_create = [] -%}\n\n        {# map to lower to cater for snowflake returning column names as upper case #}\n        {%- set existing_columns = adapter.get_columns_in_relation(audit_table)|map(attribute='column')|map('lower')|list -%}\n\n        {%- for required_column in required_columns -%}\n            {%- if required_column[0] not in existing_columns -%}\n                {%- do columns_to_create.append(required_column) -%}\n\n            {%- endif -%}\n        {%- endfor -%}\n\n\n        {%- for column in columns_to_create -%}\n            alter table {{ audit_table }}\n            add column {{ column[0] }} {{ column[1] }}\n            default null;\n        {% endfor -%}\n\n        {%- if columns_to_create|length > 0 %}\n            commit;\n        {% endif -%}\n\n    {%- else -%}\n        create table if not exists {{ audit_table }}\n        (\n        {% for column in required_columns %}\n            {{ column[0] }} {{ column[1] }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        )\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.type_timestamp",
                    "macro.logging.get_audit_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.log_run_start_event": {
            "unique_id": "macro.logging.log_run_start_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "log_run_start_event",
            "macro_sql": "{% macro log_run_start_event() %}\n    {{ logging.log_audit_event('run started', user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.log_audit_event"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.log_run_end_event": {
            "unique_id": "macro.logging.log_run_end_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "log_run_end_event",
            "macro_sql": "{% macro log_run_end_event() %}\n    {{ logging.log_audit_event('run completed', user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.log_audit_event"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.log_model_start_event": {
            "unique_id": "macro.logging.log_model_start_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "log_model_start_event",
            "macro_sql": "{% macro log_model_start_event() %}\n    {{ logging.log_audit_event(\n        'model deployment started', schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.log_audit_event"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.log_model_end_event": {
            "unique_id": "macro.logging.log_model_end_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "log_model_end_event",
            "macro_sql": "{% macro log_model_end_event() %}\n    {{ logging.log_audit_event(\n        'model deployment completed', schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.log_audit_event"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.log_custom_event": {
            "unique_id": "macro.logging.log_custom_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\audit.sql",
            "original_file_path": "macros\\audit.sql",
            "name": "log_custom_event",
            "macro_sql": "{% macro log_custom_event(event_name) %}\n    {{ logging.log_audit_event(\n        event_name, schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.log_audit_event"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.bigquery__log_audit_event": {
            "unique_id": "macro.logging.bigquery__log_audit_event",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\bigquery.sql",
            "original_file_path": "macros\\bigquery.sql",
            "name": "bigquery__log_audit_event",
            "macro_sql": "{% macro bigquery__log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) %}\n\n    insert into {{ logging.get_audit_relation() }} (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        '{{ event_name }}',\n        {{ dbt_utils.current_timestamp_in_utc() }},\n        {% if schema != None %}'{{ schema }}'{% else %}null{% endif %},\n        {% if relation != None %}'{{ relation }}'{% else %}null{% endif %},\n        {% if target_name != None %}'{{ target_name }}'{% else %}null{% endif %},\n        {% if is_full_refresh %}TRUE{% else %}FALSE{% endif %},\n        '{{ invocation_id }}'\n    );\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.logging.get_audit_relation",
                    "macro.dbt_utils.current_timestamp_in_utc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        },
        "macro.logging.bigquery__create_audit_log_table": {
            "unique_id": "macro.logging.bigquery__create_audit_log_table",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "macros\\bigquery.sql",
            "original_file_path": "macros\\bigquery.sql",
            "name": "bigquery__create_audit_log_table",
            "macro_sql": "{% macro bigquery__create_audit_log_table() -%}\n\n    {% set required_columns = [\n       [\"event_name\", dbt_utils.type_string()],\n       [\"event_timestamp\", dbt_utils.type_timestamp()],\n       [\"event_schema\", dbt_utils.type_string()],\n       [\"event_model\", dbt_utils.type_string()],\n       [\"event_target\", dbt_utils.type_string()],\n       [\"event_is_full_refresh\", \"BOOLEAN\"],\n       [\"invocation_id\", dbt_utils.type_string()],\n    ] -%}\n\n    {% set audit_table = logging.get_audit_relation() -%}\n\n    {% set audit_table_exists = adapter.get_relation(audit_table.database, audit_table.schema, audit_table.name) -%}\n\n\n    {% if audit_table_exists -%}\n\n        {%- set columns_to_create = [] -%}\n\n        {# map to lower to cater for snowflake returning column names as upper case #}\n        {%- set existing_columns = adapter.get_columns_in_relation(audit_table)|map(attribute='column')|map('lower')|list -%}\n\n        {%- for required_column in required_columns -%}\n            {%- if required_column[0] not in existing_columns -%}\n                {%- do columns_to_create.append(required_column) -%}\n\n            {%- endif -%}\n        {%- endfor -%}\n\n\n        {%- for column in columns_to_create -%}\n            alter table {{ audit_table }}\n            add column {{ column[0] }} {{ column[1] }}\n            default null;\n        {% endfor -%}\n\n    {%- else -%}\n        create table if not exists {{ audit_table }}\n        (\n        {% for column in required_columns %}\n            {{ column[0] }} {{ column[1] }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        )\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.type_string",
                    "macro.dbt_utils.type_timestamp",
                    "macro.logging.get_audit_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": []
        }
    },
    "docs": {
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "c:\\users\\hamza\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "overview.md",
            "original_file_path": "docs\\overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\r\n\r\nWelcome to the auto-generated documentation for your dbt project!\r\n\r\n### Navigation\r\n\r\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\r\nin your project.\r\n\r\n#### Project Tab\r\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\r\nmodels defined in your dbt project, as well as models imported from dbt packages.\r\n\r\n#### Database Tab\r\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\r\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\r\nin this interface, as they do not exist in the database.\r\n\r\n### Graph Exploration\r\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\r\n\r\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\r\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\r\nor are built from, the model you're exploring.\r\n\r\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\r\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\r\n\r\nNote that you can also right-click on models to interactively filter and explore the graph.\r\n\r\n---\r\n\r\n### More information\r\n\r\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\r\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\r\n- [Installation](https://docs.getdbt.com/docs/installation)\r\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."
        }
    },
    "exposures": {},
    "selectors": {},
    "disabled": [
        {
            "raw_sql": "-- stg_cdm_source\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n )\r\n}}\r\n\r\n\r\nselect\r\n  ''::varchar(255) as cdm_source_name, -- NOT NULL\r\n  null::varchar(25) as cdm_source_abbreviation,\r\n  'IOMED'::varchar(255) as cdm_holder,\r\n  null::text as source_description,\r\n  null::varchar(255) as source_documentation_reference,\r\n  null::varchar(255) as cdm_etl_reference,\r\n  null::date as source_release_date,\r\n  null::date as cdm_release_date,\r\n  'CDM v6.0'::varchar(10) as cdm_version,\r\n  (select vocabulary_version from {{ source('cdm','vocabulary') }} where vocabulary_id='None')::varchar(20) as vocabulary_version,\r\n  {{ var('shard_id') }} as shard_id",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_cdm_source"
            ],
            "unique_id": "model.hube.stg_cdm_source",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_cdm_source.sql",
            "original_file_path": "models\\derived\\stg_cdm_source.sql",
            "name": "stg_cdm_source",
            "alias": "stg_cdm_source",
            "checksum": {
                "name": "sha256",
                "checksum": "6c888d773660e58b908d7bbd0718eba9049d8de78503f98a255fa0b3185ad7f2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "cdm",
                    "vocabulary"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n)\r\n}}\r\n\r\n-- More information: https://ohdsi.github.io/CommonDataModel/sqlScripts.html#Condition_Eras\r\n\r\nWITH cteConditionTarget AS (\r\n    SELECT co.PERSON_ID\r\n        ,co.condition_concept_id\r\n        ,co.CONDITION_START_DATE\r\n        ,COALESCE(co.CONDITION_END_DATE, (CONDITION_START_DATE + integer '1')) AS CONDITION_END_DATE\r\n    FROM {{ source('cdm', 'condition_occurrence') }} co\r\n),\r\ncteCondEndDates AS (\r\n\r\n    SELECT PERSON_ID\r\n        ,CONDITION_CONCEPT_ID\r\n        ,(EVENT_DATE - integer '30') AS END_DATE -- unpad the end date\r\n    FROM (\r\n        SELECT E1.PERSON_ID\r\n            ,E1.CONDITION_CONCEPT_ID\r\n            ,E1.EVENT_DATE\r\n            ,COALESCE(E1.START_ORDINAL, MAX(E2.START_ORDINAL)) START_ORDINAL\r\n            ,E1.OVERALL_ORD\r\n        FROM (\r\n            SELECT PERSON_ID\r\n                ,CONDITION_CONCEPT_ID\r\n                ,EVENT_DATE\r\n                ,EVENT_TYPE\r\n                ,START_ORDINAL\r\n                ,ROW_NUMBER() OVER (\r\n                    PARTITION BY PERSON_ID\r\n                    ,CONDITION_CONCEPT_ID ORDER BY EVENT_DATE\r\n                        ,EVENT_TYPE\r\n                    ) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\r\n            FROM (\r\n                -- select the start dates, assigning a row number to each\r\n                SELECT PERSON_ID\r\n                    ,CONDITION_CONCEPT_ID\r\n                    ,CONDITION_START_DATE AS EVENT_DATE\r\n                    ,- 1 AS EVENT_TYPE\r\n                    ,ROW_NUMBER() OVER (\r\n                        PARTITION BY PERSON_ID\r\n                        ,CONDITION_CONCEPT_ID ORDER BY CONDITION_START_DATE\r\n                        ) AS START_ORDINAL\r\n                FROM cteConditionTarget\r\n\r\n                UNION ALL\r\n\r\n                -- pad the end dates by 30 to allow a grace period for overlapping ranges.\r\n                SELECT PERSON_ID\r\n                    ,CONDITION_CONCEPT_ID\r\n                    ,(CONDITION_END_DATE + integer '30')\r\n                    ,1 AS EVENT_TYPE\r\n                    ,NULL\r\n                FROM cteConditionTarget\r\n                ) RAWDATA\r\n            ) E1\r\n        INNER JOIN (\r\n            SELECT PERSON_ID\r\n                ,CONDITION_CONCEPT_ID\r\n                ,CONDITION_START_DATE AS EVENT_DATE\r\n                ,ROW_NUMBER() OVER (\r\n                    PARTITION BY PERSON_ID\r\n                    ,CONDITION_CONCEPT_ID ORDER BY CONDITION_START_DATE\r\n                    ) AS START_ORDINAL\r\n            FROM cteConditionTarget\r\n            ) E2 ON E1.PERSON_ID = E2.PERSON_ID\r\n            AND E1.CONDITION_CONCEPT_ID = E2.CONDITION_CONCEPT_ID\r\n            AND E2.EVENT_DATE <= E1.EVENT_DATE\r\n        GROUP BY E1.PERSON_ID\r\n            ,E1.CONDITION_CONCEPT_ID\r\n            ,E1.EVENT_DATE\r\n            ,E1.START_ORDINAL\r\n            ,E1.OVERALL_ORD\r\n        ) E\r\n    WHERE (2 * E.START_ORDINAL) - E.OVERALL_ORD = 0\r\n\r\n),\r\ncteConditionEnds AS (\r\n    SELECT c.PERSON_ID\r\n    ,c.CONDITION_CONCEPT_ID\r\n    ,c.CONDITION_START_DATE\r\n    ,MIN(e.END_DATE) AS ERA_END_DATE\r\n    FROM cteConditionTarget c\r\n    INNER JOIN cteCondEndDates e ON c.PERSON_ID = e.PERSON_ID\r\n        AND c.CONDITION_CONCEPT_ID = e.CONDITION_CONCEPT_ID\r\n        AND e.END_DATE >= c.CONDITION_START_DATE\r\n    GROUP BY c.PERSON_ID\r\n        ,c.CONDITION_CONCEPT_ID\r\n        ,c.CONDITION_START_DATE\r\n),\r\nfinal_condition_era AS (\r\n    SELECT row_number() OVER (\r\n        ORDER BY person_id\r\n        ) AS condition_era_id\r\n    ,person_id\r\n    ,CONDITION_CONCEPT_ID\r\n    ,min(CONDITION_START_DATE)::timestamp AS CONDITION_ERA_START_DATETIME\r\n    ,ERA_END_DATE::timestamp AS CONDITION_ERA_END_DATETIME\r\n    ,COUNT(*) AS CONDITION_OCCURRENCE_COUNT\r\n    ,5 as shard_id\r\nFROM cteConditionEnds\r\nGROUP BY person_id\r\n    ,CONDITION_CONCEPT_ID\r\n    ,ERA_END_DATE\r\n)\r\n\r\nSELECT * FROM final_condition_era",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_condition_era"
            ],
            "unique_id": "model.hube.stg_condition_era",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_condition_era.sql",
            "original_file_path": "models\\derived\\stg_condition_era.sql",
            "name": "stg_condition_era",
            "alias": "stg_condition_era",
            "checksum": {
                "name": "sha256",
                "checksum": "ccea23ad12128f34b93a0494e4fffddd0379fb37c571a2646647b9669f836860"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "cdm",
                    "condition_occurrence"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n)\r\n}}\r\n\r\n-- More information: https://ohdsi.github.io/CommonDataModel/sqlScripts.html#drug_eras\r\n\r\nWITH cteDrugTarget AS (\r\n\r\n    SELECT d.DRUG_EXPOSURE_ID\r\n    ,d.PERSON_ID\r\n    ,c.CONCEPT_ID\r\n    ,d.DRUG_TYPE_CONCEPT_ID\r\n    ,DRUG_EXPOSURE_START_DATE\r\n    ,COALESCE(DRUG_EXPOSURE_END_DATE, (DRUG_EXPOSURE_START_DATE + DAYS_SUPPLY), (DRUG_EXPOSURE_START_DATE + integer '1')) AS DRUG_EXPOSURE_END_DATE\r\n    ,c.CONCEPT_ID AS INGREDIENT_CONCEPT_ID\r\nFROM {{ source('cdm', 'drug_exposure') }} d\r\nINNER JOIN {{ source('cdm', 'concept_ancestor') }} ca ON ca.DESCENDANT_CONCEPT_ID = d.DRUG_CONCEPT_ID\r\nINNER JOIN {{ source('cdm', 'concept') }} c ON ca.ANCESTOR_CONCEPT_ID = c.CONCEPT_ID\r\nWHERE c.VOCABULARY_ID = 'RxNorm'\r\n    AND c.CONCEPT_CLASS_ID = 'Ingredient'\r\n\r\n),\r\ncteEndDates AS (\r\n\r\nSELECT PERSON_ID\r\n    ,INGREDIENT_CONCEPT_ID\r\n    ,(EVENT_DATE - integer '30') AS END_DATE -- unpad the end date\r\nFROM (\r\n    SELECT E1.PERSON_ID\r\n        ,E1.INGREDIENT_CONCEPT_ID\r\n        ,E1.EVENT_DATE\r\n        ,COALESCE(E1.START_ORDINAL, MAX(E2.START_ORDINAL)) START_ORDINAL\r\n        ,E1.OVERALL_ORD\r\n    FROM (\r\n        SELECT PERSON_ID\r\n            ,INGREDIENT_CONCEPT_ID\r\n            ,EVENT_DATE\r\n            ,EVENT_TYPE\r\n            ,START_ORDINAL\r\n            ,ROW_NUMBER() OVER (\r\n                PARTITION BY PERSON_ID\r\n                ,INGREDIENT_CONCEPT_ID ORDER BY EVENT_DATE\r\n                    ,EVENT_TYPE\r\n                ) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\r\n        FROM (\r\n            -- select the start dates, assigning a row number to each\r\n            SELECT PERSON_ID\r\n                ,INGREDIENT_CONCEPT_ID\r\n                ,DRUG_EXPOSURE_START_DATE AS EVENT_DATE\r\n                ,0 AS EVENT_TYPE\r\n                ,ROW_NUMBER() OVER (\r\n                    PARTITION BY PERSON_ID\r\n                    ,INGREDIENT_CONCEPT_ID ORDER BY DRUG_EXPOSURE_START_DATE\r\n                    ) AS START_ORDINAL\r\n            FROM cteDrugTarget\r\n\r\n            UNION ALL\r\n\r\n            -- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\r\n            SELECT PERSON_ID\r\n                ,INGREDIENT_CONCEPT_ID\r\n                ,(DRUG_EXPOSURE_END_DATE + integer '30')\r\n                ,1 AS EVENT_TYPE\r\n                ,NULL\r\n            FROM cteDrugTarget\r\n            ) RAWDATA\r\n        ) E1\r\n    INNER JOIN (\r\n        SELECT PERSON_ID\r\n            ,INGREDIENT_CONCEPT_ID\r\n            ,DRUG_EXPOSURE_START_DATE AS EVENT_DATE\r\n            ,ROW_NUMBER() OVER (\r\n                PARTITION BY PERSON_ID\r\n                ,INGREDIENT_CONCEPT_ID ORDER BY DRUG_EXPOSURE_START_DATE\r\n                ) AS START_ORDINAL\r\n        FROM cteDrugTarget\r\n        ) E2 ON E1.PERSON_ID = E2.PERSON_ID\r\n        AND E1.INGREDIENT_CONCEPT_ID = E2.INGREDIENT_CONCEPT_ID\r\n        AND E2.EVENT_DATE <= E1.EVENT_DATE\r\n    GROUP BY E1.PERSON_ID\r\n        ,E1.INGREDIENT_CONCEPT_ID\r\n        ,E1.EVENT_DATE\r\n        ,E1.START_ORDINAL\r\n        ,E1.OVERALL_ORD\r\n    ) E\r\nWHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\r\n\r\n),\r\ncteDrugExpEnds AS (\r\n    SELECT d.PERSON_ID\r\n        ,d.INGREDIENT_CONCEPT_ID\r\n        ,d.DRUG_TYPE_CONCEPT_ID\r\n        ,d.DRUG_EXPOSURE_START_DATE\r\n        ,MIN(e.END_DATE) AS ERA_END_DATE\r\n    FROM cteDrugTarget d\r\n    INNER JOIN cteEndDates e ON d.PERSON_ID = e.PERSON_ID\r\n        AND d.INGREDIENT_CONCEPT_ID = e.INGREDIENT_CONCEPT_ID\r\n        AND e.END_DATE >= d.DRUG_EXPOSURE_START_DATE\r\n    GROUP BY d.PERSON_ID\r\n        ,d.INGREDIENT_CONCEPT_ID\r\n        ,d.DRUG_TYPE_CONCEPT_ID\r\n        ,d.DRUG_EXPOSURE_START_DATE\r\n),\r\nfinal_drug_era AS (\r\n    SELECT row_number() OVER (\r\n        ORDER BY person_id\r\n        ) AS drug_era_id\r\n    ,person_id\r\n    ,INGREDIENT_CONCEPT_ID AS drug_concept_id\r\n    ,min(DRUG_EXPOSURE_START_DATE)::timestamp AS drug_era_start_datetime\r\n    ,ERA_END_DATE::timestamp AS drug_era_end_datetime\r\n    ,COUNT(*) AS DRUG_EXPOSURE_COUNT\r\n    ,30 AS gap_days\r\n    ,5 AS shard_id\r\nFROM cteDrugExpEnds\r\nGROUP BY person_id\r\n    ,INGREDIENT_CONCEPT_ID\r\n    ,drug_type_concept_id\r\n    ,ERA_END_DATE\r\n)\r\n\r\nSELECT * from final_drug_era",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_drug_era"
            ],
            "unique_id": "model.hube.stg_drug_era",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_drug_era.sql",
            "original_file_path": "models\\derived\\stg_drug_era.sql",
            "name": "stg_drug_era",
            "alias": "stg_drug_era",
            "checksum": {
                "name": "sha256",
                "checksum": "a709869d469577f9385624ffb2e8ab79732f939cd9ed5a0d81cd11db97f29621"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "cdm",
                    "drug_exposure"
                ],
                [
                    "cdm",
                    "concept_ancestor"
                ],
                [
                    "cdm",
                    "concept"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "-- stg_location\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n )\r\n}}\r\n\r\nselect\r\n   0::bigint as location_id, -- NOT NULL\r\n   null::varchar(50) as address_1,\r\n   null::varchar(50) as address_2,\r\n   null::varchar(50) as city,\r\n   null::varchar(2) as state,\r\n   null::varchar(9) as zip,\r\n   null::varchar(20) as county,\r\n   null::varchar(100) as country,\r\n   null::text as location_source_value,\r\n   null::numeric as latitude,\r\n   null::numeric as longitude,\r\n  {{ var('shard_id') }} as shard_id",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_location"
            ],
            "unique_id": "model.hube.stg_location",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_location.sql",
            "original_file_path": "models\\derived\\stg_location.sql",
            "name": "stg_location",
            "alias": "stg_location",
            "checksum": {
                "name": "sha256",
                "checksum": "3189e8dc14e374476771a626350a79ebcfa98c1968d72ee2287143cb9917a426"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "-- stg_note\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n)\r\n}}\r\n\r\nwith base_sapxml_urg as (\r\n\r\n    select\r\n      episode_id,\r\n      starting_date as note_date,\r\n      44814646 as note_type_concept_id, -- Emergency department note\r\n      'Informe urgencias' as note_title,\r\n      concat(antecedents_text, '. ', current_illness, '. ', exploracio_complementaria_text, '. ', motiu_consulta_text, '. ', evolucio_alta_text, '. ', exploracio_fisica_text) as texto,\r\n      'urg' as source_table,\r\n      row_number() over(partition by episode_id order by episode_id, starting_date) as n_note,\r\n      iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_urg') }}\r\n\r\n),\r\nbase_sapxml_hos as (\r\n\r\n    select\r\n      episode_id,\r\n      starting_date as note_date,\r\n      44814639 as note_type_concept_id, -- Inpatient note\r\n      'Informe hospitalizacion' as note_title,\r\n      concat(exploracio_fisica_text, '. ', exploracio_complementaria_text, '. ', evolucio_clinica_text ) as texto,\r\n      'hos' as source_table,\r\n      row_number() over(partition by episode_id order by episode_id, starting_date) as n_note,\r\n      iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_hos') }}\r\n\r\n),\r\nbase_sapxml_cur as (\r\n\r\n    select\r\n      episode_id,\r\n      curs_clinic_date as note_date,\r\n      44814645 as note_type_concept_id, -- Note\r\n      'Curso medico' as note_title,\r\n      curs_clinic_text as texto,\r\n      'curs' as source_table,\r\n      row_number() over(partition by episode_id order by episode_id, curs_clinic_date) as n_note,\r\n      iomed_row_insert_datetime\r\n    from {{ ref('base_sapxml_cur') }}\r\n\r\n),\r\n\r\nbase_sapxml_rad as (\r\n\r\n   select\r\n     0 as document_id,\r\n     register_date as note_date,\r\n     44814641 as note_type_concept_id, -- Radiology report\r\n     patient_id,\r\n     treatment_unit_id,\r\n     0 as episode_id,\r\n     0 as note_event_field_concept_id,\r\n     doctor_id,\r\n     report_content_text as texto\r\n   from {{ ref('base_sapxml_rad') }}\r\n\r\n),\r\n\r\nall_notes as (\r\n\r\n    select * from base_sapxml_cur\r\n    union\r\n    select * from base_sapxml_hos\r\n    union\r\n    select * from base_sapxml_urg\r\n--    union\r\n--    select * from base_sapxml_rad\r\n\r\n),\r\nvisit_detail as (\r\n\r\n    select * \r\n    from {{ ref('visit_detail') }}\r\n\r\n),\r\ndocument_ontology_mapping as (\r\n\r\n    select * \r\n    from {{ ref('map_document_ontology') }}\r\n\r\n),\r\nconcept as (\r\n\r\n  select * from {{ source('cdm', 'concept') }}\r\n\r\n),\r\nnote as (\r\n      select\r\n         vd.visit_detail_id::bigint as note_id,\r\n         vd.person_id::bigint as person_id,\r\n         vd.visit_detail_id::bigint as note_event_id,\r\n         1147624::int as note_event_field_concept_id, -- visit_detail.visit_detail_id\r\n         note_date::date as note_date,\r\n         note_date::timestamp as note_datetime,\r\n         n.note_type_concept_id::int as note_type_concept_id,\r\n         co.concept_id::int as note_class_concept_id,\r\n         n.note_title::varchar(250) as note_title,\r\n         n.texto::text as note_text,\r\n         32678::int as encoding_concept_id, -- UTF-8\r\n         4182511::int as language_concept_id, -- Spanish language\r\n         vd.provider_id::bigint as provider_id,\r\n         vd.visit_occurrence_id::bigint as visit_occurrence_id,\r\n         vd.visit_detail_id::bigint as visit_detail_id,\r\n         concat(n.source_table::text, '_', n.episode_id::text, '_', n.n_note::text)::text as note_source_value,\r\n         {{ var('shard_id') }} as shard_id,\r\n         iomed_row_insert_datetime::timestamp\r\n      from all_notes n\r\n      inner join visit_detail vd\r\n        on concat(n.source_table::text, '_', n.episode_id::text, '_', n.n_note::text) = vd.visit_source_value\r\n      left join provider p\r\n        on n.doctor_id = p.provider_name\r\n      inner join document_ontology_mapping dom on\r\n        dom.kind = 'Note' and\r\n        dom.role = 'Physician' and\r\n        dom.subjectmatterdomain is null and\r\n        dom.typeofservice is null and\r\n        dom.setting = 'Hospital'\r\n      inner join concept co on co.concept_code = dom.loincnumber\r\n      where n.note_date is not null -- Don't load notes that do not have date\r\n      and n.texto is not null -- Don't load notes that do not text\r\n)\r\n\r\nselect * from note",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_note"
            ],
            "unique_id": "model.hube.stg_note",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_note.sql",
            "original_file_path": "models\\derived\\stg_note.sql",
            "name": "stg_note",
            "alias": "stg_note",
            "checksum": {
                "name": "sha256",
                "checksum": "135b7b953f4b5c95c61a1f32bcb1c57c6a22bab9b6b7b92b62a8aa05ef72916f"
            },
            "tags": [],
            "refs": [
                [
                    "base_sapxml_urg"
                ],
                [
                    "base_sapxml_hos"
                ],
                [
                    "base_sapxml_cur"
                ],
                [
                    "base_sapxml_rad"
                ],
                [
                    "visit_detail"
                ],
                [
                    "map_document_ontology"
                ]
            ],
            "sources": [
                [
                    "cdm",
                    "concept"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "-- stg_observation\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n)\r\n}}\r\n\r\nwith base_table_name as (\r\n\r\n    select * from {{ ref('base_table_name') }}\r\n\r\n),\r\nvisit_occurrence as (\r\n\r\n    select * from {{ ref('visit_occurrence') }}\r\n\r\n),\r\nsource_to_standard_vocab_map AS (\r\n\r\n    SELECT * FROM {{ ref('source_to_standard_vocab_map') }}\r\n    WHERE source_vocabulary_id in ('ICD9CM', 'ICD10CM') -- Change vocabulary ID if necessary\r\n        AND target_domain_id = 'Observation'\r\n        AND target_standard_concept = 'S'\r\n        AND target_invalid_reason IS NULL\r\n),\r\nobservation as (\r\n    select\r\n        o.id::bigint AS observation_id, -- NOT NULL (change variable name if necessary)\r\n        v.person_id::bigint AS person_id, -- NOT NULL\r\n        (case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end)::int AS observation_concept_id, -- NOT NULL\r\n        null::date AS observation_date,\r\n        0::timestamp AS observation_datetime, -- NOT NULL\r\n        0::int AS observation_type_concept_id,  -- NOT NULL\r\n        null::float as value_as_number,\r\n        null::varchar(60) as value_as_string,\r\n        null::int as value_as_concept_id,\r\n        0::int as qualifier_concept_id, -- NOT NULL\r\n        null::int as unit_concept_id,\r\n        null::bigint as provider_id,\r\n        v.visit_occurrence_id::bigint as visit_occurrence_id,\r\n        null::bigint as visit_detail_id,\r\n        null::text as observation_source_value,\r\n        (case when srctostdvm.source_concept_id is null then 0 else srctostdvm.source_concept_id end)::int as observation_source_concept_id, -- NOT NULL\r\n        null::text as unit_source_value,\r\n        null::text as qualifier_source_value,\r\n        null::bigint as observation_event_id,\r\n        0::int as obs_event_field_concept_id, -- NOT NULL\r\n        null::timestamp as value_as_datetime,\r\n        {{ var('shard_id') }}::int AS shard_id,\r\n        iomed_row_insert_datetime::timestamp\r\n    from base_table_name o\r\n    inner join visit_occurrence v\r\n        on o.episode_id = v.visit_source_value -- Change variable name if necessary\r\n    left join source_to_standard_vocab_map srctostdvm\r\n        on srctostdvm.source_code = o.obs_code -- Change variable name if necessary\r\n    where o.obs_date is not null -- Don't load observations that do not have date (change variable name if necessary)\r\n)\r\n\r\nselect *\r\nfrom observation",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_observation"
            ],
            "unique_id": "model.hube.stg_observation",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_observation.sql",
            "original_file_path": "models\\derived\\stg_observation.sql",
            "name": "stg_observation",
            "alias": "stg_observation",
            "checksum": {
                "name": "sha256",
                "checksum": "11f67d24b1cd9f09d8a581c02d1bd663a3712485cb822325d8aac4c1eeefa401"
            },
            "tags": [],
            "refs": [
                [
                    "base_table_name"
                ],
                [
                    "visit_occurrence"
                ],
                [
                    "source_to_standard_vocab_map"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "-- stg_observation_period\r\n\r\n{{ config(\r\n   materialized='table_unlogged',\r\n   enabled=false\r\n)\r\n}}\r\n\r\nwith visit_occurrence as (\r\n\r\n    select * from {{ ref('visit_occurrence') }}\r\n\r\n),\r\nobservation_period as (\r\n\r\n    select\r\n           {{ bigint_id_from_str(\"concat('obs_period_', person_id::text)\") }}::bigint as observation_period_id, -- NOT NULL\r\n           person_id::bigint as person_id,-- NOT NULL\r\n           min(visit_start_date)::date as observation_period_start_date, -- NOT NULL\r\n\t       max(visit_end_date)::date as observation_period_end_date, -- NOT NULL\r\n\t       0::int as period_type_concept_id, -- NOT NULL\r\n\t       {{ var('shard_id') }} AS shard_id\r\n    from visit_occurrence\r\n    group by person_id\r\n\r\n)\r\n\r\nselect * from observation_period",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.hube.bigint_id_from_str",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table_unlogged",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "stg_observation_period"
            ],
            "unique_id": "model.hube.stg_observation_period",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\stg_observation_period.sql",
            "original_file_path": "models\\derived\\stg_observation_period.sql",
            "name": "stg_observation_period",
            "alias": "stg_observation_period",
            "checksum": {
                "name": "sha256",
                "checksum": "a2bc8eec65d57861b5b08ff2f3f458082b088fc6e981d8bf82036eb290c8da9c"
            },
            "tags": [],
            "refs": [
                [
                    "visit_occurrence"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table_unlogged",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    materialized='table',\r\n\t  enabled=false\r\n  )\r\n}}\r\n\r\nwith snomed2rxnorm as (\r\n    select concept_id_1, concept_id_2\r\n    from {{ source('cdm','concept_relationship') }}\r\n    inner join {{ source('cdm','concept') }} concepts on concept_id_2 = concepts.concept_id\r\n    where relationship_id = 'SNOMED - RxNorm eq'\r\n), cod2snomed as (\r\n    select amts.cod_nacion, c.concept_id, c.concept_code\r\n    from {{ ref('AEMPS_ATC')}} amts\r\n    inner join {{ source('cdm','concept') }} c on c.concept_code = amts.cod_dcp\r\n    where c.vocabulary_id = 'SNOMED'\r\n)\r\nselect distinct on (cs.cod_nacion) -- There may be cases where a SNOMED code has more than one RxNorm codes associated.\r\n       cs.cod_nacion::varchar(50), rx.concept_id_2 as rx_concept_id -- cod_nacion as varchar(50) to match data types in stg_drug_exposure_from_farmacia\r\nfrom cod2snomed cs\r\ninner join snomed2rxnorm rx on cs.concept_id = rx.concept_id_1",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "mappings",
                "cod_nacional_to_rxnorm"
            ],
            "unique_id": "model.hube.cod_nacional_to_rxnorm",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\mappings\\cod_nacional_to_rxnorm.sql",
            "original_file_path": "models\\derived\\mappings\\cod_nacional_to_rxnorm.sql",
            "name": "cod_nacional_to_rxnorm",
            "alias": "cod_nacional_to_rxnorm",
            "checksum": {
                "name": "sha256",
                "checksum": "bfe6978c6d6302edb0f92745819d8f9e6a201ec65678d057fe2a7505bdbbba29"
            },
            "tags": [],
            "refs": [
                [
                    "AEMPS_ATC"
                ]
            ],
            "sources": [
                [
                    "cdm",
                    "concept_relationship"
                ],
                [
                    "cdm",
                    "concept"
                ],
                [
                    "cdm",
                    "concept"
                ]
            ],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    materialized='table',\r\n\t  enabled=false\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom public.crosstab\r\n(\r\n    \t 'SELECT loincnumber, REPLACE(parttypename,''Document.'',''''), partname\r\n    \t FROM {{ this.schema -}}.document_ontology_mapping\r\n    \t ORDER BY 1'::text, 'select distinct REPLACE(parttypename,''Document.'','''')\r\n       from {{ this.schema -}}.document_ontology_mapping order by REPLACE(parttypename,''Document.'','''')'::text\r\n) as T(loincnumber text, Kind text, Role text, Setting text, SubjectMatterDomain text, TypeOfService text)",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "table",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "derived",
                "mappings",
                "map_document_ontology"
            ],
            "unique_id": "model.hube.map_document_ontology",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "derived\\mappings\\map_document_ontology.sql",
            "original_file_path": "models\\derived\\mappings\\map_document_ontology.sql",
            "name": "map_document_ontology",
            "alias": "map_document_ontology",
            "checksum": {
                "name": "sha256",
                "checksum": "515b4860d5b7e580e0ac17a4f623fb8503cc70e536373dcf229c8e64de91dc27"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "schema": "dbt",
                "materialized": "table",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='cdm_source_name',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom {{ ref('stg_cdm_source') }}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "cdm_source_name",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "cdm_source"
            ],
            "unique_id": "model.hube.cdm_source",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\cdm_source.sql",
            "original_file_path": "models\\iomed\\cdm_source.sql",
            "name": "cdm_source",
            "alias": "cdm_source",
            "checksum": {
                "name": "sha256",
                "checksum": "b78d097c5f456320f8e135c8b9ce47961885a44bbdebf899ef3255106981fb5f"
            },
            "tags": [],
            "refs": [
                [
                    "stg_cdm_source"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "materialized": "incremental",
                "unique_key": "cdm_source_name",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='condition_era_id',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom {{ ref('stg_condition_era') }}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "condition_era_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "condition_era"
            ],
            "unique_id": "model.hube.condition_era",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\condition_era.sql",
            "original_file_path": "models\\iomed\\condition_era.sql",
            "name": "condition_era",
            "alias": "condition_era",
            "checksum": {
                "name": "sha256",
                "checksum": "d3dc1a084bc1db8637abb71780bacd1cff73829bb7c5dcdac88be3dd13c33d5b"
            },
            "tags": [],
            "refs": [
                [
                    "stg_condition_era"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "materialized": "incremental",
                "unique_key": "condition_era_id",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='drug_era_id',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom {{ ref('stg_drug_era') }}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "drug_era_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "drug_era"
            ],
            "unique_id": "model.hube.drug_era",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\drug_era.sql",
            "original_file_path": "models\\iomed\\drug_era.sql",
            "name": "drug_era",
            "alias": "drug_era",
            "checksum": {
                "name": "sha256",
                "checksum": "99d7b9f9a30a4ef48a21b330e3fcd15e2d35172aee4389042da9ca1329db75f0"
            },
            "tags": [],
            "refs": [
                [
                    "stg_drug_era"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "materialized": "incremental",
                "unique_key": "drug_era_id",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    materialized='incremental',\r\n    unique_key='location_id',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nselect *\r\nfrom {{ ref('stg_location') }}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "location_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "location"
            ],
            "unique_id": "model.hube.location",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\location.sql",
            "original_file_path": "models\\iomed\\location.sql",
            "name": "location",
            "alias": "location",
            "checksum": {
                "name": "sha256",
                "checksum": "2303ec95f65bf224d2761b43edb9c33c23941dd40a23096c7f7cf2eeb3f70b9d"
            },
            "tags": [],
            "refs": [
                [
                    "stg_location"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "materialized": "incremental",
                "unique_key": "location_id",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    unique_key='observation_id',\r\n    materialized='incremental',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nwith observation as (\r\n\r\n    select * from {{ ref('stg_observation')}}\r\n\r\n)\r\nselect\r\n    observation_id,\r\n    person_id,\r\n    observation_concept_id,\r\n    observation_date,\r\n    observation_datetime,\r\n    observation_type_concept_id,\r\n    value_as_number,\r\n    value_as_string,\r\n    value_as_concept_id,\r\n    qualifier_concept_id,\r\n    unit_concept_id,\r\n    provider_id,\r\n    visit_occurrence_id,\r\n    visit_detail_id,\r\n    observation_source_value,\r\n    observation_source_concept_id,\r\n    unit_source_value,\r\n    qualifier_source_value,\r\n    observation_event_id,\r\n    obs_event_field_concept_id,\r\n    value_as_datetime,\r\n    shard_id\r\nfrom observation\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'observation') }}\r\n{% endif %}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "observation_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "observation"
            ],
            "unique_id": "model.hube.observation",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\observation.sql",
            "original_file_path": "models\\iomed\\observation.sql",
            "name": "observation",
            "alias": "observation",
            "checksum": {
                "name": "sha256",
                "checksum": "3d086249112e1de42e4d19df67a7431821a14a330f566a22ee21709c94a150fd"
            },
            "tags": [],
            "refs": [
                [
                    "stg_observation"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "observation_id",
                "materialized": "incremental",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    unique_key='observation_period_id',\r\n    materialized='incremental',\r\n    enabled=false\r\n    )\r\n}}\r\n\r\nwith observation_period as (\r\n\r\n    select * from {{ ref('stg_observation_period')}}\r\n\r\n)\r\nselect\r\n    observation_period_id,\r\n    person_id,\r\n    observation_period_start_date,\r\n    observation_period_end_date,\r\n    period_type_concept_id,\r\n    shard_id\r\nfrom observation_period\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'observation_period') }}\r\n{% endif %}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "observation_period_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "observation_period"
            ],
            "unique_id": "model.hube.observation_period",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\observation_period.sql",
            "original_file_path": "models\\iomed\\observation_period.sql",
            "name": "observation_period",
            "alias": "observation_period",
            "checksum": {
                "name": "sha256",
                "checksum": "4c3af6c7370c050315ab9708b0bce6bfc1a74f907c8f1098b31c34e3f6b6b59d"
            },
            "tags": [],
            "refs": [
                [
                    "stg_observation_period"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "observation_period_id",
                "materialized": "incremental",
                "enabled": false
            }
        },
        {
            "raw_sql": "{{ config(\r\n    unique_key='note_id',\r\n    materialized='incremental',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nwith note as (\r\n\r\n  select * from {{ ref('stg_note') }}\r\n\r\n)\r\nselect note.* from note\r\n\r\n{% if is_incremental() %}\r\n  -- this filter will only be applied on an incremental run\r\n    where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'note') }}\r\n{% endif %}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "note_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "note_",
                "note"
            ],
            "unique_id": "model.hube.note",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\note_\\note.sql",
            "original_file_path": "models\\iomed\\note_\\note.sql",
            "name": "note",
            "alias": "note",
            "checksum": {
                "name": "sha256",
                "checksum": "19749ae5cd9d516fcc65d2dc73f581702e11bc9132d2b43d983844ab9bb5cd61"
            },
            "tags": [],
            "refs": [
                [
                    "stg_note"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "note_id",
                "materialized": "incremental",
                "enabled": false
            }
        },
        {
            "raw_sql": "-- depends_on: {{ ref('note') }}\r\n\r\n{{\r\nconfig(\r\n    unique_key='note_id',\r\n    materialized='incremental',\r\n\tenabled=false\r\n  )\r\n}}\r\n\r\nwith note as (\r\n\r\n  select * from {{ ref('stg_note') }}\r\n\r\n)\r\nselect\r\n    note_id,\r\n    10::int as processing_status_id, -- raw_do_not_process\r\n    null::jsonb as metadata\r\nfrom note\r\n\r\n{% if is_incremental() %}\r\n-- this filter will only be applied on an incremental run\r\n  where iomed_row_insert_datetime > {{ last_dbt_run(this.schema, 'note_extension') }}\r\n{% endif %}",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "incremental",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "full_refresh": null,
                "unique_key": "note_id",
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm",
            "fqn": [
                "hube",
                "iomed",
                "note_",
                "note_extension"
            ],
            "unique_id": "model.hube.note_extension",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "iomed\\note_\\note_extension.sql",
            "original_file_path": "models\\iomed\\note_\\note_extension.sql",
            "name": "note_extension",
            "alias": "note_extension",
            "checksum": {
                "name": "sha256",
                "checksum": "a8fb4a9d22e08476d8d655e1a5bebb6a6082732b9533490be6d772ccddbcbfb7"
            },
            "tags": [],
            "refs": [
                [
                    "note"
                ],
                [
                    "stg_note"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ],
                "unique_key": "note_id",
                "materialized": "incremental",
                "enabled": false
            }
        },
        {
            "raw_sql": "",
            "resource_type": "seed",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "seed",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {
                    "cod_dcp": "text",
                    "cod_dcpf": "text",
                    "cod_dcsa": "text"
                },
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "quote_columns": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "mappings",
                "AEMPS_ATC"
            ],
            "unique_id": "seed.hube.AEMPS_ATC",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "mappings\\AEMPS_ATC.csv",
            "original_file_path": "data\\mappings\\AEMPS_ATC.csv",
            "name": "AEMPS_ATC",
            "alias": "AEMPS_ATC",
            "checksum": {
                "name": "path",
                "checksum": "data\\mappings\\AEMPS_ATC.csv"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "dbt",
                "column_types": {
                    "cod_dcp": "text",
                    "cod_dcpf": "text",
                    "cod_dcsa": "text"
                },
                "enabled": false
            }
        },
        {
            "raw_sql": "",
            "resource_type": "seed",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "seed",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {
                    "RXnorm": "text"
                },
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "quote_columns": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "mappings",
                "atc_rxnorm_mapping"
            ],
            "unique_id": "seed.hube.atc_rxnorm_mapping",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "mappings\\atc_rxnorm_mapping.csv",
            "original_file_path": "data\\mappings\\atc_rxnorm_mapping.csv",
            "name": "atc_rxnorm_mapping",
            "alias": "atc_rxnorm_mapping",
            "checksum": {
                "name": "sha256",
                "checksum": "715ffa8359521b4df060ef026e11b9f9bd118896568fdbcdbff40df32b68d5be"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "dbt",
                "column_types": {
                    "RXnorm": "text"
                },
                "enabled": false
            }
        },
        {
            "raw_sql": "",
            "resource_type": "seed",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "seed",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "dbt",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "quote_columns": null,
                "post-hook": [],
                "pre-hook": []
            },
            "database": "hube",
            "schema": "cdm_dbt",
            "fqn": [
                "hube",
                "mappings",
                "document_ontology_mapping"
            ],
            "unique_id": "seed.hube.document_ontology_mapping",
            "package_name": "hube",
            "root_path": "C:\\Users\\hamza\\Desktop\\IOMED\\ETLs\\hub-etl-pipeline\\hube-dbt-project",
            "path": "mappings\\document_ontology_mapping.csv",
            "original_file_path": "data\\mappings\\document_ontology_mapping.csv",
            "name": "document_ontology_mapping",
            "alias": "document_ontology_mapping",
            "checksum": {
                "name": "sha256",
                "checksum": "b08867cfd18dd2ec251027744dbe71d4fa519c762750c02005fca4be15f6bb82"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "dbt",
                "enabled": false
            }
        },
        {
            "raw_sql": "with events as (\n\n    select * from {{ref('stg_dbt_audit_log')}}\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name like '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    {{ dbt_utils.group_by(n=3) }}\n\n)\n\nselect * from aggregated",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.group_by",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "bigquery",
                "stg_dbt_deployments"
            ],
            "unique_id": "model.logging.stg_dbt_deployments",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "bigquery\\stg_dbt_deployments.sql",
            "original_file_path": "models\\bigquery\\stg_dbt_deployments.sql",
            "name": "stg_dbt_deployments",
            "alias": "stg_dbt_deployments",
            "checksum": {
                "name": "sha256",
                "checksum": "dd9808de59dab792ee5f753091f917659ada0e3c48f68bed10d1c8a922b216cf"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_audit_log"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "enabled": "{{ target.type == \"bigquery\" | as_bool }}",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            }
        },
        {
            "raw_sql": "with events as (\n\n    select * from {{ ref('stg_dbt_audit_log') }}\n\n),\n\naggregated as (\n\n    select\n\n        {{ dbt_utils.surrogate_key([\n            'event_model',\n            'invocation_id'\n        ]) }} as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name like '%model%'\n\n    {{ dbt_utils.group_by(n=6) }}\n\n)\n\nselect * from aggregated",
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.surrogate_key",
                    "macro.dbt_utils.group_by",
                    "macro.logging.log_model_start_event",
                    "macro.logging.log_model_end_event"
                ],
                "nodes": []
            },
            "config": {
                "enabled": false,
                "materialized": "view",
                "persist_docs": {},
                "vars": {},
                "quoting": {},
                "column_types": {},
                "alias": null,
                "schema": "meta",
                "database": null,
                "tags": [],
                "full_refresh": null,
                "post-hook": [
                    {
                        "sql": "{{ logging.log_model_end_event() }}",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [
                    {
                        "sql": "{{ logging.log_model_start_event() }}",
                        "transaction": true,
                        "index": null
                    }
                ]
            },
            "database": "hube",
            "schema": "cdm_meta",
            "fqn": [
                "logging",
                "bigquery",
                "stg_dbt_model_deployments"
            ],
            "unique_id": "model.logging.stg_dbt_model_deployments",
            "package_name": "logging",
            "root_path": "C:\\tmp\\packages\\logging",
            "path": "bigquery\\stg_dbt_model_deployments.sql",
            "original_file_path": "models\\bigquery\\stg_dbt_model_deployments.sql",
            "name": "stg_dbt_model_deployments",
            "alias": "stg_dbt_model_deployments",
            "checksum": {
                "name": "sha256",
                "checksum": "13b5aa5d104d233d4c114847477c4ffdd9b2bedc5b1555a8b5a39db38b6302cc"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dbt_audit_log"
                ]
            ],
            "sources": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "meta",
                "enabled": "{{ target.type == \"bigquery\" | as_bool }}",
                "pre-hook": "{{ logging.log_model_start_event() }}",
                "post-hook": [
                    "{{ logging.log_model_end_event() }}",
                    "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"
                ]
            }
        }
    ],
    "parent_map": {
        "model.hube.stg_care_site": [
            "model.hube.base_d_servei"
        ],
        "model.hube.stg_condition_occurrence": [
            "model.hube.base_f_diagnostic",
            "model.hube.source_to_standard_vocab_map",
            "model.hube.visit_occurrence"
        ],
        "model.hube.stg_death": [
            "model.hube.stg_person"
        ],
        "model.hube.stg_drug_exposure": [
            "model.hube.base_d_far_especialitat",
            "model.hube.base_f_farmacia",
            "model.hube.base_f_prestacio_episodi",
            "model.hube.source_to_standard_vocab_map",
            "model.hube.visit_occurrence"
        ],
        "model.hube.stg_measurement": [
            "model.hube.base_d_lab_prova",
            "model.hube.base_f_laboratori",
            "model.hube.base_f_prestacio_episodi",
            "model.hube.source_to_standard_vocab_map",
            "model.hube.visit_occurrence"
        ],
        "model.hube.stg_person": [
            "model.hube.base_d_pacient"
        ],
        "model.hube.stg_procedure_occurrence": [
            "model.hube.base_f_procediment",
            "model.hube.source_to_standard_vocab_map",
            "model.hube.visit_occurrence"
        ],
        "model.hube.stg_provider": [
            "model.hube.base_d_metge"
        ],
        "model.hube.stg_visit_detail": [
            "model.hube.base_sapxml_cur",
            "model.hube.base_sapxml_hos",
            "model.hube.base_sapxml_rad",
            "model.hube.base_sapxml_urg",
            "model.hube.care_site",
            "model.hube.provider"
        ],
        "model.hube.stg_visit_occurrence": [
            "model.hube.base_sapxml_cur",
            "model.hube.base_sapxml_hos",
            "model.hube.base_sapxml_urg",
            "model.hube.person"
        ],
        "model.hube.base_d_cataleg_clinic": [
            "source.hube.raw.bmd_iomed_cataleg_clinic"
        ],
        "model.hube.base_d_far_especialitat": [
            "source.hube.raw.bmd_iomed_far_especialitat"
        ],
        "model.hube.base_d_lab_prova": [
            "source.hube.raw.bmd_iomed_lab_prova"
        ],
        "model.hube.base_d_metge": [
            "source.hube.raw.bmd_iomed_metge"
        ],
        "model.hube.base_d_pacient": [
            "source.hube.raw.bmd_iomed_pacient"
        ],
        "model.hube.base_d_prestacio_mestre": [
            "source.hube.raw.bmd_iomed_prestacio_mestre"
        ],
        "model.hube.base_d_servei": [
            "source.hube.raw.bmd_iomed_servei"
        ],
        "model.hube.base_d_sex": [
            "source.hube.raw.bmd_iomed_sexe"
        ],
        "model.hube.base_f_diagnostic": [
            "source.hube.raw.bmf_iomed_diagnostic"
        ],
        "model.hube.base_f_farmacia": [
            "source.hube.raw.bmf_iomed_farmacia"
        ],
        "model.hube.base_f_laboratori": [
            "source.hube.raw.bmf_iomed_laboratori"
        ],
        "model.hube.base_f_prestacio": [
            "source.hube.raw.bmf_iomed_prestacio"
        ],
        "model.hube.base_f_prestacio_episodi": [
            "source.hube.raw.bmf_iomed_prestacio_episodi"
        ],
        "model.hube.base_f_procediment": [
            "source.hube.raw.bmf_iomed_procediment"
        ],
        "model.hube.base_sapxml_cur": [
            "source.hube.raw.bc_iomed_sapxml_cur"
        ],
        "model.hube.base_sapxml_hos": [
            "source.hube.raw.bc_iomed_sapxml_hos"
        ],
        "model.hube.base_sapxml_rad": [
            "source.hube.raw.bc_iomed_sapxml_rad"
        ],
        "model.hube.base_sapxml_urg": [
            "source.hube.raw.bc_iomed_sapxml_urg"
        ],
        "model.hube.source_to_source_vocab_map": [
            "source.hube.cdm.concept",
            "source.hube.cdm.source_to_concept_map"
        ],
        "model.hube.source_to_standard_vocab_map": [
            "source.hube.cdm.concept",
            "source.hube.cdm.concept_relationship",
            "source.hube.cdm.source_to_concept_map"
        ],
        "model.hube.care_site": [
            "model.hube.stg_care_site"
        ],
        "model.hube.condition_occurrence": [
            "model.hube.stg_condition_occurrence"
        ],
        "model.hube.death": [
            "model.hube.stg_death"
        ],
        "model.hube.drug_exposure": [
            "model.hube.stg_drug_exposure"
        ],
        "model.hube.measurement": [
            "model.hube.stg_measurement"
        ],
        "model.hube.person": [
            "model.hube.stg_person"
        ],
        "model.hube.procedure_occurrence": [
            "model.hube.stg_procedure_occurrence"
        ],
        "model.hube.provider": [
            "model.hube.stg_provider"
        ],
        "model.hube.visit_detail": [
            "model.hube.stg_visit_detail"
        ],
        "model.hube.visit_occurrence": [
            "model.hube.stg_visit_occurrence"
        ],
        "operation.hube.hube-on-run-start-0": [],
        "operation.hube.hube-on-run-end-0": [],
        "model.logging.stg_dbt_audit_log": [],
        "model.logging.stg_dbt_deployments": [
            "model.logging.stg_dbt_audit_log"
        ],
        "model.logging.stg_dbt_model_deployments": [
            "model.logging.stg_dbt_audit_log"
        ],
        "analysis.logging.deployments": [
            "model.logging.stg_dbt_deployments"
        ],
        "analysis.logging.models": [
            "model.logging.stg_dbt_model_deployments"
        ],
        "analysis.logging.models_out_of_sla": [
            "model.logging.stg_dbt_model_deployments"
        ],
        "analysis.logging.models_summary": [
            "model.logging.stg_dbt_model_deployments"
        ],
        "operation.logging.logging-on-run-start-0": [],
        "operation.logging.logging-on-run-start-1": [],
        "operation.logging.logging-on-run-start-2": [],
        "operation.logging.logging-on-run-end-0": [],
        "test.hube.not_null_location_location_id.863743b330": [],
        "test.hube.not_null_provider_provider_id.56c189ceb5": [
            "model.hube.provider"
        ],
        "test.hube.not_null_care_site_care_site_id.616967014b": [
            "model.hube.care_site"
        ],
        "test.hube.unique_person_person_id.dec200c4c4": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_person_id.195d30b84a": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_gender_concept_id.bc5dac1807": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_year_of_birth.167b9ae611": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_race_concept_id.c2da52469d": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_ethnicity_concept_id.92a25feaa3": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_gender_source_concept_id.7a57a967cf": [
            "model.hube.person"
        ],
        "test.hube.not_null_person_ethnicity_source_concept_id.501aeaee9e": [
            "model.hube.person"
        ],
        "source.hube.raw.bc_iomed_sapxml_cur": [],
        "source.hube.raw.bc_iomed_sapxml_hos": [],
        "source.hube.raw.bc_iomed_sapxml_rad": [],
        "source.hube.raw.bc_iomed_sapxml_urg": [],
        "source.hube.raw.bmd_iomed_cataleg_clinic": [],
        "source.hube.raw.bmd_iomed_far_especialitat": [],
        "source.hube.raw.bmd_iomed_lab_prova": [],
        "source.hube.raw.bmd_iomed_metge": [],
        "source.hube.raw.bmd_iomed_pacient": [],
        "source.hube.raw.bmd_iomed_prestacio_mestre": [],
        "source.hube.raw.bmd_iomed_servei": [],
        "source.hube.raw.bmd_iomed_sexe": [],
        "source.hube.raw.bmf_iomed_diagnostic": [],
        "source.hube.raw.bmf_iomed_farmacia": [],
        "source.hube.raw.bmf_iomed_laboratori": [],
        "source.hube.raw.bmf_iomed_prestacio": [],
        "source.hube.raw.bmf_iomed_prestacio_episodi": [],
        "source.hube.raw.bmf_iomed_procediment": [],
        "source.hube.cdm.vocabulary": [],
        "source.hube.cdm.concept": [],
        "source.hube.cdm.concept_relationship": [],
        "source.hube.cdm.concept_ancestor": [],
        "source.hube.cdm.concept_synonym": [],
        "source.hube.cdm.concept_class": [],
        "source.hube.cdm.relationship": [],
        "source.hube.cdm.domain": [],
        "source.hube.cdm.drug_strength": [],
        "source.hube.cdm.source_to_concept_map": [],
        "source.hube.cdm.drug_exposure": [],
        "source.hube.cdm.condition_occurrence": []
    },
    "child_map": {
        "model.hube.stg_care_site": [
            "model.hube.care_site"
        ],
        "model.hube.stg_condition_occurrence": [
            "model.hube.condition_occurrence"
        ],
        "model.hube.stg_death": [
            "model.hube.death"
        ],
        "model.hube.stg_drug_exposure": [
            "model.hube.drug_exposure"
        ],
        "model.hube.stg_measurement": [
            "model.hube.measurement"
        ],
        "model.hube.stg_person": [
            "model.hube.person",
            "model.hube.stg_death"
        ],
        "model.hube.stg_procedure_occurrence": [
            "model.hube.procedure_occurrence"
        ],
        "model.hube.stg_provider": [
            "model.hube.provider"
        ],
        "model.hube.stg_visit_detail": [
            "model.hube.visit_detail"
        ],
        "model.hube.stg_visit_occurrence": [
            "model.hube.visit_occurrence"
        ],
        "model.hube.base_d_cataleg_clinic": [],
        "model.hube.base_d_far_especialitat": [
            "model.hube.stg_drug_exposure"
        ],
        "model.hube.base_d_lab_prova": [
            "model.hube.stg_measurement"
        ],
        "model.hube.base_d_metge": [
            "model.hube.stg_provider"
        ],
        "model.hube.base_d_pacient": [
            "model.hube.stg_person"
        ],
        "model.hube.base_d_prestacio_mestre": [],
        "model.hube.base_d_servei": [
            "model.hube.stg_care_site"
        ],
        "model.hube.base_d_sex": [],
        "model.hube.base_f_diagnostic": [
            "model.hube.stg_condition_occurrence"
        ],
        "model.hube.base_f_farmacia": [
            "model.hube.stg_drug_exposure"
        ],
        "model.hube.base_f_laboratori": [
            "model.hube.stg_measurement"
        ],
        "model.hube.base_f_prestacio": [],
        "model.hube.base_f_prestacio_episodi": [
            "model.hube.stg_drug_exposure",
            "model.hube.stg_measurement"
        ],
        "model.hube.base_f_procediment": [
            "model.hube.stg_procedure_occurrence"
        ],
        "model.hube.base_sapxml_cur": [
            "model.hube.stg_visit_detail",
            "model.hube.stg_visit_occurrence"
        ],
        "model.hube.base_sapxml_hos": [
            "model.hube.stg_visit_detail",
            "model.hube.stg_visit_occurrence"
        ],
        "model.hube.base_sapxml_rad": [
            "model.hube.stg_visit_detail"
        ],
        "model.hube.base_sapxml_urg": [
            "model.hube.stg_visit_detail",
            "model.hube.stg_visit_occurrence"
        ],
        "model.hube.source_to_source_vocab_map": [],
        "model.hube.source_to_standard_vocab_map": [
            "model.hube.stg_condition_occurrence",
            "model.hube.stg_drug_exposure",
            "model.hube.stg_measurement",
            "model.hube.stg_procedure_occurrence"
        ],
        "model.hube.care_site": [
            "model.hube.stg_visit_detail",
            "test.hube.not_null_care_site_care_site_id.616967014b"
        ],
        "model.hube.condition_occurrence": [],
        "model.hube.death": [],
        "model.hube.drug_exposure": [],
        "model.hube.measurement": [],
        "model.hube.person": [
            "model.hube.stg_visit_occurrence",
            "test.hube.not_null_person_ethnicity_concept_id.92a25feaa3",
            "test.hube.not_null_person_ethnicity_source_concept_id.501aeaee9e",
            "test.hube.not_null_person_gender_concept_id.bc5dac1807",
            "test.hube.not_null_person_gender_source_concept_id.7a57a967cf",
            "test.hube.not_null_person_person_id.195d30b84a",
            "test.hube.not_null_person_race_concept_id.c2da52469d",
            "test.hube.not_null_person_year_of_birth.167b9ae611",
            "test.hube.unique_person_person_id.dec200c4c4"
        ],
        "model.hube.procedure_occurrence": [],
        "model.hube.provider": [
            "model.hube.stg_visit_detail",
            "test.hube.not_null_provider_provider_id.56c189ceb5"
        ],
        "model.hube.visit_detail": [],
        "model.hube.visit_occurrence": [
            "model.hube.stg_condition_occurrence",
            "model.hube.stg_drug_exposure",
            "model.hube.stg_measurement",
            "model.hube.stg_procedure_occurrence"
        ],
        "operation.hube.hube-on-run-start-0": [],
        "operation.hube.hube-on-run-end-0": [],
        "model.logging.stg_dbt_audit_log": [
            "model.logging.stg_dbt_deployments",
            "model.logging.stg_dbt_model_deployments"
        ],
        "model.logging.stg_dbt_deployments": [
            "analysis.logging.deployments"
        ],
        "model.logging.stg_dbt_model_deployments": [
            "analysis.logging.models",
            "analysis.logging.models_out_of_sla",
            "analysis.logging.models_summary"
        ],
        "analysis.logging.deployments": [],
        "analysis.logging.models": [],
        "analysis.logging.models_out_of_sla": [],
        "analysis.logging.models_summary": [],
        "operation.logging.logging-on-run-start-0": [],
        "operation.logging.logging-on-run-start-1": [],
        "operation.logging.logging-on-run-start-2": [],
        "operation.logging.logging-on-run-end-0": [],
        "test.hube.not_null_location_location_id.863743b330": [],
        "test.hube.not_null_provider_provider_id.56c189ceb5": [],
        "test.hube.not_null_care_site_care_site_id.616967014b": [],
        "test.hube.unique_person_person_id.dec200c4c4": [],
        "test.hube.not_null_person_person_id.195d30b84a": [],
        "test.hube.not_null_person_gender_concept_id.bc5dac1807": [],
        "test.hube.not_null_person_year_of_birth.167b9ae611": [],
        "test.hube.not_null_person_race_concept_id.c2da52469d": [],
        "test.hube.not_null_person_ethnicity_concept_id.92a25feaa3": [],
        "test.hube.not_null_person_gender_source_concept_id.7a57a967cf": [],
        "test.hube.not_null_person_ethnicity_source_concept_id.501aeaee9e": [],
        "source.hube.raw.bc_iomed_sapxml_cur": [
            "model.hube.base_sapxml_cur"
        ],
        "source.hube.raw.bc_iomed_sapxml_hos": [
            "model.hube.base_sapxml_hos"
        ],
        "source.hube.raw.bc_iomed_sapxml_rad": [
            "model.hube.base_sapxml_rad"
        ],
        "source.hube.raw.bc_iomed_sapxml_urg": [
            "model.hube.base_sapxml_urg"
        ],
        "source.hube.raw.bmd_iomed_cataleg_clinic": [
            "model.hube.base_d_cataleg_clinic"
        ],
        "source.hube.raw.bmd_iomed_far_especialitat": [
            "model.hube.base_d_far_especialitat"
        ],
        "source.hube.raw.bmd_iomed_lab_prova": [
            "model.hube.base_d_lab_prova"
        ],
        "source.hube.raw.bmd_iomed_metge": [
            "model.hube.base_d_metge"
        ],
        "source.hube.raw.bmd_iomed_pacient": [
            "model.hube.base_d_pacient"
        ],
        "source.hube.raw.bmd_iomed_prestacio_mestre": [
            "model.hube.base_d_prestacio_mestre"
        ],
        "source.hube.raw.bmd_iomed_servei": [
            "model.hube.base_d_servei"
        ],
        "source.hube.raw.bmd_iomed_sexe": [
            "model.hube.base_d_sex"
        ],
        "source.hube.raw.bmf_iomed_diagnostic": [
            "model.hube.base_f_diagnostic"
        ],
        "source.hube.raw.bmf_iomed_farmacia": [
            "model.hube.base_f_farmacia"
        ],
        "source.hube.raw.bmf_iomed_laboratori": [
            "model.hube.base_f_laboratori"
        ],
        "source.hube.raw.bmf_iomed_prestacio": [
            "model.hube.base_f_prestacio"
        ],
        "source.hube.raw.bmf_iomed_prestacio_episodi": [
            "model.hube.base_f_prestacio_episodi"
        ],
        "source.hube.raw.bmf_iomed_procediment": [
            "model.hube.base_f_procediment"
        ],
        "source.hube.cdm.vocabulary": [],
        "source.hube.cdm.concept": [
            "model.hube.source_to_source_vocab_map",
            "model.hube.source_to_standard_vocab_map"
        ],
        "source.hube.cdm.concept_relationship": [
            "model.hube.source_to_standard_vocab_map"
        ],
        "source.hube.cdm.concept_ancestor": [],
        "source.hube.cdm.concept_synonym": [],
        "source.hube.cdm.concept_class": [],
        "source.hube.cdm.relationship": [],
        "source.hube.cdm.domain": [],
        "source.hube.cdm.drug_strength": [],
        "source.hube.cdm.source_to_concept_map": [
            "model.hube.source_to_source_vocab_map",
            "model.hube.source_to_standard_vocab_map"
        ],
        "source.hube.cdm.drug_exposure": [],
        "source.hube.cdm.condition_occurrence": []
    }
}